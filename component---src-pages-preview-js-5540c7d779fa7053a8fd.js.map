{"version":3,"file":"component---src-pages-preview-js-5540c7d779fa7053a8fd.js","mappings":"kNAaA,MAkFMA,EAAcC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,uBAAAC,YAAA,eAAVJ,CAAU,oQAiB9B,UAnGoBK,KAClB,MAAM,EAACC,EAAQ,EAACC,IAAcC,EAAAA,EAAAA,WAAS,IACjC,EAACC,EAAa,EAACC,IAAmBF,EAAAA,EAAAA,UAAS,OAC3C,EAACG,EAAM,EAACC,IAAYJ,EAAAA,EAAAA,UAAS,MA4DnC,OAJAK,EAAAA,EAAAA,YAAU,KAtDQC,WAAa,IAADC,EAC5B,MAAM,SAAEC,GAAaC,OACfC,EAAcC,EAAAA,MAAwB,QAAhBJ,EAACC,EAASI,cAAM,IAAAL,EAAAA,EAAI,IAC1CM,EAAKH,EAAYI,UAEvB,GAAIJ,EAAYK,aAA2C,WAA5BL,EAAYK,YAEzC,cADOL,EAAYK,YACXN,OAAOD,SAASQ,KAAI,sBAC1BR,EAASS,SAAQ,IACfN,EAAAA,UAAaD,GAGnB,IACE,IAAKG,EAKH,OAJAd,GAAW,QACXK,EAAS,CACPc,QAAS,qCAKb,MAAMC,QAAaC,EAAAA,EAAAA,IAAwBP,GAC3C,IAAKM,EAKH,OAJApB,GAAW,QACXK,EAAS,CACPc,QAAS,yCAKb,MAAM,KAAEG,SAAeC,EAAAA,EAAAA,IAAoBH,EAAMN,GACjD,GAAIQ,EAAM,CAAC,IAADE,EAAAC,EACR,MAAMC,EAAiC,QAAtBF,EAAGF,EAAKK,sBAAc,IAAAH,OAAA,EAAnBA,EAAqBI,WACnCC,GAA+B,QAAnBJ,EAAAH,EAAKK,sBAAc,IAAAF,OAAA,EAAnBA,EAAqBK,IAAIhB,UAAMiB,EAC3CC,EAAa,IACdV,EAAKK,eACRM,SAAU,CACRb,MAAMc,EAAAA,EAAAA,IAAiCR,IAEzCS,cAAeN,GAIjB,OAFA7B,GAAW,QACXG,EAAgB6B,EAElB,CACF,CAAE,MAAO5B,GACPgC,QAAQC,IAAI,6BAA8BjC,EAC5C,CACAJ,GAAW,GACXK,EAAS,CACPc,QAAS,gCACT,EAIFmB,EAAW,GACV,IAECvC,EAAgBwC,EAAAA,cAACC,EAAAA,EAAc,MACR,iBAAvBtC,aAAY,EAAZA,EAAcuC,MACTF,EAAAA,cAACG,EAAAA,QAAyB,CAACpB,KAAMpB,IAEtCA,EAEAqC,EAAAA,cAACI,EAAAA,EAAM,CACLC,WAAY1C,aAAY,EAAZA,EAAc0C,WAC1BC,WAAY3C,aAAY,EAAZA,EAAc2C,WAC1BC,eAAgB5C,aAAY,EAAZA,EAAc4C,gBAE9BP,EAAAA,cAAC/C,EAAW,KAAC,iBACZuD,EAAAA,EAAAA,GAA4B7C,IAI5BqC,EAAAA,cAAA,UAAI,qCAAmCnC,aAAK,EAALA,EAAOe,QAAa,C","sources":["webpack://metamask-io/./src/pages/preview.js"],"sourcesContent":["import qs from 'query-string'\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport PreviewLoading from '../components/PreviewLoading'\nimport {\n  convertContentfulPreviewTypename,\n  fetchContentfulData,\n  fetchContentfulTypename,\n} from '../lib/utils/fetchContentfulData'\nimport { contentfulModuleToComponent } from '../lib/utils/moduleToComponent'\nimport Layout from '../templates/PageLayout'\nimport ContentfulPortfolioLayout from '../templates/ContentfulPortfolioLayout'\n\nconst PreviewPage = () => {\n  const [loading, setLoading] = useState(true)\n  const [moduleConfig, setModuleConfig] = useState(null)\n  const [error, setError] = useState(null)\n\n  const getModule = async () => {\n    const { location } = window\n    const queryParams = qs.parse(location.search ?? '')\n    const id = queryParams.module_id\n\n    if (queryParams.environment && queryParams.environment === 'master') {\n      delete queryParams.environment\n      return (window.location.href = `https://metamask.io${\n        location.pathname\n      }?${qs.stringify(queryParams)}`)\n    }\n\n    try {\n      if (!id) {\n        setLoading(false)\n        setError({\n          message: 'No module id provided to preview',\n        })\n        return\n      }\n\n      const type = await fetchContentfulTypename(id)\n      if (!type) {\n        setLoading(false)\n        setError({\n          message: 'Failed to fetch contentful type name',\n        })\n        return\n      }\n\n      const { data } = await fetchContentfulData(type, id)\n      if (data) {\n        const contentType = data.previewContent?.__typename\n        const contentId = data.previewContent?.sys.id || undefined\n        const dataUpdate = {\n          ...data.previewContent,\n          internal: {\n            type: convertContentfulPreviewTypename(contentType),\n          },\n          contentful_id: contentId,\n        }\n        setLoading(false)\n        setModuleConfig(dataUpdate)\n        return\n      }\n    } catch (error) {\n      console.log('Fetch preview data error: ', error)\n    }\n    setLoading(false)\n    setError({\n      message: 'Failed to fetch preview data',\n    })\n  }\n\n  useEffect(() => {\n    getModule()\n  }, [])\n\n  if (loading) return <PreviewLoading />\n  if (moduleConfig?.slug === '/portfolio/') {\n    return <ContentfulPortfolioLayout data={moduleConfig} />\n  }\n  if (moduleConfig) {\n    return (\n      <Layout\n        themeColor={moduleConfig?.themeColor}\n        h2FontSize={moduleConfig?.h2FontSize}\n        widerContainer={moduleConfig?.widerContainer}\n      >\n        <PreviewInfo>Preview mode</PreviewInfo>\n        {contentfulModuleToComponent(moduleConfig)}\n      </Layout>\n    )\n  }\n  return <h4>Failed to load preview component: {error?.message}</h4>\n}\n\nconst PreviewInfo = styled.div`\n  width: 140px;\n  height: 35px;\n  background-color: lightyellow;\n  color: red;\n  text-align: center;\n  line-height: 31px;\n  font-weight: bold;\n  border: 2px solid lightgoldenrodyellow;\n  border-radius: 10px 10px 0 0;\n  position: fixed;\n  top: 200px;\n  left: -53px;\n  z-index: 2000;\n  transform: rotate(90deg);\n`\n\nexport default PreviewPage\n"],"names":["PreviewInfo","styled","div","withConfig","displayName","componentId","PreviewPage","loading","setLoading","useState","moduleConfig","setModuleConfig","error","setError","useEffect","async","_location$search","location","window","queryParams","qs","search","id","module_id","environment","href","pathname","message","type","fetchContentfulTypename","data","fetchContentfulData","_data$previewContent","_data$previewContent2","contentType","previewContent","__typename","contentId","sys","undefined","dataUpdate","internal","convertContentfulPreviewTypename","contentful_id","console","log","getModule","React","PreviewLoading","slug","ContentfulPortfolioLayout","Layout","themeColor","h2FontSize","widerContainer","contentfulModuleToComponent"],"sourceRoot":""}