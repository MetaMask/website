{"componentChunkName":"component---src-templates-contentful-news-category-layout-js","path":"/tr/news/developers/page/4/","result":{"data":{"header":{"contentful_id":"6I0knvqLf0DS5PB72DqUlM","node_locale":"tr","internal":{"type":"ContentfulLayoutHeader"},"logo":{"contentful_id":"6fkPzzTMo3IoMKGMshuSVD","node_locale":"tr","internal":{"type":"ContentfulLogo"},"title":"MetaMask Logo","logo":{"title":"mm-logo","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/4zJfzJbG3kTDSk5Wo4RJI1/1b363263141cf629b28155e2625b56c9/mm-logo.svg"},"gatsbyImageData":null},"logoDarkMode":{"title":"mm-logo-white","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/2qy1wS5MmZOXkXn9yFlGJp/f3797a512c283e6f71450abd408b7452/mm-logo-white.svg"},"gatsbyImageData":null},"link":"/","newTab":false,"displayTitle":false,"widthLogo":null,"backgroundColor":null,"customClass":null},"logoMobile":null,"menuItems":[{"columns":1,"title":"Özellikler","displayTitle":true,"modules":[{"node_locale":"tr","contentful_id":"3Ngv0xEpQwwiVjfu3MVui9","fontSize":null,"ctaLink":"https://portfolio.metamask.io/","displayText":"MetaMask Portfolio","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":"Nav Bar Button","eventCategory":"MetaMask Portfolio ","socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"272HODLnCd83z9Is3VXfCV","fontSize":null,"ctaLink":"/swaps/","displayText":"Swap İşlemleri","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"3GGJuQss10B4ejSi1vzHxk","fontSize":null,"ctaLink":"/buy-crypto/","displayText":"Kripto Al","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"4OJuQIyiz6RKXiEZ2aMYX5","fontSize":null,"ctaLink":"/sell-crypto/","displayText":"Kripto Sat","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":"sell-crypto","customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"5n6LAatVBeM1vw6ok6bqcR","fontSize":null,"ctaLink":"/snaps/","displayText":"MetaMask Snaps","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null}]},{"columns":1,"title":"Oluştur","displayTitle":true,"modules":[{"node_locale":"tr","contentful_id":"1JmDHLFU2Y45o1QXsQDjC1","fontSize":null,"ctaLink":"https://docs.metamask.io/","displayText":"Belgeler","displayTextTreatment":null,"newTab":true,"buttonDisplay":null,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":false,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"5gPptdmrIjeGdYowLtrCHo","fontSize":null,"ctaLink":"/developer/","displayText":"Geliştiriciler","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":false,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"60cjqarld8mVDWHs8qZ4q1","fontSize":null,"ctaLink":"/institutions/","displayText":"Institutions","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":false,"buttonCaretDown":false,"launchDarklyFlag":"institutions","customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"39eW2psItqGMrBVsMkLyDz","fontSize":null,"ctaLink":"/sdk/","displayText":"SDK","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null}]},{"columns":1,"title":"Kaynaklar","displayTitle":true,"modules":[{"node_locale":"tr","contentful_id":"6NMiwFe3tTn9NV1K9UGlcZ","fontSize":null,"ctaLink":"/news/","displayText":"Blog","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"3eavIRbBzcKt3XA1CZRrON","fontSize":null,"ctaLink":"https://support.metamask.io","displayText":"Destek","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"qGq9T5d9vFmRNSvrQbNOk","fontSize":null,"ctaLink":"/faqs/","displayText":"Sıkça Sorulan Sorular","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"hFoMVr6dpc0M4Q8OzIvoa","fontSize":null,"ctaLink":"https://community.metamask.io/","displayText":"Topluluk","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null}]},{"node_locale":"tr","contentful_id":"1wFIQKdGvyapyZJfmISWHc","fontSize":null,"ctaLink":"https://learn.metamask.io/overview","displayText":"Öğren","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":"Nav Bar Button","eventCategory":"MetaMask Learn ","socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null}],"downloadButton":{"node_locale":"tr","contentful_id":"3v9J6feUIljXuMBM0EYQNh","fontSize":null,"ctaLink":"/download/","displayText":"İndir","displayTextTreatment":"Get MetaMask","newTab":false,"buttonDisplay":true,"buttonGradient":false,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":"Nav Bar Button","eventCategory":"Download Intent","socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":"mm-download-header","customClassName":"ld-download-link","internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":{"node_locale":"tr","contentful_id":"4bGNlgZAx6ugxPYFht8Ble","fontSize":null,"ctaLink":"https://portfolio.metamask.io/","displayText":"Portfolio'yu görüntüle","displayTextTreatment":"Varlıklarını Görüntüle","newTab":true,"buttonDisplay":true,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":false,"buttonCaretDown":null,"launchDarklyFlag":"mm-portfolio-cta-header","customClassName":"ld-portfolio-link","internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null}},"popupAnnouncement":{"contentful_id":"5yOpjVXgyG3eGYvZQkmv4f","node_locale":"tr","internal":{"type":"ContentfulPopupAnnouncement"},"title":null,"ctaText":"MetaMask Portfolio'yu bugün keşfedin. Tek bir noktadan web3 varlıklarınızı takip edin ve yönetin!","ctaLink":"https://portfolio.metamask.io","backgroundColor":"#037DD5"},"popupAnnouncementTreatment":{"contentful_id":"5cklTGW1qCkOwqxdVYhhFc","node_locale":"tr","internal":{"type":"ContentfulPopupAnnouncement"},"title":null,"ctaText":"Stake Havuzu ile kriptonuzun büyümesini izleyin. Kriptonuzu stake edin ve Ethereum ağını korumanız karşılığında ödül kazanın.","ctaLink":"https://portfolio.metamask.io/stake?tab=pooled","backgroundColor":"#037DD5"},"isSticky":true,"launchDarklyFlag":"use-treatment-for-non-uk-and-us-announcement"},"footer":{"contentful_id":"75bFgEllkMxpVsY8wWlroX","node_locale":"tr","internal":{"type":"ContentfulLayoutFooter"},"logo":{"contentful_id":"6fkPzzTMo3IoMKGMshuSVD","node_locale":"tr","internal":{"type":"ContentfulLogo"},"title":"MetaMask Logo","logo":{"title":"mm-logo","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/4zJfzJbG3kTDSk5Wo4RJI1/1b363263141cf629b28155e2625b56c9/mm-logo.svg"},"gatsbyImageData":null},"logoDarkMode":{"title":"mm-logo-white","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/2qy1wS5MmZOXkXn9yFlGJp/f3797a512c283e6f71450abd408b7452/mm-logo-white.svg"},"gatsbyImageData":null},"link":"/","newTab":false,"displayTitle":false,"widthLogo":null,"backgroundColor":null,"customClass":null},"menuItems":[{"columns":1,"title":"Daha Fazla Bilgi","displayTitle":true,"modules":[{"node_locale":"tr","contentful_id":"2OzvqisgIr6A5gzJuQm24G","fontSize":null,"ctaLink":"/about/","displayText":"Hakkında","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"5gPptdmrIjeGdYowLtrCHo","fontSize":null,"ctaLink":"/developer/","displayText":"Geliştiriciler","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":false,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"NM6IbWouGG4tghpXmNAtJ","fontSize":null,"ctaLink":"/download/","displayText":"İndir","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"6Ui9MOvxC2ExjCL1DeWH1q","fontSize":null,"ctaLink":"/institutions/","displayText":"MetaMask Institutional","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"5UxqbY7b31kskBIj5IibqC","fontSize":null,"ctaLink":"/news/","displayText":"Haberler","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"6qlnG54k7tXJVMscTQhIun","fontSize":null,"ctaLink":"https://metamask.io/security/","displayText":"Güvenlik","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null}]},{"columns":1,"title":"Dahil Olun","displayTitle":true,"modules":[{"node_locale":"tr","contentful_id":"4mpEqrd6pewz2iX2Gfxt3z","fontSize":null,"ctaLink":"https://github.com/MetaMask/metamask-extension/","displayText":"GitHub","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"6kdhvf8S4erkJPUlGWY0Ae","fontSize":null,"ctaLink":"https://gitcoin.co/","displayText":"Gitcoin","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"5xd9mrSTpZ9Ky7XWhDDTth","fontSize":null,"ctaLink":"https://consensys.io/open-roles/?discipline=32543","displayText":"Açık Pozisyonlar","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"6SYAtiKQ188OxaIKhHd7qj","fontSize":null,"ctaLink":"https://shop.spreadshirt.com/metamask/","displayText":"Swag Mağazası","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"72IN7H47TcmIvmYyyTETIS","fontSize":null,"ctaLink":"https://consensys.io/contact","displayText":"Basın ve Ortaklıklar","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null}]},{"columns":1,"title":"Yasal","displayTitle":true,"modules":[{"node_locale":"tr","contentful_id":"4LiJW9vtg515J8Bhlzq8nC","fontSize":null,"ctaLink":"https://consensys.io/privacy-notice","displayText":"Gizlilik Politikası","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"2GpObxkrC9uUyLXLonaa3F","fontSize":null,"ctaLink":"/terms-of-use/","displayText":"Kullanım Şartları","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"5WpVb2xPvtf19P6NVNloit","fontSize":null,"ctaLink":"/cla/","displayText":"Katkıda Bulunan Lisans Sözleşmesi","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"tr","contentful_id":"19JXW3A4VGjeuEC6u46uC4","fontSize":null,"ctaLink":"/sitemap/","displayText":"Site Haritası","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null}]}],"copyright":"©2024 MetaMask • Bir Consensys Oluşumu"},"seo":{"contentful_id":"7k3sOZj8ICP53K0J7jXp7B","node_locale":"tr","internal":{"type":"ContentfulSeo"},"pageTitle":"Web3: MetaMask Haberlerinde En Yeniler ile Güncel Kalın","pageDescription":"Haberdar Olun: MetaMask Haberlerinden En Yeni Güncellemeler ve Gelişmeler.","metaTags":null,"linkTags":null,"canonicalUrl":null,"featuredImage":{"file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/22a2dd6975f7522fac5dca4ce1a4d969/tr_-_seo1.png"},"gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/22a2dd6975f7522fac5dca4ce1a4d969/tr_-_seo1.png?w=192&h=101&q=100&fm=webp 192w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/22a2dd6975f7522fac5dca4ce1a4d969/tr_-_seo1.png?w=384&h=202&q=100&fm=webp 384w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/22a2dd6975f7522fac5dca4ce1a4d969/tr_-_seo1.png?w=768&h=403&q=100&fm=webp 768w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/22a2dd6975f7522fac5dca4ce1a4d969/tr_-_seo1.png?w=1536&h=806&q=100&fm=webp 1536w","sizes":"(min-width: 768px) 768px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/22a2dd6975f7522fac5dca4ce1a4d969/tr_-_seo1.png?w=768&h=403&q=100&fm=png","srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/22a2dd6975f7522fac5dca4ce1a4d969/tr_-_seo1.png?w=192&h=101&q=100&fm=png 192w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/22a2dd6975f7522fac5dca4ce1a4d969/tr_-_seo1.png?w=384&h=202&q=100&fm=png 384w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/22a2dd6975f7522fac5dca4ce1a4d969/tr_-_seo1.png?w=768&h=403&q=100&fm=png 768w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/22a2dd6975f7522fac5dca4ce1a4d969/tr_-_seo1.png?w=1536&h=806&q=100&fm=png 1536w","sizes":"(min-width: 768px) 768px, 100vw"}},"layout":"constrained","width":768,"height":403}},"structuredDataSchema":null},"hero":{"contentful_id":"4ZjPczvQn6fYgigGRFSQPf","node_locale":"tr","internal":{"type":"ContentfulLayoutHero"},"headline":"MetaMask Haberleri","headlinePortfolio":null,"hideHeadline":false,"description":{"childMarkdownRemark":{"html":"<a href=\"https://twitter.com/metamask/\" target=\"_blank\">\n  <svg width=\"25\" height=\"20\" viewBox=\"0 0 25 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M24.5 2.55699C23.617 2.94899 22.668 3.21299 21.672 3.33199C22.689 2.72299 23.47 1.75799 23.837 0.607986C22.886 1.17199 21.832 1.58199 20.71 1.80299C19.813 0.845986 18.532 0.247986 17.116 0.247986C13.937 0.247986 11.601 3.21399 12.319 6.29299C8.228 6.08799 4.6 4.12799 2.171 1.14899C0.881 3.36199 1.502 6.25699 3.694 7.72299C2.888 7.69699 2.128 7.47599 1.465 7.10699C1.411 9.38799 3.046 11.522 5.414 11.997C4.721 12.185 3.962 12.229 3.19 12.081C3.816 14.037 5.634 15.46 7.79 15.5C5.72 17.123 3.112 17.848 0.5 17.54C2.679 18.937 5.268 19.752 8.048 19.752C17.19 19.752 22.355 12.031 22.043 5.10599C23.005 4.41099 23.84 3.54399 24.5 2.55699Z\" fill=\"#535A61\"/>\n</svg>Takip et @MetaMask\n</a>"}},"descriptionPortfolio":null,"note":null,"eyebrow":null,"eyebrowLogo":null,"eyebrowMobileLogo":null,"eyebrowLogoDarkMode":null,"eyebrowMobileLogoDarkMode":null,"sideImageFlex":false,"sideImageFoxAnimation":null,"sideImage":null,"sideImagePortfolio":null,"sideImageDarkMode":null,"sideImagePortfolioDarkMode":null,"ctas":null,"hubSpotForm":null,"backgroundColor":"default","contentAlignment":"center","learnMoreText":null,"headlineBorderBottom":false,"showFavIcon":false,"sectionPadding":"32px","backgroundImage":{"title":"News Hero","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png"},"gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png?w=480&h=96&q=80&fm=webp 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png?w=960&h=192&q=80&fm=webp 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png?w=1920&h=384&q=80&fm=webp 1920w","sizes":"(min-width: 1920px) 1920px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png?w=1920&h=384&q=80&fm=png","srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png?w=480&h=96&q=80&fm=png 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png?w=960&h=192&q=80&fm=png 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png?w=1920&h=384&q=80&fm=png 1920w","sizes":"(min-width: 1920px) 1920px, 100vw"}},"layout":"constrained","width":1920,"height":384}},"backgroundImageDarkMode":{"title":"News Hero (Dark mode)","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png"},"gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png?w=480&h=96&q=80&fm=webp 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png?w=960&h=192&q=80&fm=webp 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png?w=1920&h=384&q=80&fm=webp 1920w","sizes":"(min-width: 1920px) 1920px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png?w=1920&h=384&q=80&fm=png","srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png?w=480&h=96&q=80&fm=png 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png?w=960&h=192&q=80&fm=png 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png?w=1920&h=384&q=80&fm=png 1920w","sizes":"(min-width: 1920px) 1920px, 100vw"}},"layout":"constrained","width":1920,"height":384}},"customClass":"newsHero"},"layoutModuleContainer":{"internal":{"type":"ContentfulLayoutModuleContainer"},"contentful_id":"P9sMsqPrQxPv6xyeMWZvn","node_locale":"tr","eyebrow":null,"headline":null,"description":null,"modules":[{"contentful_id":"3pVthg97YVjIy9Z6a8ntfm","node_locale":"tr","internal":{"type":"ContentfulModuleContainer"},"title":"En Yeniler","description":{"childMarkdownRemark":{"html":"<h2>En Yeni Haberler</h2>\nSizin için blog paylaşımlarımız ve yayınlarımız"}},"numberOfItem":0,"columns":2,"columnType":null,"columnsOnTablet":null,"centerOnTablet":null,"columnsOnMobile":1,"centerOnMobile":null,"contentAlignment":"left","splitModules":false,"displayTitle":false,"isLiquiditySection":false,"isTrustBar":null,"gridModulesGap":"16px","loadMoreMode":null,"loadMoreCta":null,"carouselMode":null,"hasRegionSelector":null,"regionSelectorHeadline":null,"regionSelectorPopupTitle":null,"regionSelectorPopupText":null,"regionListKey":null,"extraData":null,"modules":[{"contentful_id":"3tE0tpmPMGsXezpOhKyWGO","node_locale":"tr","internal":{"type":"ContentfulNewsCategory"},"name":"En Yeniler","slug":"latest"}]},{"contentful_id":"6e8qa9GygFsjJT0bK9T1Ae","node_locale":"tr","internal":{"type":"ContentfulModuleContainer"},"title":"Güvenlik","description":{"childMarkdownRemark":{"html":"<h2>Güvenlik</h2>\nGüvenlikle ilgili tüm haberleriniz"}},"numberOfItem":0,"columns":2,"columnType":null,"columnsOnTablet":null,"centerOnTablet":null,"columnsOnMobile":1,"centerOnMobile":null,"contentAlignment":"left","splitModules":false,"displayTitle":false,"isLiquiditySection":false,"isTrustBar":null,"gridModulesGap":"16px","loadMoreMode":null,"loadMoreCta":null,"carouselMode":null,"hasRegionSelector":null,"regionSelectorHeadline":null,"regionSelectorPopupTitle":null,"regionSelectorPopupText":null,"regionListKey":null,"extraData":null,"modules":[{"contentful_id":"73InEMthwQcFmYQ8Ta61gS","node_locale":"tr","internal":{"type":"ContentfulNewsCategory"},"name":"Güvenlik","slug":"security"}]},{"contentful_id":"3D1RfQOf8U5zibB0UvA9K6","node_locale":"tr","internal":{"type":"ContentfulModuleContainer"},"title":"Geliştiriciler","description":{"childMarkdownRemark":{"html":"<h2>Geliştiriciler</h2>\nGeliştiricinizle ilgili tüm haberler"}},"numberOfItem":0,"columns":2,"columnType":null,"columnsOnTablet":null,"centerOnTablet":null,"columnsOnMobile":1,"centerOnMobile":null,"contentAlignment":"left","splitModules":false,"displayTitle":false,"isLiquiditySection":false,"isTrustBar":null,"gridModulesGap":"16px","loadMoreMode":null,"loadMoreCta":null,"carouselMode":null,"hasRegionSelector":null,"regionSelectorHeadline":null,"regionSelectorPopupTitle":null,"regionSelectorPopupText":null,"regionListKey":null,"extraData":null,"modules":[{"contentful_id":"Jc9ZQ937JgPbuV2Xap2l7","node_locale":"tr","internal":{"type":"ContentfulNewsCategory"},"name":"Geliştiriciler","slug":"developers"}]},{"contentful_id":"6abraWA8TPklSLTzB1wr8E","node_locale":"tr","internal":{"type":"ContentfulModuleContainer"},"title":"Kurumlar","description":{"childMarkdownRemark":{"html":"<h2 class=\"mb-3\">Kurumlar</h2>\nKurumlarla ilgili tüm haberleriniz"}},"numberOfItem":0,"columns":2,"columnType":null,"columnsOnTablet":null,"centerOnTablet":null,"columnsOnMobile":1,"centerOnMobile":null,"contentAlignment":"left","splitModules":false,"displayTitle":false,"isLiquiditySection":false,"isTrustBar":false,"gridModulesGap":"16px","loadMoreMode":null,"loadMoreCta":null,"carouselMode":null,"hasRegionSelector":null,"regionSelectorHeadline":null,"regionSelectorPopupTitle":null,"regionSelectorPopupText":null,"regionListKey":null,"extraData":null,"modules":[{"contentful_id":"75mzA7RLLPzWfBjl54wLRJ","node_locale":"tr","internal":{"type":"ContentfulNewsCategory"},"name":"Kurumlar","slug":"institutions"}]}],"cta":null,"backgroundColor":"default","displayHeadline":false,"headlineAlignCenter":false,"contentAlignCenter":false,"headlineMarginTop0":null,"paddingTop":"40px","sectionPadding":null,"noPaddingTop":null,"noPaddingBottom":false,"modulesMargin":null,"isTab":true,"moduleId":null,"customClass":"newsCategoriesTab","sideImage":null,"backgroundSize":"cover","backgroundImage":null},"stories":{"nodes":[{"contentful_id":"5W8EGK64kMNORrADf1FD6j","node_locale":"tr","internal":{"type":"ContentfulNews"},"title":"5 Security Audit Tips from MSQ Snap and Consensys Diligence","slug":"5-security-audit-tips-from-msq-snap-and-consensys-diligence","subtitle":"This article results from a collaboration between Consensys Diligence and the MSQ project with support from DFinity Foundation and MetaMask Snaps DAO","image":{"title":"5 Security Audit Tips from MSQ Snap and Consensys Diligence","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/42fBnLQ56N6XUrYpBrVUHC/e7754545b4f72ae72b8df40f8c508199/5_Security_Audit_Tips.png"},"gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/42fBnLQ56N6XUrYpBrVUHC/e7754545b4f72ae72b8df40f8c508199/5_Security_Audit_Tips.png?w=480&h=270&q=80&fm=webp 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/42fBnLQ56N6XUrYpBrVUHC/e7754545b4f72ae72b8df40f8c508199/5_Security_Audit_Tips.png?w=960&h=540&q=80&fm=webp 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/42fBnLQ56N6XUrYpBrVUHC/e7754545b4f72ae72b8df40f8c508199/5_Security_Audit_Tips.png?w=1920&h=1080&q=80&fm=webp 1920w","sizes":"(min-width: 1920px) 1920px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/9sy2a0egs6zh/42fBnLQ56N6XUrYpBrVUHC/e7754545b4f72ae72b8df40f8c508199/5_Security_Audit_Tips.png?w=1920&h=1080&q=80&fm=png","srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/42fBnLQ56N6XUrYpBrVUHC/e7754545b4f72ae72b8df40f8c508199/5_Security_Audit_Tips.png?w=480&h=270&q=80&fm=png 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/42fBnLQ56N6XUrYpBrVUHC/e7754545b4f72ae72b8df40f8c508199/5_Security_Audit_Tips.png?w=960&h=540&q=80&fm=png 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/42fBnLQ56N6XUrYpBrVUHC/e7754545b4f72ae72b8df40f8c508199/5_Security_Audit_Tips.png?w=1920&h=1080&q=80&fm=png 1920w","sizes":"(min-width: 1920px) 1920px, 100vw"}},"layout":"constrained","width":1920,"height":1080}},"publishDate":"June 6, 2024","authors":[{"name":"Consensys Diligence &  MSQ team","createProfilePage":false,"profileUrl":"consensys-diligence-and-msq-team"}],"content":{"childMarkdownRemark":{"html":"<p>Consensys Diligence is an auditing branch within Consensys Software Inc., renowned for its unparalleled expertise in conducting meticulous audits across a spectrum encompassing Solidity, Cairo, and an array of ZK libraries. The Diligence team is spearheading auditing and security standards for MetaMask Snaps and works closely with the MetaMask team to ensure the security of the wallet feature. Moreover, the Diligence team pioneers the development of security tooling and cutting-edge continuous fuzzing solutions validated within the most demanding production environments.</p>\n<p>The<a href=\"https://icp.msq.tech/\"> MSQ project</a> was recently launched on<a href=\"https://snaps.metamask.io/\"> the MetaMask Snaps Store</a>. MSQ is a Snap that allows users to interact with the Internet Computer network, manage IC-based tokens, safely authorize within IC-based dapps, and pay for digital goods and services. In essence, it's a crypto wallet integrated with MetaMask, designed specifically for the Internet Computer with distinct features for authorization and payments.</p>\n<p>Together, Diligence and MSQ teams identified five key areas to cover in this article—Documentation, Software Design, Code, Supply Chain, and Fixes—providing a list of practices employed by the MSQ team during development, along with commentary from the Diligence team elaborating on the security benefits of these practices, making it a helpful resource for anyone building a Snap for the MetaMask Wallet or any other security-critical system subject to possible security audit. Let’s begin!</p>\n<h2>1. Create multi-layered documentation</h2>\n<br />\nDocumentation transforms the concepts in your head into something visible to others. Layered documentation helps the reader understand these concepts the way you intend by gradually immersing them in the context. Obviously, the cleaner the documentation, the wider perspective it can give on your project, and the better others will understand you.\n<p>We define documentation layers in reverse order of how a reader would typically access them, with each layer offering a higher level of abstraction. This way, readers starting with the big picture will progressively dive into the details.</p>\n<h3>1.1 Code</h3>\n<p>The ultimate source of information about your software is the code itself, which serves as the foundational layer of your documentation. While it contains all necessary information, it is hard to process this information. The cleaner the code, the easier it is to parse the higher-level abstractions from it. But in real systems, these abstractions are hidden behind complex interactions of the system’s components, weeks of technical debt, and quick, dirty solutions.</p>\n<p>So, first of all, you want to protect people reading your code from being misled by some complicated parts of your system. The best way to do that is to reduce the cognitive load required to read your code. Some strategies include:</p>\n<ul>\n<li>Making your code navigable, allowing for easy traversal in IDEs.</li>\n<li>Using verbose naming to clarify the purpose and functionality of code elements.</li>\n<li>Employing strongly typed languages to define clear data formats.</li>\n</ul>\n<p>The MSQ Snap and the dapp frontends are developed in TypeScript, which has prevented numerous potential errors, contrasting with the pitfalls of plain JavaScript. Similarly, our backend leverages Rust, known for its robust type system. Also, MSQ Snap exports a bunch of methods that can be executed by a third-party app. However, we don’t use strings to identify these methods, instead we use constants. We have a constant object like this:</p>\n<pre><code class=\"language-JavaScript\">export const SNAP_METHODS = {\n  protected: {\n    identity: {\n      login: \"protected_identity_login\",\n      ...\n    },\n    icrc1: {      \n\t    ...\n    },\n    ...\n  },\n  public: {\n    identity: {\n      sign: \"public_identity_sign\",\t\t\t\n      ...\n    },\n    ...\n  },\n};\n</code></pre>\n<p>In code, this constant object can be used as a guide for accessing the right method, and readers can understand a lot about this method by its identifier in the object. For example, the method <code>SNAP_METHODS.protected.identity.login</code> can only be executed by MSQ's companion dapp and allows the user to log in. This approach enhances code clarity and simplifies refactoring, as changes to method names are centrally managed rather than updated across multiple occurrences.</p>\n<p>To match method names, we use a big switch expression with branches like this:</p>\n<pre><code class=\"language-JavaScript\">case SNAP_METHODS.protected.identity.login: {\n  result = protected_handleIdentityLogin(req.params.body);\n  break;\n  }\n</code></pre>\n<p>As you can see, it is very hard to misinterpret something while reading here —everything is named precisely, leaving no room for imagination.</p>\n<p><strong>Diligence comment</strong>\n<br />\nTime is a critical factor. While developers have weeks to understand a codebase, security engineers often have just days to identify risks.\nThis constraint highlights the importance of reducing cognitive load in code—a practice that benefits both developer efficiency and security.</p>\n<p>What we can learn from MSQ's codebase is, that, clear, navigable code with descriptive naming and strong typing (like TypeScript) reduces misunderstandings, a common source of vulnerabilities.</p>\n<p>But remember, TypeScript type annotations are only checked at compile-time!\nFor any data that is processed or parsed at runtime (RPC, JSON, ...) additional type enforcements, data format and bounds checks are required!\nFor this purpose, MSQ elegantly employs zod, a TypeScript-first schema validation with static type inference library and we would recommend teams to follow that approach.</p>\n<p>MSQ hit a sweet spot by making code intentions clear through the right amount of commentary.\nThis clarity helps security researchers quickly grasp the codebase's \"red line\" and core concepts.\nBy writing code that's easy to understand, developers significantly boost the effectiveness of rapid security reviews.</p>\n<h3>1.2 Code comments</h3>\n<p>We believe commenting isn't about covering 100% of your code. It's crucial to annotate parts that are complex or poorly written. Areas like regular expressions, cryptography, and string manipulations particularly benefit from clear comments.</p>\n<p>For example, at MSQ, we have a<a href=\"https://github.com/fort-major/msq/blob/master/packages/snap/src/utils.ts#L167\"> function</a> that escapes possible<a href=\"https://en.wikipedia.org/wiki/Markdown\"> Markdown</a> control characters in a string. Its body is a single line of code, but there is regular expression matching, so we describe its functionality in a comment:</p>\n<pre><code>/**\n * Escapes Markdown control characters, newline characters, and backticks in a string.\n * This function takes a string and returns a new string with all Markdown control characters, newline characters, and backticks escaped.\n * Escaping is done by prefixing each control character and backtick with a backslash (`\\\\`), and newline characters are replaced with `\\\\\\\\n`.\n *\n * Control characters include: `{`, `}`, `[`, `]`, `(`, `)`, `#`, `!`, `|`, `\\\\`, and `` ` ``.\n * Newline characters are replaced with a visible escape sequence (`\\\\\\\\n`) for demonstration or specific formatting needs.\n * Since all newlines are escaped, list creating characters `-`, `+` and `.` are allowed.\n * Text styling characters `*`, `_` are also allowed\n *\n * @param {string} text The string to be escaped.\n * @return {string} The escaped string, safe to be used in Markdown without triggering formatting, with newline characters visually represented and backticks escaped.\n */\nexport function escapeMarkdown(text: string) {\n  return text.replace(/([{}\\\\[\\\\]()#!|\\\\\\\\`])|\\\\n/g, (match) => (match === \"\\\\n\" ? \"\\\\\\\\n\" : \"\\\\\\\\\" + match));\n}\n</code></pre>\n<p>If you don’t mind AI in your workflow,<a href=\"https://chat.openai.com/\"> ChatGPT</a> is great at generating good comments for such utility functions quickly (just double-check the output it provides).</p>\n<p><strong>Diligence comment</strong>\n<br />\nAs security reviewers we use function commentary as roadmaps through unfamiliar code.\nRemember, we only have so much time to review code, and when comments don't match the implementation, it's not just confusing — it's a red flag.</p>\n<p>They often reveal that either the function or its description deviates from the spec, signaling potential vulnerabilities.\nMaybe a function skips promised checks or handles data unexpectedly, which can lead to severe consequences.</p>\n<p>Therefore, keep your comments concise and accurate, similar to how MSQ does it in their codebase.\nInline comments are not just notes; they're beacons guiding us through your code, and misalignments are clues that something might be amiss.</p>\n<h3>1.3 System-level documentation</h3>\n<p>After ensuring your code and its complexities are well-documented, the next step is to outline the system’s architecture. This involves detailing the interactions between components, and the protocols, algorithms, and data structures your software employs. This layer primarily uses human-readable formats, such as text and diagrams, rather than code.</p>\n<p>MSQ's system documentation includes an<a href=\"https://github.com/fort-major/msq/blob/master/documentation/architecture.md\"> architecture overview</a> and an<a href=\"https://github.com/fort-major/msq/blob/master/documentation/integration.md\"> integration guide</a>. These documents, rich with textual descriptions, examples, and diagrams, clarify how different system parts interact.</p>\n<p>Sequence diagrams are invaluable for visualizing component interactions. We recommend using<a href=\"http://diagrams.net/\"> diagrams.net</a> (<a href=\"http://draw.io/\">draw.io</a>), a free tool that has proven versatile across various projects.</p>\n<p><strong>Diligence comment</strong>\n<br />\nUnlike inline comments that detail functions, system docs provide a 10,000-foot view, revealing an application's entire landscape.\nThis perspective is crucial for spotting cross-component issues or user-flow vulnerabilities that are often invisible at the code level.</p>\n<p>Think of a security review like a game of Command &#x26; Conquer.\nYou start with a mostly obscured map. As you explore, system docs act like scout units, uncovering the full architecture — permissions, Snap-dApp interactions, user interactions.\nThis unfolding overview lets reviewers trace user journeys, like tracking game unit movements, to spot paths that might bypass security.</p>\n<p>Moreover, comprehensive system docs should contain security-relevant remarks and, ideally, output from a threat modeling exercise.\nProviding a clear overview of the main components, interactions, risks, actors, and typical user flows.\nThis helps reviewers focus on high-priority areas and spot deviations from the specification.</p>\n<p>For developers, good system documentation isn't just paperwork; it's a shared map that guides offensive and defensive strategies, transforming security reviews from blind probes into strategic operations.</p>\n<h3>1.4 Big picture documentation</h3>\n<p>This layer includes a wide variety of materials, such as articles, landing pages, blog posts, demo videos, and more.</p>\n<p>This information is mostly about business stuff, but it makes a great deal of answering the question “What?” while all the previous layers were answering the “How?” question with different levels of detail.</p>\n<p>A newcomer would most likely meet your project through such a material, so keeping this layer as simple and visual as possible is a good idea. Also, this kind of material is usually the only one that shows the software in action - how a user could reach from state A to state B using your software. By seeing it in action, people introduce themself to the main idea of your software, allowing them to make guesses on how this software works under the hood.</p>\n<p>For example,<a href=\"https://icp.msq.tech/\"> MSQ’s landing page hero screen</a> says with big letters: “USE THE INTERNET COMPUTER WITH METAMASK”. After reading through this simple sentence, the reader would probably guess: “Ah, so this is a wallet Snap that can store tokens from the Internet Computer blockchain. So it probably works the same way as other Snaps for other blockchains, just using technologies from the IC’s dev ecosystem,” - which is a 100% correct guess.</p>\n<p><strong>Diligence comment</strong>\n<br />\nOur experience with MSQ and numerous other blockchain projects has consistently shown that clear, high-level documentation is not just beneficial — it's critical for both user adoption and security.\nDuring our review of MSQ's Snap, we were positively surprised by their multi-layered documentation approach. A video walkthrough from their developer quickly got us up to speed.\nWe would quickly understand Snap's features even before looking at the code itself. This high-level overview showcased the user interface, complete with commentary on expected behaviors and typical user flows.\nSuch visual aids are invaluable, allowing security experts to grasp the intended \"happy paths\" encoded into the application much faster and look for vulnerabilities that are often hidden off these paths.\nThis, combined with a live walkthrough of the snap and code, is typically the ideal start for a security review.</p>\n<h2>2 Restrict design where possible</h2>\n<br />\nThis part is probably the most important for the security of your project. Your code can be 100% safe from bugs, and your infrastructure can be protected with millions of dollars worth of various measures. But all of those efforts would mean nothing if your design contains some fundamental flaw that can be exploited by malicious actors.\n<p>While specific examples vary by use case, we offer several universal tips.</p>\n<h3>2.1 Develop security guidelines and follow them</h3>\n<p>At the outset of MSQ, we established core security principles that align with our vision:</p>\n<ul>\n<li><strong>MSQ team knows nothing</strong>: We do not collect any user-sensitive information, including key materials, authorization session data, or account details.</li>\n<li><strong>Cryptographic material never leaves the Snap</strong>: Protected user MetaMask entropy is processed exclusively within the Snap, generated on demand, and discarded immediately after use.</li>\n<li><strong>MSQ is deterministic</strong>: Users can recover all funds, identities, and key pairs deterministically using their root seed phrase without needing additional knowledge.</li>\n<li><strong>MSQ is privacy-first</strong>: Our efforts prioritize user privacy above all else.</li>\n</ul>\n<p>These principles are tailored to MSQ's specific needs. However, the MetaMask team also provides a set of security guidelines for Snap developers, which MSQ adheres to, available<a href=\"https://www.notion.so/5-Security-Audit-Tips-from-MSQ-Snap-and-Consensys-Diligence-902c0b34a69848bf8c884e2c315f7d4a?pvs=21\"> here</a>.</p>\n<p>For example, there is a <strong>Minimum permissions</strong> principle, which basically means that the fewer permissions your Snap asks from a user, the better its security. MSQ only asks 4 permissions:</p>\n<ul>\n<li>endowment:rpc</li>\n<li>snap_dialog</li>\n<li>snap_manageState</li>\n<li>snap_getEntropy</li>\n</ul>\n<p>We don’t need <code>endowment: network access</code> because MSQ is only responsible for signing transactions, not for delivering them to the IC—the integrating dapp is responsible for the latter.</p>\n<p>You should do the same thing in your Snap - take the default guideline from MetaMask, extend it with your specific rules, and follow them.</p>\n<p><strong>Diligence comment</strong>\n<br />\nWe tell our clients, \"Security isn't a feature you add; it's a principle you design around.\"\nMSQ's establishment of core security principles at the project's outset is what we look for.\nToo often, projects treat security as an afterthought, bolting on measures after the core architecture is set.\nThis retrofit approach inevitably leaves fundamental flaws that code-level fixes can't truly resolve.</p>\n<p>At ConsenSys Diligence, we provide security expert services, tooling, and we advocate for end users' rights.\nThis includes ensuring users' key material stays safe within wallet trust boundaries, never unintentionally exposed outside this zone.\nWe also focus on preserving user privacy, ideally preventing even metadata or side-channel information leaks to third parties.\nAdditionally, we push for snaps to request only the minimum permissions needed for functionality - the principle of least privilege.</p>\n<p>MSQ's proactive stance aligns with these principles.\nBy prioritizing security from the start, they're building a stronger foundation — one that's inherently more resistant to vulnerabilities.</p>\n<h3>2.2 Protect the user at all costs</h3>\n<p>This is more like a meta-guideline - it is a principle that should be implemented in any software: from online games to banking systems.</p>\n<p>The most notable example of this in MSQ is our approach to identity management. As you might know, the majority of wallets out there supply the user with a set of identities (addresses, accounts, etc.). This set can be accessed by any dapp, with the user's consent. For example, to sign some transactions.</p>\n<p>This is very useful for integrations between dapps, because any dapp can invoke smart-contract methods of other dapps on behalf of the user and extend each other’s capabilities this way. For example, a crypto payment platform can call Uniswap’s smart-contracts to automatically swap buyer’s tokens so they match what the seller’s expecting to receive as a payment for a particular good or service.</p>\n<p>But this is harmful for security, since scam websites can trick people into signing malicious transactions and empty their wallets.</p>\n<p>In contrast to that, MSQ adopts <code>identity scoping technique</code> - each dapp (each distinct url origin) has its own separate set of user identities it can interact with, with no ability to interact with user's identities from other dapps. This not only solves the scam websites issue, but also greatly helps with the privacy, because dapps can no longer track the user and see what smart-contracts (which are called canisters in the IC) does they interact with. This method, inspired by<a href=\"https://identity.ic0.app/\"> Internet Identity</a> and the<a href=\"https://webauthn.io/\"> WebAuthn specification</a>, significantly mitigates security risks.</p>\n<p>For example, if a well-known dapp is compromised, traditional wallets would be vulnerable across all dapps. In contrast, MSQ’s identity scoping confines the threat to the compromised dapp, preventing broader damage.</p>\n<p>However, this method limits direct integration between dapps, as users have distinct identities on each. MSQ offers solutions for specific scenarios, like allowing identity sharing between dapps with dual consents, useful for situations like domain name changes.</p>\n<p>Additionally, MSQ ensures that the data a dapp can access is strictly tied to the relevant identity, further securing user information and maintaining privacy across different applications.</p>\n<p><strong>Diligence comment</strong>\n<br />\nThe trade-off of limited direct dApp integration is a thoughtful one.\nIn our risk assessments, we often discuss the \"security budget\"—acknowledging that perfect security can hamper functionality.\nMSQ has spent this budget wisely.\nBy constraining cross-dApp interactions, they've drastically reduced one of the most severe risks (widespread identity abuse) while preserving core wallet functions.</p>\n<h2>3 Write sound code</h2>\n<br />\nWe already talked about the code a little, when we discussed the documentation. Here we want to emphasize on a couple of other aspects of code, which are more related to technique other than to readability.\n<h3>3.1 Your code</h3>\n<p>\"Sound\" here means the code behaves predictably, covering all expected and unexpected inputs. For instance, how should your Snap react if given a <code>base64</code> string when it expects <code>hex</code>? Or if methods are called in an unintended sequence, or an undefined RPC method is invoked?</p>\n<p>Addressing these uncertainties requires:</p>\n<ol>\n<li><strong>Clear error handling:</strong> Ensure every branch and case in your code is checked and handled appropriately. In MSQ’s Snap, we use TypeScript's exhaustive checks in switch-case statements to catch any unexpected method calls, as shown below:</li>\n</ol>\n<pre><code class=\"language-JavaScript\">default: {\n  err(ErrorCode.INVALID_RPC_METHOD, request.method);\n}\n</code></pre>\n<p>This setup captures cases where an unknown RPC method identifier is used.</p>\n<ol start=\"2\">\n<li><strong>Input sanitation:</strong> Validating input data against expected types and formats can be complex but is essential for security. We utilize the<a href=\"https://github.com/colinhacks/zod\"> zod</a> library in TypeScript for this, extending TypeScript’s type system to runtime checks. Zod allows detailed schema definitions, ensuring only valid data is processed.</li>\n</ol>\n<p>For example, our method <code>SNAP_METHODS.protected.identity.login</code> uses a zod schema to validate input rigorously:</p>\n<pre><code class=\"language-JavaScript\">export const ZIdentityLoginRequest = z.object({\n  toOrigin: ZOrigin,\n  withIdentityId: ZIdentityId,\n  withLinkedOrigin: z.optional(ZOrigin),\n});\n\nexport const ZOrigin = z.string().url();\nexport const ZIdentityId = z.number().int().nonnegative();\n</code></pre>\n<p>Here, <code>ZOrigin</code> and <code>ZIdentityId</code> are not mere strings or numbers but specifically validated subtypes, ensuring inputs are not just correct in type but also contextually appropriate.</p>\n<p>By defining zod schemas as precisely as possible, you can preemptively solve many potential issues. Auditors recommended enforcing strict validation in MSQ, which, upon implementation, identified and rectified several security risks.</p>\n<p><strong>Diligence comment</strong>\n<br />\nThis is not the first time we hear from our clients that implementing stricter validation based on our recommendations for a particular attack scenario revealed several other security risks.\nThis mirrors our experience precisely and that's why we always advocate for strict input validation to reduce attack surface.\nIn many security reviews, we start by scrutinizing input validation. Tightening this often exposes lurking issues — a domino effect where fixing one vulnerability reveals another.\nIt's a clear signal that the project takes our feedback seriously, iteratively hardening their system.\nWith reduced attack surface it gets incrementally harder for attackers to successfully exploit weaknesses.</p>\n<h3>3.2 Third-party code</h3>\n<p>At MSQ, we consider it our duty to provide dapp developers with an intuitive library, facilitating correct and efficient interaction with our Snap. This enables not only MSQ but also third-party developers to maintain clean and sound codebases.</p>\n<p>Such a library is beneficial for several reasons:</p>\n<ul>\n<li><strong>Simplifies API complexity:</strong> We abstract the Snap's complexities into a user-friendly API. For instance, MSQ’s client library uses <code>CBOR</code> for data encoding, bypassing the constraints of JSON-RPC and sparing developers the hassle of manual data encoding and decoding.</li>\n<li><strong>Ensures secure and direct interactions:</strong> Certain Snap functionalities are exclusive to our companion dapp. To facilitate this, we manage the redirection and data transfer processes, ensuring a seamless flow via <code>postMessage</code>. This internal handling guarantees that third-party developers interact with our Snap through a clear, straightforward API.</li>\n<li><strong>Enhances semantic clarity:</strong> A clean API is more than just a tool; it’s a communication medium, making the code more readable and understandable, free from the clutter of intricate encoding/decoding processes and additional operational layers.</li>\n</ul>\n<p>By prioritizing these aspects, MSQ aims to create an ecosystem where both our Snap and the integrating dapps can operate efficiently and securely.</p>\n<p><strong>Diligence comment</strong>\n<br />\nMSQ’s approach to third-party code integration through their library demonstrates a commitment to simplifying development while maintaining security.\nWhile at its core, security must be strictly enforced in the Snap context, a dapp facing library can provide a convenient way for communicating with the Snap.\nHowever, it should always be noted that the dapp developer needs to ensure secure interaction with the Snap and safe encoding of data when used within the dapp's context.</p>\n<h2>4 Protect your supply chain</h2>\n<br />\n<p><a href=\"https://www.wired.com/story/xz-backdoor-everything-you-need-to-know\">Recent XZ backdoor</a> another time emphasized how important it is to work against malicious code getting inside some of your dependencies. At MSQ we use<a href=\"https://pnpm.io\"> pnpm</a> to manage dependencies, but there is actually no difference in what package manager you prefer. There are two things we do at MSQ to protect against such attack vectors:</p>\n<h3>4.1 Bind packages to specific versions</h3>\n<p>Using <code>pnpm install --save &#x26;lt;package-name></code> typically installs the latest version of a package, adhering to the<a href=\"https://github.com/semver/semver\"> semver spec</a>, which allows auto-updates to non-breaking newer versions. This is denoted by the caret (<code>^</code>) symbol in <code>package.json</code>, signifying a range of acceptable versions:</p>\n<pre><code class=\"language-JavaScript\">\"zod\": \"^3.22.4\" // Installs version 3.22.4 or newer up to 4.0.0\n</code></pre>\n<p>However, to prevent risks from malicious updates, it's safer to lock dependencies to specific versions:</p>\n<ol>\n<li>Eliminate the caret (<code>^</code>) from your <code>package.json</code> to fix each dependency version. Remove any existing lock files and <code>node_modules</code>, then execute <code>pnpm install</code> to align with the defined versions strictly.</li>\n<li>Use the <code>--save-exact</code> flag for future installations (<code>pnpm install --save-exact &#x26;lt;package-name></code>) to avoid automatic updates.</li>\n</ol>\n<p>Trust is a factor in this decision. For example, at MSQ we consider <code>@metamask</code> and <code>@dfinity</code> dependency namespaces safe and allow updates within their semver range. However, while doing so, be cautious of potential vulnerabilities from transitive dependencies.</p>\n<p><strong>Diligence comment</strong>\n<br />\nShifting projects to exact dependency versions has prevented countless issues:</p>\n<ul>\n<li>It's stopped silent updates from reintroducing patched vulnerabilities.</li>\n<li>It's prevented \"version skew\" where different modules see different library behaviors.</li>\n<li>It's been crucial in post-incident investigations, allowing us to replicate the exact environment.</li>\n</ul>\n<p>Every next update can be malicious, in any namespace, any package.\nBy reviewing used packages and only binding to known safe versions preventing accidental update the attack surface for supply chain attacks is further reduced.\nTrusting certain vendors is okay, as long as the new versions are manually verified not to contain malicious code before use.\nNote, that, especially well known packages used by many projects are prime targets for malicious actors and as the past as shown, any such core library might fall to sophisticated supply chain attacks (see <a href=\"https://www.wired.com/story/xz-backdoor-everything-you-need-to-know/\">XZ backdoor attack</a>)</p>\n<h3>4.2 Commit lock files to your repository</h3>\n<br />\nTo ensure consistency across your team and maintain reproducible builds, commit your lockfiles to the version control system. In MSQ, we leverage `pnpm workspaces` and `turborepo`, necessitating a single root lockfile, `pnpm-lock.yaml`. However, your setup might require maintaining multiple lockfiles; all should be version-controlled to guarantee environment consistency.\n<p><strong>Diligence comment</strong>\n<br />\nThis practice, while sometimes overlooked as a mere development convenience, is in fact a critical component of maintaining a secure and stable codebase.\nOur years of auditing smart contracts, blockchain components, and now MetaMask Snaps have repeatedly shown that reproducible builds are not just a nice-to-have but a fundamental security requirement.\nCommitting lockfiles is one puzzle piece to reduce attack surface for supply chain attacks. When <code>npm install</code> is not a lottery anymore, concrete versions and checksums leave an audit trail in the repository, builds are more deterministic, and \"Works on my Machine\" discussions are no more.</p>\n<h2>5 Fix fast and clean</h2>\n<br />\nWhile this isn’t directly about our Snap, understanding how to address audit findings efficiently is vital.\n<p>As soon as the auditors team reports a finding, you should start working on a fix. The fix size and complexity clearly depends on the finding, but there is an advice to make it smaller and cleaner - fix the cause, not the symptom, where possible.</p>\n<p>For instance, at MSQ, the auditors discovered that it is possible to inject Markdown control characters in our MetaMask consent messages. Instead of fixing each separate consent message, making multiple changes in different parts of the code, we simply redefined <code>text()</code> and <code>heading()</code> elements (from <code>@metamask/snaps-sdk</code>), so they first pass their content through the <code>escapeMarkdown()</code> function and only then render it. This allowed us to simply replace <code>import</code> expressions in all files with consent messages with our custom elements, instead of fixing each invocation of <code>text()</code> and <code>heading()</code> separately, which was a much cleaner fix.</p>\n<p>Effective resolution not only improves the specific issue but also preemptively secures against unseen vulnerabilities.</p>\n<p><strong>Diligence comment</strong>\n<br />\nToo often, we see projects take a whack-a-mole approach to security, patching each individual issue as it appears without considering the underlying vulnerability class.\nBy addressing the root cause of issues and not holding back from extinguishing vulnerability classes globally, shows that MSQ understands security not as a series of patches but as a holistic discipline.\nAs security experts, we can only recommend our clients to not rush fixes and take enough time for turning a security finding into an event that has a positive effect on the security of the project.</p>\n<h2>Conclusion</h2>\n<br />\nThat concludes our insights into successfully navigating a MetaMask Snaps security audit. Following these guidelines helped the MSQ team receive a positive report from the Diligence team. We hope sharing the MSQ experience will assist you in your security audit preparations, ensuring a thorough and effective process.\n<p>Consensys Diligence has helped a wide range of projects across the blockchain ecosystem ensure their protocols are ready for launch and built to protect users. We’re happy to check your Snap for these and more vulnerabilities in a custom audit. <a href=\"https://consensys.io/diligence/contact\">Hit us up and get a quote!</a></p>"}},"categories":[{"contentful_id":"Jc9ZQ937JgPbuV2Xap2l7","node_locale":"tr","internal":{"type":"ContentfulNewsCategory"},"name":"Geliştiriciler","slug":"developers"}],"metaTitle":"5 Security Audit Tips from MSQ Snap and Consensys Diligence","metaDescription":"This article results from a collaboration between Consensys Diligence and the MSQ project with support from DFinity Foundation and MetaMask Snaps DAO","canonicalUrl":null,"isPrivate":false},{"contentful_id":"38Du6go9TF8uL2V07Es34M","node_locale":"tr","internal":{"type":"ContentfulNews"},"title":"Hardhat vs Foundry: Choosing the Right Ethereum Development Tool","slug":"hardhat-vs-foundry-choosing-the-right-ethereum-development-tool","subtitle":"Here are some of the things to consider when choosing between Hardhat and Foundry.","image":{"title":"Hardhat vs Foundry","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/2bco4tVpUHfsK5MMMs6OzN/4e00e8f1421f7c3a6798ee0c889660da/Hardhat_vs_Foundry_-_Choosing_the_Right_Ethereum_Development_Tool.png"},"gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/2bco4tVpUHfsK5MMMs6OzN/4e00e8f1421f7c3a6798ee0c889660da/Hardhat_vs_Foundry_-_Choosing_the_Right_Ethereum_Development_Tool.png?w=480&h=270&q=80&fm=webp 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2bco4tVpUHfsK5MMMs6OzN/4e00e8f1421f7c3a6798ee0c889660da/Hardhat_vs_Foundry_-_Choosing_the_Right_Ethereum_Development_Tool.png?w=960&h=540&q=80&fm=webp 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2bco4tVpUHfsK5MMMs6OzN/4e00e8f1421f7c3a6798ee0c889660da/Hardhat_vs_Foundry_-_Choosing_the_Right_Ethereum_Development_Tool.png?w=1920&h=1080&q=80&fm=webp 1920w","sizes":"(min-width: 1920px) 1920px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/9sy2a0egs6zh/2bco4tVpUHfsK5MMMs6OzN/4e00e8f1421f7c3a6798ee0c889660da/Hardhat_vs_Foundry_-_Choosing_the_Right_Ethereum_Development_Tool.png?w=1920&h=1080&q=80&fm=png","srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/2bco4tVpUHfsK5MMMs6OzN/4e00e8f1421f7c3a6798ee0c889660da/Hardhat_vs_Foundry_-_Choosing_the_Right_Ethereum_Development_Tool.png?w=480&h=270&q=80&fm=png 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2bco4tVpUHfsK5MMMs6OzN/4e00e8f1421f7c3a6798ee0c889660da/Hardhat_vs_Foundry_-_Choosing_the_Right_Ethereum_Development_Tool.png?w=960&h=540&q=80&fm=png 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2bco4tVpUHfsK5MMMs6OzN/4e00e8f1421f7c3a6798ee0c889660da/Hardhat_vs_Foundry_-_Choosing_the_Right_Ethereum_Development_Tool.png?w=1920&h=1080&q=80&fm=png 1920w","sizes":"(min-width: 1920px) 1920px, 100vw"}},"layout":"constrained","width":1920,"height":1080}},"publishDate":"May 30, 2024","authors":[{"name":"Sushmita Rashid","createProfilePage":null,"profileUrl":null}],"content":{"childMarkdownRemark":{"html":"<p>Choosing the right tools for your dapp development does not only affect productivity but also impacts the effectiveness of testing, deployment, and maintenance of smart contracts. In this blog, we compare two popular choice amongst Ethereum dapp developers: Foundry and Hardhat, focusing on their installation requirements, testing and deployment workflows, and specific technical aspects and limitations.</p>\n<h2>About Hardhat</h2>\n<br/>\n<p><a href=\"https://hardhat.org/\">Hardhat</a> is a well-established development environment designed to help developers manage and automate tasks involved in smart contract development. It is known for its flexible and adaptable nature. Hardhat features the Hardhat Network, a local Ethereum network designed for development which also allows for easy testing, deployment, and debugging.</p>\n<p>Developers can interact directly with smart contracts deployed on the Hardhat Network via an interactive console, providing a comprehensive local environment tailored for development tasks. Hardhat also supports a robust plugin ecosystem, allowing developers to extend its capabilities easily. However, some users might find the initial setup and configuration of Hardhat to be complex.</p>\n<h2>About Foundry</h2>\n<br/>\n<p>On the other hand, <a href=\"https://github.com/foundry-rs/foundry\">Foundry</a> is a relatively new development toolkit that emphasizes speed and reliability. It is built on Forge, a powerful testing framework that enables developers to write, compile, and test smart contracts efficiently. One of the key features of Foundry is its fast testing capabilities as the Forge testing framework dramatically speeds up test execution times, allowing developers to iterate more quickly.</p>\n<p>Additionally, Foundry includes native debugging tools that help developers diagnose and fix issues directly within the environment. Foundry also integrates seamlessly with other tools in the Ethereum ecosystem, facilitating a more streamlined development process. However, being relatively new, Foundry might lack the extensive community support available to more established tools.</p>\n<h2>Technical comparison of Hardhat and Foundry</h2>\n<br/>\n<p>For this section, we’ll use a basic random sum smart contract. This smart contract will remain the same for Hardhat and Foundry, however, the project setup will differ slightly between the two frameworks.</p>\n<pre><code class=\"language-JavaScript\">// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract RandomSum {\n    // Function to generate a pseudo-random number based on input\n    function random(uint seed) private view returns (uint) {\n        return uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, seed))) % 100;\n    }\n\n    // Function to generate two random numbers and return their sum\n    function generateSum() public view returns (uint sum) {\n        uint num1 = random(1);\n        uint num2 = random(2);\n        sum = num1 + num2;\n    }\n}\n</code></pre>\n<h2>Installation:</h2>\n<h3>Hardhat:</h3>\n<br/>\n<p>To begin using Hardhat, you need to have Node.js installed on your machine. Once that’s set up, you can create a new Hardhat project by following these steps:</p>\n<ol>\n<li>Initialize a new Node.js project:</li>\n</ol>\n<pre><code class=\"language-bash\">mkdir randomsum\ncd randomsum\nnpm init -y\n</code></pre>\n<ol start=\"2\">\n<li>Install Hardhat:</li>\n</ol>\n<pre><code class=\"language-bash\">npm install --save-dev hardhat\n</code></pre>\n<ol start=\"3\">\n<li>Create a Hardhat project:</li>\n</ol>\n<pre><code class=\"language-bash\">npx hardhat\n</code></pre>\n<ol start=\"4\">\n<li>Follow the prompts to create a basic project. Select \"Create an empty hardhat.config.js\" for a bare setup. Choose to create a sample project. This sets up a Hardhat environment with all necessary configurations.</li>\n</ol>\n<p>Contract: Place your RandomSum contract in the contracts folder.</p>\n<h3>Foundry</h3>\n<br/>\n<p>Foundry uses Rust, so you’ll need Rust installed on your system. With Rust ready, you can install Foundry by running:</p>\n<ol>\n<li>Install Foundry:</li>\n</ol>\n<pre><code class=\"language-bash\">curl -L &#x3C;https://foundry.paradigm.xyz> | bash\nfoundryup\n</code></pre>\n<ol start=\"2\">\n<li>Initialize a new Foundry project:</li>\n</ol>\n<pre><code class=\"language-bash\">forge init randomsum-foundry\ncd randomsum-foundry\n</code></pre>\n<p>Contract: Place your RandomSum contract in the src directory.</p>\n<h2>Local blockchain deployment</h2>\n<h3>Hardhat</h3>\n<br/>\n<ul>\n<li>\n<p>Local blockchain: Use Hardhat Network, which runs automatically when you perform tasks like testing or deploying contracts.</p>\n</li>\n<li>\n<p>Deployment script: Create a script under scripts/deploy.js:</p>\n</li>\n</ul>\n<pre><code class=\"language-JavaScript\">async function main() {\n    const RandomSum = await ethers.getContractFactory(\"RandomSum\");\n    const randomSum = await RandomSum.deploy();\n    await randomSum.deployed();\n    console.log(\"RandomSum deployed successfully:\");\n}\n\nmain().catch((error) => {\n    console.error(error);\n    process.exit(1);\n});\n\n</code></pre>\n<ul>\n<li>Run deployment: Execute the deployment using:</li>\n</ul>\n<pre><code class=\"language-bash\">npx hardhat run scripts/deploy.js --network localhost\n</code></pre>\n<h3>Foundry</h3>\n<br/>\n<ul>\n<li>Local blockchain: Foundry uses anvil, a local Ethereum node. Run this in a separate terminal to start your local node.</li>\n</ul>\n<pre><code class=\"language-bash\">anvil\n</code></pre>\n<ul>\n<li>Deployment script: Use the forge create command directly:</li>\n</ul>\n<pre><code class=\"language-bash\">forge create RandomSum --private-key YOUR_PRIVATE_KEY --rpc-url &#x3C;http://localhost:8545>\n</code></pre>\n<h2>Live testnet deployment</h2>\n<h3>Hardhat</h3>\n<br/>\n<ul>\n<li>Network configuration: Configure the desired network in hardhat.config.js, adding a section for the network settings (e.g., Sepolia).</li>\n</ul>\n<pre><code>module.exports = {\n  solidity: \"0.8.0\",\n  networks: {\n    sepolia: {\n      url: \"https://linea-sepolia.infura.io/v3/YOUR_INFURA_KEY\",\n      accounts: [`0x${process.env.PRIVATE_KEY}`]\n    }\n  }\n};\n</code></pre>\n<ul>\n<li>Deployment: Run the same deployment script with the network option changed to Sepolia.</li>\n</ul>\n<h3>Foundry</h3>\n<br/>\n<ul>\n<li>\n<p>Network configuration: No additional configuration file is needed; specify the network in the command.</p>\n</li>\n<li>\n<p>Deployment: use:</p>\n</li>\n</ul>\n<pre><code class=\"language-bash\">forge create RandomSum --private-key YOUR_PRIVATE_KEY --rpc-url &#x3C;https://linea-sepolia.infura.io/v3/YOUR_INFURA_KEY>\n</code></pre>\n<h2>Smart Contract Testing</h2>\n<h3>Hardhat</h3>\n<br/>\n<ul>\n<li>Write tests: Create a test file in test/randomSum.js using JavaScript:</li>\n</ul>\n<pre><code class=\"language-JavaScript\">const { expect } = require(\"chai\");\n\ndescribe(\"RandomSum\", function() {\n  it(\"Should return the sum of two random numbers\", async function() {\n    const RandomSum = await ethers.getContractFactory(\"RandomSum\");\n    const randomSum = await RandomSum.deploy();\n    await randomSum.deployed();\n\n    const sum = await randomSum.generateSum();\n    expect(sum).to.be.a('number');\n  });\n});\n</code></pre>\n<ul>\n<li>Run tests: Execute using:</li>\n</ul>\n<pre><code class=\"language-bash\">npx hardhat test\n</code></pre>\n<p>If you face problems with testing, simply add The <code>loadFixture</code> function from <code>@nomicfoundation/hardhat-toolbox/network-helpers</code>.</p>\n<p>The key benefits of using <code>loadFixture</code> are:</p>\n<ul>\n<li>It sets up a clean environment for each test by reverting to a snapshot.</li>\n<li>It's more efficient than redeploying contracts for each test.</li>\n<li>It allows you to share setup code across multiple tests.</li>\n</ul>\n<h3>Foundry</h3>\n<br/>\n<ul>\n<li>Write tests: Add a test file in test/RandomSum.t.sol using Solidity:</li>\n</ul>\n<pre><code class=\"language-JavaScript\">// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"ds-test/test.sol\";\nimport \"../src/RandomSum.sol\";\n\ncontract RandomSumTest is DSTest {\n  RandomSum randomSum;\n\n  function setUp() public {\n    randomSum = new RandomSum();\n  }\n\n  function testGenerateSum() public {\n    uint sum = randomSum.generateSum();\n    assertTrue(sum >= 0 &#x26;&#x26; sum &#x3C;= 198); // since each random number is &#x3C;100\n  }\n}\n</code></pre>\n<ul>\n<li>Run tests: Use:</li>\n</ul>\n<pre><code class=\"language-bash\">forge test\n</code></pre>\n<h2>Conclusion</h2>\n<br/>\n<p>Choosing between Hardhat and Foundry often comes down to the team's skill set and the specific needs of the project. If the team is proficient in JavaScript and requires extensive integration with web technologies, Hardhat could be the better choice. Its robust plugin ecosystem and flexible environment makes it ideal for projects that demand a high degree of customization and interaction with various web technologies.</p>\n<p>On the other hand, if the project demands rapid development cycles with a focus purely on smart contracts, Foundry offers an appealing and efficient option that keeps everything within the Solidity ecosystem. Its speed and native support for Solidity can significantly enhance productivity for teams dedicated to smart contract development.</p>\n<p>Ultimately, both tools have their strengths, and the right choice depends on your project's unique requirements and your team's expertise.</p>"}},"categories":[{"contentful_id":"Jc9ZQ937JgPbuV2Xap2l7","node_locale":"tr","internal":{"type":"ContentfulNewsCategory"},"name":"Geliştiriciler","slug":"developers"}],"metaTitle":"Hardhat vs Foundry","metaDescription":"Here are some of the things to consider when choosing between Hardhat and Foundry.","canonicalUrl":null,"isPrivate":false},{"contentful_id":"3WrdD1MkXJ6BbADnxZkbzb","node_locale":"tr","internal":{"type":"ContentfulNews"},"title":"How to Choose the Right Ethereum API RPC Provider","slug":"how-to-choose-the-right-ethereum-api-rpc-provider","subtitle":"Key factors to consider when choosing the right Ethereum API RPC provider","image":{"title":"How to choose the right RPC provider","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/58ZcDfAOczda91KhcRxQSi/19bd3daf28ef3334fbbc777199212103/How_to_Choose_the_Right_Ethereum_API_RPC_Provider.png"},"gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/58ZcDfAOczda91KhcRxQSi/19bd3daf28ef3334fbbc777199212103/How_to_Choose_the_Right_Ethereum_API_RPC_Provider.png?w=480&h=270&q=80&fm=webp 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/58ZcDfAOczda91KhcRxQSi/19bd3daf28ef3334fbbc777199212103/How_to_Choose_the_Right_Ethereum_API_RPC_Provider.png?w=960&h=540&q=80&fm=webp 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/58ZcDfAOczda91KhcRxQSi/19bd3daf28ef3334fbbc777199212103/How_to_Choose_the_Right_Ethereum_API_RPC_Provider.png?w=1920&h=1080&q=80&fm=webp 1920w","sizes":"(min-width: 1920px) 1920px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/9sy2a0egs6zh/58ZcDfAOczda91KhcRxQSi/19bd3daf28ef3334fbbc777199212103/How_to_Choose_the_Right_Ethereum_API_RPC_Provider.png?w=1920&h=1080&q=80&fm=png","srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/58ZcDfAOczda91KhcRxQSi/19bd3daf28ef3334fbbc777199212103/How_to_Choose_the_Right_Ethereum_API_RPC_Provider.png?w=480&h=270&q=80&fm=png 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/58ZcDfAOczda91KhcRxQSi/19bd3daf28ef3334fbbc777199212103/How_to_Choose_the_Right_Ethereum_API_RPC_Provider.png?w=960&h=540&q=80&fm=png 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/58ZcDfAOczda91KhcRxQSi/19bd3daf28ef3334fbbc777199212103/How_to_Choose_the_Right_Ethereum_API_RPC_Provider.png?w=1920&h=1080&q=80&fm=png 1920w","sizes":"(min-width: 1920px) 1920px, 100vw"}},"layout":"constrained","width":1920,"height":1080}},"publishDate":"May 28, 2024","authors":[{"name":"Kingsley Okonkwo","createProfilePage":true,"profileUrl":"kingsley-okonkwo"}],"content":{"childMarkdownRemark":{"html":"<p>Selecting the right Ethereum API RPC provider is critical for web3 developers and businesses looking to interact seamlessly with the Ethereum blockchain. Unlike in the early days of Ethereum, when one could run a node on any computer, technical requirements have changed and running a node to support your  dapp requires a lot of resources.</p>\n<p>Node providers like Infura solve this problem by running and managing blockchain nodes while providing end-users access over an API endpoint, often utilizing blockchain RPC technology. RPC providers act as a bridge between dapps and the blockchain, allowing developers to interact with the blockchain without the need to run a node themselves. Most of the industry players, including prominent ones, trust and leverage the services of node providers to power their applications.</p>\n<p>Here are some of the key factors to consider when choosing an RPC provider for your web3 dapp.</p>\n<h2>Key factors to consider</h2>\n<br />\n<p><strong>1. Reliability and uptime</strong></p>\n<p>A provider with high reliability and uptime ensures that your application is available and functional for users at all times, helping you provide the best user experience possible. A commonly used benchmark for measuring uptime is the percentage of time that a system is operational, often measured using the number of nines (9s) from 99% — 99.9999%. <a href=\"https://www.infura.io/platform/infrastructure\">Infura</a> meets this requirement by supporting top blockchain projects with 99.9% reliability.</p>\n<p><strong>2. Scalability</strong></p>\n<p>The ability to handle high volumes of traffic and deliver swift response times is important in the growth of your dapp. You want to consider a provider that can ensure optimal performance and user experience regardless of where your users are based. Infura’s Decentralized Infrastructure Network (DIN) ensures scalability through it’s various partners located all over the world. More on that <a href=\"https://www.infura.io/solutions/decentralized-infrastructure-service\">here</a>.</p>\n<p><strong>3. Security</strong></p>\n<p>The importance of security and privacy measures cannot be overstated, as these directly impact the safety and protection of sensitive data and users’ trust in your application. Infura uses private API keys to grant developers greater control over the security of their dapps. With unique identifiers associated with a specific user or application, these keys can be used to authenticate or restrict API requests from specific users or applications. Additionally, to ensure the security of the DIN network, Infura screens partners to ensure they meet the expected standards of service for privacy and security.</p>\n<p><strong>4. Cost</strong></p>\n<p>The cost of using an RPC provider can vary significantly. Compare the pricing models of different providers and select one that offers the best value for your budget and requirements. Also consider the amount of usage your applications will require and whether the pricing structure is scalable to accommodate future growth. Check out the <a href=\"https://www.infura.io/pricing\">Infura's pricing page</a> for more information on how Infura is priced.</p>\n<p><strong>5. Chain compatibility</strong></p>\n<p>A provider that supports multiple blockchain networks can greatly improve your developer experience by ensuring the seamless integration of dapps across different chains and ecosystems. Through DIN, Infura is able to support a wide range of networks and their testnets, ensuring reduced complexity with managing multiple blockchain integrations.</p>\n<p><strong>6. Support and documentation</strong></p>\n<p>As you scale up your project, you may start to face challenges that require a high level of expertise and experience to overcome. This is where support will be invaluable in navigating complexities and ensuring your project’s success. The availability and quality of developer resources and documentation also play a part in enhancing your development experience and speeding up the time it takes to integrate with your application.</p>\n<h2>Next steps for web3 developers</h2>\n<br />\n<p>Choosing the right Ethereum API RPC provider is a crucial decision that can greatly influence the success of your project. The right provider ensures that your dapps runs reliably, scales effectively, and maintains high levels of security and privacy.</p>\n<p>Infura stands out in this field with its proven reliability, scalability through DIN, robust security measures, competitive pricing, and extensive support for multiple blockchain networks. Developers looking for a dependable and comprehensive solution should consider <a href=\"https://app.infura.io/login\">signing up with Infura</a> to explore the plans available to them. For more detailed information and to get started, check out the Infura <a href=\"https://docs.infura.io/api?_ga=2.177552805.1412996031.1716893244-1828798838.1656534928\">documentation</a>.</p>"}},"categories":[{"contentful_id":"Jc9ZQ937JgPbuV2Xap2l7","node_locale":"tr","internal":{"type":"ContentfulNewsCategory"},"name":"Geliştiriciler","slug":"developers"}],"metaTitle":"How to Choose the Right Ethereum API RPC Provider","metaDescription":"Key factors to consider when choosing the right Ethereum API RPC provider","canonicalUrl":null,"isPrivate":false},{"contentful_id":"24oYOK4nKf3natc2yzUuzh","node_locale":"tr","internal":{"type":"ContentfulNews"},"title":"Ethereum Token Development for Beginner Web3 Developers","slug":"ethereum-token-development-for-beginner-web3-developers","subtitle":"This blog offers a simple, step-by-step guide for beginners in web3 development on how to develop and deploy an ERC-20 token on the Ethereum blockchain using OpenZeppelin, Hardhat, Infura, and MetaMask, including deployment to the Linea testnet","image":{"title":"Ethereum Token Development for Beginner Web3 Developers","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/IA7kWVMlmlCR8XwvDwvTv/4d5e8ee73deb8ae4e3f3cfbd9e08562e/Ethereum_token_Development_for_Beginners.png"},"gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/IA7kWVMlmlCR8XwvDwvTv/4d5e8ee73deb8ae4e3f3cfbd9e08562e/Ethereum_token_Development_for_Beginners.png?w=480&h=270&q=80&fm=webp 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/IA7kWVMlmlCR8XwvDwvTv/4d5e8ee73deb8ae4e3f3cfbd9e08562e/Ethereum_token_Development_for_Beginners.png?w=960&h=540&q=80&fm=webp 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/IA7kWVMlmlCR8XwvDwvTv/4d5e8ee73deb8ae4e3f3cfbd9e08562e/Ethereum_token_Development_for_Beginners.png?w=1920&h=1080&q=80&fm=webp 1920w","sizes":"(min-width: 1920px) 1920px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/9sy2a0egs6zh/IA7kWVMlmlCR8XwvDwvTv/4d5e8ee73deb8ae4e3f3cfbd9e08562e/Ethereum_token_Development_for_Beginners.png?w=1920&h=1080&q=80&fm=png","srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/IA7kWVMlmlCR8XwvDwvTv/4d5e8ee73deb8ae4e3f3cfbd9e08562e/Ethereum_token_Development_for_Beginners.png?w=480&h=270&q=80&fm=png 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/IA7kWVMlmlCR8XwvDwvTv/4d5e8ee73deb8ae4e3f3cfbd9e08562e/Ethereum_token_Development_for_Beginners.png?w=960&h=540&q=80&fm=png 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/IA7kWVMlmlCR8XwvDwvTv/4d5e8ee73deb8ae4e3f3cfbd9e08562e/Ethereum_token_Development_for_Beginners.png?w=1920&h=1080&q=80&fm=png 1920w","sizes":"(min-width: 1920px) 1920px, 100vw"}},"layout":"constrained","width":1920,"height":1080}},"publishDate":"May 21, 2024","authors":[{"name":"Kingsley Okonkwo","createProfilePage":true,"profileUrl":"kingsley-okonkwo"}],"content":{"childMarkdownRemark":{"html":"<p>As a beginner in web3 development, developing and deploying your own token is one of the most popular ways to get started building on-chain software, improve your Solidity skills and understand  the web3 development lifecycle.</p>\n<p>In Ethereum, there are various token standards, which are the predefined set of rules that tokens must follow to ensure compatibility, compliance, and interoperability with the Ethereum network and other dapps.</p>\n<p>These standards include ERC-20 for fungible tokens, ERC-721 for non-fungible tokens (NFTs), ERC-1155 for multi-token types, ERC-777 for advanced token functionalities, ERC-1400 for security tokens, and ERC-4626 for tokenized vaults.</p>\n<p>In this blog, we will develop an ERC-20 token by leveraging OpenZeppelin, a library that provides secure and tested implementations of standard smart contract templates. We will walk through setting up your development environment, writing the token contract, and deploying it on the Linea layer 2 network.</p>\n<h2>Step 1: Set up your development environment with Hardhat</h2>\n<br />\nBefore you start developing your Ethereum token, you'll need to set up your development environment. In this blog, we will be using Hardhat. Follow the steps below:\n<ol>\n<li>\n<p><strong>Install Node.js and npm</strong>: Node.js is a JavaScript runtime, and npm is its package manager. Download and install them from the <a href=\"https://nodejs.org/\">official Node.js website</a>.</p>\n</li>\n<li>\n<p><strong>Create a new Hardhat project</strong>: Open your terminal, create a new directory for your project, and navigate into it. Then, run:</p>\n</li>\n</ol>\n<pre><code class=\"language-bash\">\nmkdir my-token\n\ncd my-token\n\nnpm init -y\n\nnpm install --save-dev hardhat\n\nnpx hardhat\n\n</code></pre>\n<ol start=\"3\">\n<li><strong>Install necessary Hardhat plugins and OpenZeppelin contracts</strong>:</li>\n</ol>\n<pre><code class=\"language-bash\">\nnpm install @nomiclabs/hardhat-ethers ethers @openzeppelin/contracts\n\n</code></pre>\n<h2>Step 2: Create your Ethereum token</h2>\n<br />\nFollow these steps to create a simple ERC-20 token:\n<ol>\n<li><strong>Create a token contract</strong>: In your Hardhat project, navigate to the contracts directory and create a new file named MyToken.sol. Open this file and define your token contract:</li>\n</ol>\n<pre><code class=\"language-solidity\">\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MyToken is ERC20 {\n\n    constructor(uint256 initialSupply) ERC20(\"MyToken\", \"MTK\") {\n\n        _mint(msg.sender, initialSupply);\n\n    }\n\n}\n\n</code></pre>\n<p>This smart contract creates an ERC-20 token named \"MyToken\" with the symbol \"MTK\" using OpenZeppelin's library. When deployed, it mints an initial supply of tokens specified by the deployer and assigns them to the deployer's address.</p>\n<ol start=\"2\">\n<li><strong>Write a deployment script</strong>: In the scripts directory, create a new file named deploy.js and add the following code to deploy your contract:</li>\n</ol>\n<pre><code class=\"language-javascript\">\nasync function main() {\n\n  const [deployer] = await ethers.getSigners();\n\n  console.log(\"Deploying contracts with the account:\", deployer.address);\n\n  const MyToken = await ethers.getContractFactory(\"MyToken\");\n\n  const myToken = await MyToken.deploy(1000000);\n\n  console.log(\"MyToken deployed to:\", myToken.address);\n\n}\n\nmain()\n\n  .then(() => process.exit(0))\n\n  .catch((error) => {\n\n    console.error(error);\n\n    process.exit(1);\n\n  });\n\n</code></pre>\n<p>The above script deploys the \"MyToken\" smart contract using Hardhat and ethers.js, initializing it with a supply of 1,000,000 tokens. It retrieves the deployer's address and deploys the contract.</p>\n<ol start=\"3\">\n<li><strong>Compile and deploy your contract locally</strong>: In your terminal, compile and deploy your contract to a local blockchain provided by Hardhat:</li>\n</ol>\n<pre><code class=\"language-bash\">\nnpx hardhat compile\n\nnpx hardhat run scripts/deploy.js --network localhost\n\n</code></pre>\n<h2>Step 3: Deploy your token contract to Linea testnet</h2>\n<br />\nNow that we have developed and deployed our ERC-20 token locally, it's time to deploy it to the Linea testnet using Infura and MetaMask. Follow these steps to get your token live on the Linea testnet.\n<ol>\n<li>\n<p><strong>Set up an Infura account</strong>: Infura provides easy access to the various blockchain networks and their testnets. Create a new project, select Linea Sepolia testnet from the menu of supported networks, and copy out the project ID.</p>\n</li>\n<li>\n<p><strong>Configure MetaMask</strong>: Open your MetaMask wallet and navigate to the network section. In the dropdown menu, ensure that “show test networks” is toggled on. Then select Linea Sepolia testnet.</p>\n</li>\n<li>\n<p><strong>Get Linea Sepolia ETH</strong>: When deploying your contract, you need Linea Sepolia ETH to pay for gas fees. You can get some Linea ETH by visiting the <a href=\"https://www.infura.io/faucet/linea\">official Linea Sepolia faucet</a>.</p>\n</li>\n<li>\n<p><strong>Update Hardhat configuration</strong>: In your Hardhat project, update your hardhat.config.js to include the Linea testnet configuration:</p>\n</li>\n</ol>\n<pre><code class=\"language-javascript\">\nrequire(\"@nomiclabs/hardhat-ethers\");\n\nrequire(\"dotenv\").config();\n\nmodule.exports = {\n\n  solidity: \"0.8.0\",\n\n  networks: {\n\n    lineaTestnet: {\n\n      url: `https://linea-sepolia.infura.io/v3/${process.env.INFURA_PROJECT_ID}`,\n\n      accounts: [`0x${process.env.PRIVATE_KEY}`],\n\n      chainId: 59141\n\n    }\n\n  }\n\n};\n</code></pre>\n<p>Ensure your .env file contains the necessary environment variables:</p>\n<pre><code class=\"language-bash\">\nINFURA_PROJECT_ID=your_infura_project_id\n\nPRIVATE_KEY=your_private_key\n</code></pre>\n<ol start=\"5\">\n<li><strong>Deploy your contract to Linea Sepolia testnet</strong></li>\n</ol>\n<p>Now, to deploy your token contract to the Linea testnet, run this command:</p>\n<pre><code class=\"language-bash\">\nnpx hardhat compile\n\nnpx hardhat run scripts/deploy.js --network lineaTestnet\n\n</code></pre>\n<p>This script will deploy your ERC-20 token contract to the Linea testnet using the account connected to MetaMask.</p>\n<h2>Advance your web3 dapp development with MetaMask Developer</h2>\n<br />\nBy mastering the basics of Ethereum token development, setting up your development environment, and adhering to best practices, you can successfully develop and deploy your own Ethereum token. Whether creating a new cryptocurrency or tokenizing an asset, Ethereum offers the tools and ecosystem to bring your ideas to life.\n<p>Visit the <a href=\"https://metamask.io/developer/\">MetaMask Developer portal</a> for more advanced development needs, such as Sign-in-with-Ethereum (SIWE), support for EIP-6963, and seamless integration with MetaMask via Snaps. It offers a comprehensive suite of tools, APIs, and SDKs designed to streamline user onboarding and enable developers to forge unique, permissionless wallet connections and in-dapp experiences tailored for MetaMask users.</p>"}},"categories":[{"contentful_id":"Jc9ZQ937JgPbuV2Xap2l7","node_locale":"tr","internal":{"type":"ContentfulNewsCategory"},"name":"Geliştiriciler","slug":"developers"}],"metaTitle":"Ethereum Token Development for Beginner Web3 Developers","metaDescription":"This blog offers a simple, step-by-step guide for beginners in web3 development on how to develop and deploy an ERC-20 token.","canonicalUrl":null,"isPrivate":false}]}},"pageContext":{"headerId":"6I0knvqLf0DS5PB72DqUlM","footerId":"75bFgEllkMxpVsY8wWlroX","seoId":"7k3sOZj8ICP53K0J7jXp7B","modules":["4ZjPczvQn6fYgigGRFSQPf","P9sMsqPrQxPv6xyeMWZvn"],"themeColor":null,"pathBuild":"/tr/news/developers/page/4/","isFaqLayout":false,"h2FontSize":"40px","localizedPages":["/","/news/","/download/","/swaps/","/news/latest/powerful-configurable-secure-metamask-is-how-you-show-up-in-web-3/","/news/latest/metamask-portfolio-track-and-manage-your-web-3-everything/","/news/latest/how-to-use-metamasks-buy-feature-to-fund-your-wallet/","/news/latest/how-to-use-metamasks-swap-feature-to-get-what-you-want/","/news/latest/how-to-stake-crypto-and-secure-the-network/","/news/latest/bridge-easily-move-tokens-across-chains/","/news/latest/how-to-sell-crypto-for-cash/","/news/latest/dashboard-track-everything-in-one-place/","/news/security/","/news/developers/","/news/institutions/"],"limit":4,"skip":12,"categoryId":"Jc9ZQ937JgPbuV2Xap2l7","category":"developers","totalItems":66,"currentPage":4,"totalPages":17,"sharedCopy":{"browserNotSupported":"desteklenmiyor. Lütfen MetaMask'i destekleyen bir tarayıcı indirin.","by":"yazar","copyLink":"Bağlantıyı kopyala","copied":"Kopyalandı"},"slug":"/news/developers/page/4/","translation":true,"locale":"tr","node_locale":"tr","newsCategories":[{"name":"security","categoryId":"73InEMthwQcFmYQ8Ta61gS","total":33},{"name":"developers","categoryId":"Jc9ZQ937JgPbuV2Xap2l7","total":66},{"name":"","categoryId":"3tE0tpmPMGsXezpOhKyWGO","total":68},{"name":"institutions","categoryId":"75mzA7RLLPzWfBjl54wLRJ","total":50}]}},"staticQueryHashes":["2087975078","2272059946","3000541721","3155062165"],"slicesMap":{}}