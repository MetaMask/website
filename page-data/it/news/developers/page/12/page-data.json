{"componentChunkName":"component---src-templates-contentful-news-category-layout-js","path":"/it/news/developers/page/12/","result":{"data":{"header":{"contentful_id":"6I0knvqLf0DS5PB72DqUlM","node_locale":"it","internal":{"type":"ContentfulLayoutHeader"},"logo":{"contentful_id":"6fkPzzTMo3IoMKGMshuSVD","node_locale":"it","internal":{"type":"ContentfulLogo"},"title":"MetaMask Logo","logo":{"title":"mm-logo","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/4zJfzJbG3kTDSk5Wo4RJI1/1b363263141cf629b28155e2625b56c9/mm-logo.svg"},"gatsbyImageData":null},"logoDarkMode":{"title":"mm-logo-white","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/2qy1wS5MmZOXkXn9yFlGJp/f3797a512c283e6f71450abd408b7452/mm-logo-white.svg"},"gatsbyImageData":null},"link":"/","newTab":false,"displayTitle":false,"widthLogo":null,"backgroundColor":null,"customClass":null},"logoMobile":null,"menuItems":[{"columns":1,"title":"Funzionalità","displayTitle":true,"modules":[{"node_locale":"it","contentful_id":"3Ngv0xEpQwwiVjfu3MVui9","fontSize":null,"ctaLink":"https://portfolio.metamask.io/","displayText":"MetaMask Portfolio","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":"Nav Bar Button","eventCategory":"MetaMask Portfolio ","socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"272HODLnCd83z9Is3VXfCV","fontSize":null,"ctaLink":"/swaps/","displayText":"Swaps","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"3GGJuQss10B4ejSi1vzHxk","fontSize":null,"ctaLink":"/buy-crypto/","displayText":"Compra criptovalute","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"4OJuQIyiz6RKXiEZ2aMYX5","fontSize":null,"ctaLink":"/sell-crypto/","displayText":"Vendi criptovalute","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":"sell-crypto","customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"5n6LAatVBeM1vw6ok6bqcR","fontSize":null,"ctaLink":"/snaps/","displayText":"MetaMask Snaps","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null}]},{"columns":1,"title":"Crea","displayTitle":true,"modules":[{"node_locale":"it","contentful_id":"1JmDHLFU2Y45o1QXsQDjC1","fontSize":null,"ctaLink":"https://docs.metamask.io/","displayText":"Documentazione","displayTextTreatment":null,"newTab":true,"buttonDisplay":null,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":false,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"5gPptdmrIjeGdYowLtrCHo","fontSize":null,"ctaLink":"/developer/","displayText":"Sviluppatori","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":false,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"60cjqarld8mVDWHs8qZ4q1","fontSize":null,"ctaLink":"/institutions/","displayText":"Institutions","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":false,"buttonCaretDown":false,"launchDarklyFlag":"institutions","customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"39eW2psItqGMrBVsMkLyDz","fontSize":null,"ctaLink":"/sdk/","displayText":"SDK","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null}]},{"columns":1,"title":"Risorse","displayTitle":true,"modules":[{"node_locale":"it","contentful_id":"6NMiwFe3tTn9NV1K9UGlcZ","fontSize":null,"ctaLink":"/news/","displayText":"Blog","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"3eavIRbBzcKt3XA1CZRrON","fontSize":null,"ctaLink":"https://support.metamask.io","displayText":"Supporto","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"qGq9T5d9vFmRNSvrQbNOk","fontSize":null,"ctaLink":"/faqs/","displayText":"Domande frequenti","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"hFoMVr6dpc0M4Q8OzIvoa","fontSize":null,"ctaLink":"https://community.metamask.io/","displayText":"Comunità","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null}]},{"node_locale":"it","contentful_id":"1wFIQKdGvyapyZJfmISWHc","fontSize":null,"ctaLink":"https://learn.metamask.io/overview","displayText":"Scopri","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":"Nav Bar Button","eventCategory":"MetaMask Learn ","socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null}],"downloadButton":{"node_locale":"it","contentful_id":"3v9J6feUIljXuMBM0EYQNh","fontSize":null,"ctaLink":"/download/","displayText":"Scarica","displayTextTreatment":"Ottieni MetaMask","newTab":false,"buttonDisplay":true,"buttonGradient":false,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":"Nav Bar Button","eventCategory":"Download Intent","socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":"mm-download-cta-header","customClassName":"ld-download-link","internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":{"node_locale":"it","contentful_id":"4bGNlgZAx6ugxPYFht8Ble","fontSize":null,"ctaLink":"https://portfolio.metamask.io/","displayText":"Visualizza MetaMask Web","displayTextTreatment":"Vedi i tuoi asset","newTab":true,"buttonDisplay":true,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":false,"buttonCaretDown":null,"launchDarklyFlag":"mm-portfolio-cta-header","customClassName":"ld-portfolio-link","internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null}},"popupAnnouncement":{"contentful_id":"5yOpjVXgyG3eGYvZQkmv4f","node_locale":"it","internal":{"type":"ContentfulPopupAnnouncement"},"title":null,"ctaText":"Scopri subito il Portfolio MetaMask. Monitora e gestisci i tuoi asset web3 in un unico luogo!","ctaLink":"https://portfolio.metamask.io","backgroundColor":"#037DD5"},"popupAnnouncementTreatment":{"contentful_id":"5cklTGW1qCkOwqxdVYhhFc","node_locale":"it","internal":{"type":"ContentfulPopupAnnouncement"},"title":null,"ctaText":"Guarda crescere le tue criptovalute con Pooled Staking. Metti in staking le tue criptovalute e ottieni ricompense per aver protetto la rete Ethereum.","ctaLink":"https://portfolio.metamask.io/stake?tab=pooled","backgroundColor":"#037DD5"},"isSticky":true,"launchDarklyFlag":"use-treatment-for-non-uk-and-us-announcement"},"footer":{"contentful_id":"75bFgEllkMxpVsY8wWlroX","node_locale":"it","internal":{"type":"ContentfulLayoutFooter"},"logo":{"contentful_id":"6fkPzzTMo3IoMKGMshuSVD","node_locale":"it","internal":{"type":"ContentfulLogo"},"title":"MetaMask Logo","logo":{"title":"mm-logo","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/4zJfzJbG3kTDSk5Wo4RJI1/1b363263141cf629b28155e2625b56c9/mm-logo.svg"},"gatsbyImageData":null},"logoDarkMode":{"title":"mm-logo-white","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/2qy1wS5MmZOXkXn9yFlGJp/f3797a512c283e6f71450abd408b7452/mm-logo-white.svg"},"gatsbyImageData":null},"link":"/","newTab":false,"displayTitle":false,"widthLogo":null,"backgroundColor":null,"customClass":null},"menuItems":[{"columns":1,"title":"Scopri di più","displayTitle":true,"modules":[{"node_locale":"it","contentful_id":"2OzvqisgIr6A5gzJuQm24G","fontSize":null,"ctaLink":"/about/","displayText":"Informazioni","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"5gPptdmrIjeGdYowLtrCHo","fontSize":null,"ctaLink":"/developer/","displayText":"Sviluppatori","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":false,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"NM6IbWouGG4tghpXmNAtJ","fontSize":null,"ctaLink":"/download/","displayText":"Download","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"6Ui9MOvxC2ExjCL1DeWH1q","fontSize":null,"ctaLink":"/institutions/","displayText":"MetaMask Institutional","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"5UxqbY7b31kskBIj5IibqC","fontSize":null,"ctaLink":"/news/","displayText":"Notizie","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"6qlnG54k7tXJVMscTQhIun","fontSize":null,"ctaLink":"https://metamask.io/security/","displayText":"Sicurezza","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":false,"buttonSecondary":false,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null}]},{"columns":1,"title":"Partecipa","displayTitle":true,"modules":[{"node_locale":"it","contentful_id":"4mpEqrd6pewz2iX2Gfxt3z","fontSize":null,"ctaLink":"https://github.com/MetaMask/metamask-extension/","displayText":"GitHub","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"6kdhvf8S4erkJPUlGWY0Ae","fontSize":null,"ctaLink":"https://gitcoin.co/","displayText":"Gitcoin","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"5xd9mrSTpZ9Ky7XWhDDTth","fontSize":null,"ctaLink":"https://consensys.io/open-roles/?discipline=32543","displayText":"Offerte di lavoro","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"6SYAtiKQ188OxaIKhHd7qj","fontSize":null,"ctaLink":"https://shop.spreadshirt.com/metamask/","displayText":"Negozio di articoli da regalo","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"72IN7H47TcmIvmYyyTETIS","fontSize":null,"ctaLink":"https://consensys.io/contact","displayText":"Stampa e collaborazioni","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null}]},{"columns":1,"title":"Legale","displayTitle":true,"modules":[{"node_locale":"it","contentful_id":"4LiJW9vtg515J8Bhlzq8nC","fontSize":null,"ctaLink":"https://consensys.io/privacy-notice","displayText":"Informativa sulla privacy","displayTextTreatment":null,"newTab":true,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"2GpObxkrC9uUyLXLonaa3F","fontSize":null,"ctaLink":"/terms-of-use/","displayText":"Termini di Uso","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"5WpVb2xPvtf19P6NVNloit","fontSize":null,"ctaLink":"/cla/","displayText":"Accordo di licenza per i collaboratori","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null},{"node_locale":"it","contentful_id":"19JXW3A4VGjeuEC6u46uC4","fontSize":null,"ctaLink":"/sitemap/","displayText":"Mappa del sito","displayTextTreatment":null,"newTab":false,"buttonDisplay":false,"buttonGradient":null,"buttonSecondary":null,"hideButtonIcon":null,"eventLabel":null,"eventCategory":null,"socialLink":null,"showCaretRight":null,"buttonCaretDown":null,"launchDarklyFlag":null,"customClassName":null,"internal":{"type":"ContentfulCta"},"hubSpotForm":null,"embedHTML":null,"downloadBrowsers":null,"mobileCta":null,"alternativeCta":null}]}],"copyright":"©2024 MetaMask • Una formazione Consensys "},"seo":{"contentful_id":"7k3sOZj8ICP53K0J7jXp7B","node_locale":"it","internal":{"type":"ContentfulSeo"},"pageTitle":"Rimani aggiornato sulle novità di Web3: notizie MetaMask","pageDescription":"Rimani informato: gli ultimi aggiornamenti e sviluppi dalle notizie MetaMask.","metaTags":null,"linkTags":null,"canonicalUrl":null,"featuredImage":{"file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/999c9cfef779d7832a1825cf6d67144f/it_-_seo1.png"},"gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/999c9cfef779d7832a1825cf6d67144f/it_-_seo1.png?w=192&h=101&q=100&fm=webp 192w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/999c9cfef779d7832a1825cf6d67144f/it_-_seo1.png?w=384&h=202&q=100&fm=webp 384w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/999c9cfef779d7832a1825cf6d67144f/it_-_seo1.png?w=768&h=403&q=100&fm=webp 768w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/999c9cfef779d7832a1825cf6d67144f/it_-_seo1.png?w=1536&h=806&q=100&fm=webp 1536w","sizes":"(min-width: 768px) 768px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/999c9cfef779d7832a1825cf6d67144f/it_-_seo1.png?w=768&h=403&q=100&fm=png","srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/999c9cfef779d7832a1825cf6d67144f/it_-_seo1.png?w=192&h=101&q=100&fm=png 192w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/999c9cfef779d7832a1825cf6d67144f/it_-_seo1.png?w=384&h=202&q=100&fm=png 384w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/999c9cfef779d7832a1825cf6d67144f/it_-_seo1.png?w=768&h=403&q=100&fm=png 768w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/77mVisJcj8sMquYlW3iq73/999c9cfef779d7832a1825cf6d67144f/it_-_seo1.png?w=1536&h=806&q=100&fm=png 1536w","sizes":"(min-width: 768px) 768px, 100vw"}},"layout":"constrained","width":768,"height":403}},"structuredDataSchema":null},"hero":{"contentful_id":"4ZjPczvQn6fYgigGRFSQPf","node_locale":"it","internal":{"type":"ContentfulLayoutHero"},"headline":"Notizie MetaMask","headlinePortfolio":null,"hideHeadline":false,"description":{"childMarkdownRemark":{"html":"<a href=\"https://twitter.com/metamask/\" target=\"_blank\">\n  <svg width=\"25\" height=\"20\" viewBox=\"0 0 25 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M24.5 2.55699C23.617 2.94899 22.668 3.21299 21.672 3.33199C22.689 2.72299 23.47 1.75799 23.837 0.607986C22.886 1.17199 21.832 1.58199 20.71 1.80299C19.813 0.845986 18.532 0.247986 17.116 0.247986C13.937 0.247986 11.601 3.21399 12.319 6.29299C8.228 6.08799 4.6 4.12799 2.171 1.14899C0.881 3.36199 1.502 6.25699 3.694 7.72299C2.888 7.69699 2.128 7.47599 1.465 7.10699C1.411 9.38799 3.046 11.522 5.414 11.997C4.721 12.185 3.962 12.229 3.19 12.081C3.816 14.037 5.634 15.46 7.79 15.5C5.72 17.123 3.112 17.848 0.5 17.54C2.679 18.937 5.268 19.752 8.048 19.752C17.19 19.752 22.355 12.031 22.043 5.10599C23.005 4.41099 23.84 3.54399 24.5 2.55699Z\" fill=\"#535A61\"/>\n</svg>Segui @MetaMask\n</a>"}},"descriptionPortfolio":null,"note":null,"eyebrow":null,"eyebrowLogo":null,"eyebrowMobileLogo":null,"eyebrowLogoDarkMode":null,"eyebrowMobileLogoDarkMode":null,"sideImageFlex":false,"sideImageFoxAnimation":null,"sideImage":null,"sideImagePortfolio":null,"sideImageDarkMode":null,"sideImagePortfolioDarkMode":null,"ctas":null,"hubSpotForm":null,"backgroundColor":"default","contentAlignment":"center","learnMoreText":null,"headlineBorderBottom":false,"showFavIcon":false,"sectionPadding":"32px","backgroundImage":{"title":"News Hero","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png"},"gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png?w=480&h=96&q=80&fm=webp 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png?w=960&h=192&q=80&fm=webp 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png?w=1920&h=384&q=80&fm=webp 1920w","sizes":"(min-width: 1920px) 1920px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png?w=1920&h=384&q=80&fm=png","srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png?w=480&h=96&q=80&fm=png 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png?w=960&h=192&q=80&fm=png 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2DkHpHReuWGy3rlFwsseg9/f0814f115710a6ffa477c575a2215f89/News_Hero.png?w=1920&h=384&q=80&fm=png 1920w","sizes":"(min-width: 1920px) 1920px, 100vw"}},"layout":"constrained","width":1920,"height":384}},"backgroundImageDarkMode":{"title":"News Hero (Dark mode)","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png"},"gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png?w=480&h=96&q=80&fm=webp 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png?w=960&h=192&q=80&fm=webp 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png?w=1920&h=384&q=80&fm=webp 1920w","sizes":"(min-width: 1920px) 1920px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png?w=1920&h=384&q=80&fm=png","srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png?w=480&h=96&q=80&fm=png 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png?w=960&h=192&q=80&fm=png 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/RjpEbmeL6vLPeiSjePDpy/2f287d7a85aecbb7657d3bbd0b28b8ed/Auto_Layout_Vertical-dark.png?w=1920&h=384&q=80&fm=png 1920w","sizes":"(min-width: 1920px) 1920px, 100vw"}},"layout":"constrained","width":1920,"height":384}},"customClass":"newsHero"},"layoutModuleContainer":{"internal":{"type":"ContentfulLayoutModuleContainer"},"contentful_id":"P9sMsqPrQxPv6xyeMWZvn","node_locale":"it","eyebrow":null,"headline":null,"description":null,"modules":[{"contentful_id":"3pVthg97YVjIy9Z6a8ntfm","node_locale":"it","internal":{"type":"ContentfulModuleContainer"},"title":"Novità","description":{"childMarkdownRemark":{"html":"<h2>Ultime notizie</h2>\nI nostri articoli del blog e pubblicazioni per te"}},"numberOfItem":0,"columns":2,"columnType":null,"columnsOnTablet":null,"centerOnTablet":null,"columnsOnMobile":1,"centerOnMobile":null,"contentAlignment":"left","splitModules":false,"displayTitle":false,"isLiquiditySection":false,"isTrustBar":null,"gridModulesGap":"16px","loadMoreMode":null,"loadMoreCta":null,"carouselMode":null,"hasRegionSelector":null,"regionSelectorHeadline":null,"regionSelectorPopupTitle":null,"regionSelectorPopupText":null,"regionListKey":null,"extraData":null,"modules":[{"contentful_id":"3tE0tpmPMGsXezpOhKyWGO","node_locale":"it","internal":{"type":"ContentfulNewsCategory"},"name":"Novità","slug":"latest"}]},{"contentful_id":"6e8qa9GygFsjJT0bK9T1Ae","node_locale":"it","internal":{"type":"ContentfulModuleContainer"},"title":"Sicurezza","description":{"childMarkdownRemark":{"html":"<h2>Sicurezza</h2>\nTutte le tue notizie sulla sicurezza"}},"numberOfItem":0,"columns":2,"columnType":null,"columnsOnTablet":null,"centerOnTablet":null,"columnsOnMobile":1,"centerOnMobile":null,"contentAlignment":"left","splitModules":false,"displayTitle":false,"isLiquiditySection":false,"isTrustBar":null,"gridModulesGap":"16px","loadMoreMode":null,"loadMoreCta":null,"carouselMode":null,"hasRegionSelector":null,"regionSelectorHeadline":null,"regionSelectorPopupTitle":null,"regionSelectorPopupText":null,"regionListKey":null,"extraData":null,"modules":[{"contentful_id":"73InEMthwQcFmYQ8Ta61gS","node_locale":"it","internal":{"type":"ContentfulNewsCategory"},"name":"Sicurezza","slug":"security"}]},{"contentful_id":"3D1RfQOf8U5zibB0UvA9K6","node_locale":"it","internal":{"type":"ContentfulModuleContainer"},"title":"Sviluppatori","description":{"childMarkdownRemark":{"html":"<h2>Sviluppatori</h2>\nTutte le notizie relative agli sviluppatori"}},"numberOfItem":0,"columns":2,"columnType":null,"columnsOnTablet":null,"centerOnTablet":null,"columnsOnMobile":1,"centerOnMobile":null,"contentAlignment":"left","splitModules":false,"displayTitle":false,"isLiquiditySection":false,"isTrustBar":null,"gridModulesGap":"16px","loadMoreMode":null,"loadMoreCta":null,"carouselMode":null,"hasRegionSelector":null,"regionSelectorHeadline":null,"regionSelectorPopupTitle":null,"regionSelectorPopupText":null,"regionListKey":null,"extraData":null,"modules":[{"contentful_id":"Jc9ZQ937JgPbuV2Xap2l7","node_locale":"it","internal":{"type":"ContentfulNewsCategory"},"name":"Sviluppatori","slug":"developers"}]},{"contentful_id":"6abraWA8TPklSLTzB1wr8E","node_locale":"it","internal":{"type":"ContentfulModuleContainer"},"title":"Organizzazioni","description":{"childMarkdownRemark":{"html":"<h2 class=\"mb-3\">Organizzazioni</h2>\nTutte le tue notizie sulle organizzazioni"}},"numberOfItem":0,"columns":2,"columnType":null,"columnsOnTablet":null,"centerOnTablet":null,"columnsOnMobile":1,"centerOnMobile":null,"contentAlignment":"left","splitModules":false,"displayTitle":false,"isLiquiditySection":false,"isTrustBar":false,"gridModulesGap":"16px","loadMoreMode":null,"loadMoreCta":null,"carouselMode":null,"hasRegionSelector":null,"regionSelectorHeadline":null,"regionSelectorPopupTitle":null,"regionSelectorPopupText":null,"regionListKey":null,"extraData":null,"modules":[{"contentful_id":"75mzA7RLLPzWfBjl54wLRJ","node_locale":"it","internal":{"type":"ContentfulNewsCategory"},"name":"Organizzazioni","slug":"institutions"}]}],"cta":null,"backgroundColor":"default","displayHeadline":false,"headlineAlignCenter":false,"contentAlignCenter":false,"headlineMarginTop0":null,"paddingTop":"40px","sectionPadding":null,"noPaddingTop":null,"noPaddingBottom":false,"modulesMargin":null,"isTab":true,"moduleId":null,"customClass":"newsCategoriesTab","sideImage":null,"backgroundSize":"cover","backgroundImage":null},"stories":{"nodes":[{"contentful_id":"3jkFf9uY0T9qpnpMac9iX0","node_locale":"it","internal":{"type":"ContentfulNews"},"title":"FoxTagger Snap: Mapping addresses with user-defined tags","slug":"foxtagger-snap-mapping-addresses-with-user-defined-tags","subtitle":"An InterIIT Hackathon winner","image":{"title":"Snaps Spotlights Feature Images","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/2rCBWZUhCIH3Ws6APjjIpL/49e9ab0bc24806a027cde2be76736e14/Snaps_Spotlights_Feature_Images.png"},"gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/2rCBWZUhCIH3Ws6APjjIpL/49e9ab0bc24806a027cde2be76736e14/Snaps_Spotlights_Feature_Images.png?w=270&h=180&q=80&fm=webp 270w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2rCBWZUhCIH3Ws6APjjIpL/49e9ab0bc24806a027cde2be76736e14/Snaps_Spotlights_Feature_Images.png?w=540&h=360&q=80&fm=webp 540w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2rCBWZUhCIH3Ws6APjjIpL/49e9ab0bc24806a027cde2be76736e14/Snaps_Spotlights_Feature_Images.png?w=1080&h=720&q=80&fm=webp 1080w","sizes":"(min-width: 1080px) 1080px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/9sy2a0egs6zh/2rCBWZUhCIH3Ws6APjjIpL/49e9ab0bc24806a027cde2be76736e14/Snaps_Spotlights_Feature_Images.png?w=1080&h=720&q=80&fm=png","srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/2rCBWZUhCIH3Ws6APjjIpL/49e9ab0bc24806a027cde2be76736e14/Snaps_Spotlights_Feature_Images.png?w=270&h=180&q=80&fm=png 270w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2rCBWZUhCIH3Ws6APjjIpL/49e9ab0bc24806a027cde2be76736e14/Snaps_Spotlights_Feature_Images.png?w=540&h=360&q=80&fm=png 540w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2rCBWZUhCIH3Ws6APjjIpL/49e9ab0bc24806a027cde2be76736e14/Snaps_Spotlights_Feature_Images.png?w=1080&h=720&q=80&fm=png 1080w","sizes":"(min-width: 1080px) 1080px, 100vw"}},"layout":"constrained","width":1920,"height":1280}},"publishDate":"May 10, 2023","authors":[{"name":"MetaMask","createProfilePage":null,"profileUrl":"metamask"}],"content":{"childMarkdownRemark":{"html":"<p><a href=\"https://metamask.io/snaps/\">MetaMask Snaps</a> is the roadmap to making MetaMask the most extensible wallet in the world. As a developer, you can bring your features and APIs to MetaMask in totally new ways. Web3 developers are the core of this growth and this series aims to showcase the novel MetaMask Snaps being built today.</p>\n<h3>FoxTagger Snap</h3>\n<br /> \n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/AMq4x3WRvvk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n<p><strong>Snap Repo</strong>: <a href=\"https://github.com/shree675/FoxTagger\">https://github.com/shree675/FoxTagger</a></p>\n<p>FoxTagger is a tool that facilitates the mapping of addresses with user-defined tags to help users keep their expenditures in check by alerting and displaying usage analytics.</p>\n<p><strong>Walk us through the technical implementation?</strong></p>\n<h4>The Technical Setup</h4>\n<br /> \n<p>Our MetaMask extension, FoxTagger, consists of two main components, a MetaMask Snaps backend (a.k.a. the snap) and a <a href=\"https://www.gatsbyjs.com/\">Gatsby.js</a> frontend. While the frontend is a simple web application that hosts the UI, it also acts as a companion DApp for our Snaps application.</p>\n<p>Most of the functionality is achieved in the snap, but the remaining is in the frontend to facilitate the users to request amount from others and/or configure their tags through our UI. While the <em>request amount</em> feature uses the XMTP protocol, the tagging feature uses the <a href=\"https://docs.metamask.io/guide/snaps-rpc-api.html#snaps-json-rpc-api\">MetaMask Snaps API</a>.</p>\n<p>We have used the <a href=\"https://github.com/MetaMask/template-snap-monorepo\">snap monorepo</a> as the template to begin with. The full implementation of our project can be found <a href=\"https://github.com/shree675/FoxTagger\">here</a>.</p>\n<h4>The Snaps Application</h4>\n<br /> \n<p>In our entire implementation, we make use of the following main features provided by the Snaps API:</p>\n<ol>\n<li>Persistence storage</li>\n<li>Notifications</li>\n<li>Cron jobs</li>\n<li>Transaction insights</li>\n</ol>\n<p>Our implementation begins by first exposing some functions to the frontend in <code>packages\\snap\\src\\index.ts</code>.</p>\n<pre><code>export const onRpcRequest: OnRpcRequestHandler = async ({ request }) => {\n  switch (request.method) {\n    case 'getPersistentStorage':\n      return await getPersistentStorage();\n    case 'setPersistentStorage':\n      await setPersistentStorage(\n        request.params as void | Record&#x3C;string, unknown>,\n      );\n      return null;\n    case 'clearPersistentStorage':\n      await clearPersistentStorage();\n      return null;\n\n    default:\n      throw new Error('Method not found.');\n  }\n};\n</code></pre>\n<p>The functions <code>getPersistenceStorage</code> and <code>setPersistenceStorage</code> are very fundamental as they facilitate the storage and retrieval of tags and other information and are defined as shown in the below code snippet.</p>\n<pre><code>export const getPersistentStorage = async () => {\n  return await wallet.request({\n    method: 'snap_manageState',\n    params: ['get'],\n  });\n};\n\nexport const clearPersistentStorage = async () => {\n  await wallet.request({\n    method: 'snap_manageState',\n    params: ['clear'],\n  });\n};\n\nexport const setPersistentStorage = async (\n  data: Record&#x3C;string, unknown> | void,\n) => {\n  await wallet.request({\n    method: 'snap_manageState',\n    params: ['update', data],\n  });\n};\n</code></pre>\n<p>For all the feature implementations, we have created a suitable datastructure for our persistence storage.</p>\n<pre><code>{\n    \"from_account0\": {\n      mainMapping: {\n        \"to_account0\": [\"tag0\",\"tag1\"],\n        ...\n      },\n      usage: {\n        \"tag0\": {\n          limit: \"100000000000\",\n          used: \"800000\",\n          notified: false\n        },\n        ...\n      },\n      latestHash: \"transaction_hash0\"\n    },\n    ...\n  }\n</code></pre>\n<p>A user can have multiple accounts and each account has its own tags, usage and user-defined limits.</p>\n<h4>Transaction Insights</h4>\n<br /> \n<p>The transaction insights feature displays the associated tags, their corresponding expenditures and alerts, if any, in an ongoing transaction.</p>\n<p>In the same <code>index.ts</code> file, we add a transaction insights handler that allows us to intercept an ongoing transaction and interact with the MetaMask wallet.</p>\n<pre><code>export const onTransaction: OnTransactionHandler = async ({ transaction }) => {\n  const insights = await getDetails(transaction);\n\n  return {\n    insights,\n  };\n};\n</code></pre>\n<p>The function <code>getDetails</code> implements the entire logic for calculating the expenditure and showing alerts. This is implemented in <code>packages\\snap\\src\\transaction.ts</code>.</p>\n<pre><code>export const getDetails = async (transaction: Record&#x3C;string, unknown>) => {\n  const toAddress = (transaction.to as string).toLowerCase();\n  const account = (transaction.from as string).toLowerCase();\n  const completeStorage = (await getPersistentStorage()) as any;\n\n  if (!completeStorage?.[account]) {\n    throw new Error('Storage initialization failed.');\n  }\n\n  const storage = completeStorage[account];\n  if (!storage.mainMapping || !storage.usage) {\n    throw new Error('Data corrput. Please re-install the snap.');\n  }\n\n  const tagList = storage.mainMapping[toAddress];\n  if (!tagList?.length) {\n    return {\n      Tag: NO_TAG_MESSAGE,\n    };\n  }\n\n  let tags = '';\n  let alerts = '';\n  let usageMsg = '';\n\n  for (const tag of tagList) {\n    if (tags === '') {\n      tags += `${tag}`;\n    } else {\n      tags += `, ${tag}`;\n    }\n    let { used } = storage.usage[tag];\n    let { limit } = storage.usage[tag];\n    const fixedUsed = FixedNumber.from(used);\n    const fixedLimit = FixedNumber.from(limit);\n    const usedPercent = (\n      Number(fixedUsed.divUnsafe(fixedLimit).toString()) * 100\n    ).toFixed(2);\n    used = BigNumber.from(used);\n    limit = BigNumber.from(limit);\n\n    const amount = BigNumber.from(transaction.value as string);\n    const gas = BigNumber.from(transaction.gas as string);\n    const total = amount.add(gas);\n\n    if (usageMsg === '') {\n      usageMsg += `${tag}: ${usedPercent}%`;\n    } else {\n      usageMsg += ` | ${tag}: ${usedPercent}%`;\n    }\n\n    if (!limit.eq('0')) {\n      if (used.gt(limit)) {\n        alerts += `${EXCEEDED_MESSAGE + toEth(limit)} for the tag ${tag}. `;\n      } else if (used.add(total).gte(limit)) {\n        alerts += `${WILL_EXCEED_MESSAGE + toEth(limit)} for the tag ${tag}. `;\n      }\n    }\n  }\n\n  if (alerts === '') {\n    return {\n      Tag: tags,\n      Usage: usageMsg + FOOTER_NOTE,\n    };\n  }\n\n  return {\n    Tag: tags,\n    Usage: usageMsg + FOOTER_NOTE,\n    Alerts: alerts,\n  };\n};\n</code></pre>\n<p>In this, we are first checking if the current transaction’s <em>to</em> hash (or <em>to</em> address) is present in the storage. Then we retrieve and calculate the usage percentage. We then check if the usage is about to reach, or has already reached the set limit for that tag and we send an appropriate alert.</p>\n<p>Notice that we use <strong>BigNumber</strong> and <strong>FixedNumber</strong> classes available in the <a href=\"https://www.npmjs.com/package/ethers\">ethers</a> npm package to handle arithmetic operations on large numbers.</p>\n<p>Transaction insights is now complete and this is the final result:</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/h4Vxe5SiAOs0y7vviJkND/6c637c9e70b041140ca49d14450f478e/Screenshot_2023-05-10_at_1.22.44_PM.png\" alt=\"Screenshot 2023-05-10 at 1.22.44 PM\"></p>\n<h4>Cron Jobs</h4>\n<br /> \n<p>Defined here are three cron jobs, <code>weeklySummary</code> for generating the summary every week, <code>checkLimits</code> to check if the user has exceeded limits on any of his/her tags and <code>updateAmount</code> that updates the usage information of new transactions performed by the user.</p>\n<p>These cron jobs are mentioned in <code>packages\\snap\\snap.manifest.json</code>, with their appropriate frequency. Additionally, a cron job handler is incorporated in <code>index.ts</code> file.</p>\n<p>These functionalities are defined in <code>packages\\snap\\src\\cron.ts</code>.</p>\n<pre><code>export const getSummary = async (account: string, completeStorage: any) => {\n  const storage = completeStorage[account];\n\n  if (!storage.usage) {\n    return null;\n  }\n\n  const { usage } = storage;\n  const newUsage: any = {};\n  let exceeded = false;\n  let hasTag = false;\n\n  for (const tag in usage) {\n    if (Object.prototype.hasOwnProperty.call(usage, tag)) {\n      hasTag = true;\n      const { used } = usage[tag];\n      const { limit } = usage[tag];\n\n      newUsage[tag] = usage[tag];\n\n      if (\n        BigNumber.from(used).gt(BigNumber.from(limit)) &#x26;&#x26;\n        BigNumber.from(limit).gt('0')\n      ) {\n        exceeded = true;\n      }\n\n      // reset usage information for the next week\n      newUsage[tag].notified = false;\n      newUsage[tag].used = '0';\n    }\n  }\n\n  if (hasTag) {\n    storage.usage = newUsage;\n    completeStorage[account] = storage;\n    await setPersistentStorage(completeStorage);\n  }\n\n  return exceeded;\n};\n</code></pre>\n<p>Here, we iterate through the storage and check if the user has crossed any limits on any of the tags. We then reset <code>notified</code> to <code>false</code> so that it can be reused by <code>checkLimits</code> cron job. We return a boolean value for the cron job handler to pick it up for each user account and send an appropriate notification message at the end of the week.</p>\n<pre><code>export const checkLimits = async (account: string, completeStorage: any) => {\n  const storage = completeStorage[account];\n  if (!storage.usage) {\n    return null;\n  }\n\n  const { usage } = storage;\n  const tags: string[] = [];\n  const newUsage: any = {};\n\n  for (const tag in usage) {\n    if (Object.prototype.hasOwnProperty.call(usage, tag)) {\n      const { used } = usage[tag];\n      const { limit } = usage[tag];\n      const { notified } = usage[tag];\n\n      newUsage[tag] = usage[tag];\n      if (\n        !notified &#x26;&#x26;\n        BigNumber.from(used).gt(BigNumber.from(limit)) &#x26;&#x26;\n        BigNumber.from(limit).gt(BigNumber.from('0'))\n      ) {\n        tags.push(tag);\n        newUsage[tag].notified = true;\n      }\n    }\n  }\n\n  if (tags.length > 0) {\n    storage.usage = newUsage;\n    completeStorage[account] = storage;\n    await setPersistentStorage(completeStorage);\n\n    const message = `${LIMIT_ALERT_HEADER + tags.length} tags on ${compact(\n      account,\n    )}`;\n    return message;\n  }\n\n  return null;\n};\n</code></pre>\n<p>In the above function, we once again iterate through all non-notified user tags and check their usage. If it has exceeded the set limit, we set <code>notified</code> to <code>true</code> so that this tag is not picked up again until the next week. We return a message to the cron job handler stating the number of tags that crossed the limit and the user’s account hash.</p>\n<p>Next, we complete the implementation for <code>updateAmount</code>.</p>\n<pre><code>export const updateAmount = async (account: string, completeStorage: any) => {\n  const response = await fetch(\n    `https://api-goerli.etherscan.io/api?module=account&#x26;action=txlist&#x26;address=${account}&#x26;startblock=0&#x26;endblock=9999999999&#x26;sort=asc&#x26;apikey=${process.env.REACT_API_KEY}`,\n  );\n  const result = await response.json();\n\n  if (!result.result) {\n    return null;\n  }\n\n  let transactions = result.result;\n  if (transactions.length === 0) {\n    return null;\n  }\n\n  // sort in descending order\n  transactions = transactions.sort(\n    (a: any, b: any) => b.timeStamp - a.timeStamp,\n  );\n\n  const { latestHash } = completeStorage[account];\n  const { prevHash } = completeStorage[account];\n  if (transactions[0].hash.toLowerCase() === latestHash) {\n    return null;\n  }\n\n  for (const transaction of transactions) {\n    if (transaction.hash.toLowerCase() === latestHash) {\n      break;\n    }\n\n    if (transaction.to !== account) {\n      const toAddress = (transaction.to as string).toLowerCase();\n      const tagList = completeStorage[account].mainMapping[toAddress];\n\n      if (tagList !== null &#x26;&#x26; tagList !== undefined) {\n        for (const tag of tagList) {\n          const gas = BigNumber.from(transaction.gasPrice).mul(\n            BigNumber.from(transaction.gasUsed),\n          );\n          const value = BigNumber.from(transaction.value);\n          const total = gas.add(value);\n          if (prevHash !== latestHash) {\n            completeStorage[account].usage[tag].used = BigNumber.from(\n              completeStorage[account].usage[tag].used,\n            )\n              .add(total)\n              .toString();\n          } else {\n            completeStorage[account].usage[tag].used = BigNumber.from('0')\n              .add(total)\n              .toString();\n          }\n        }\n      }\n    }\n  }\n\n  completeStorage[account].prevHash = latestHash;\n  completeStorage[account].latestHash = transactions[0].hash.toLowerCase();\n\n  return completeStorage;\n};\n</code></pre>\n<p>Here, we use the <a href=\"https://docs.etherscan.io/v/goerli-etherscan/\">etherscan API</a> to fetch all the user transactions and update the usage details for each tag. We sort the obtained transactions in decreasing order of time and scan them from <code>latestHash</code> transaction to avoid rescanning of transactions. We finally update <code>latestHash</code>. This cron job runs more frequently than <code>checkLimits</code>.</p>\n<p>Here are a few outputs of the above implementations:</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/75yjXTyGHM43SE7mfP81Km/7a2ca077862463f656efadff0ad44a9f/Screenshot_2023-05-10_at_1.26.54_PM.png\" alt=\"Screenshot 2023-05-10 at 1.26.54 PM\"></p>\n<h4>The Frontend DApp</h4>\n<br /> \n<h5>Tagging Feature</h5>\n<br /> \n<p>The website has two pages. The first page is the landing page where the user can login, add/remove tags, check his/her tag usage distribution, set limits and apply filters on the tags and transactions. All of this is achieved through the familiar React.js functionality. The transactions are fetched from the previously mentioned etherscan API and the addresses are associated with their corresponding tags. This information comes from the persistence storage of the connected Snaps.</p>\n<p>The logic for most of the above features is written in <code>packages\\site\\src\\pages\\GetTableData.jsx</code>. The integration of the snap with the frontend is sophisticated, yet intuitive once finished.</p>\n<p>The snap methods are exposed to the frontend by writing the following functions in <code>packages\\site\\src\\utils\\snap.ts</code>:</p>\n<pre><code>/**\n * Get the persisted data from the snap.\n *\n * @returns The persisted data, if any, 'null' otherwise.\n */\nexport const getStorage = async () => {\n  return await window.ethereum.request({\n    method: 'wallet_invokeSnap',\n    params: [\n      defaultSnapOrigin,\n      {\n        method: 'getPersistentStorage',\n      },\n    ],\n  });\n};\n\n/**\n * Update the persistent storage in the snap.\n *\n * @param data - The complete data to be stored.\n */\nexport const setStorage = async (data: Record&#x3C;string, unknown> | void) => {\n  await window.ethereum.request({\n    method: 'wallet_invokeSnap',\n    params: [\n      defaultSnapOrigin,\n      {\n        method: 'setPersistentStorage',\n        params: data,\n      },\n    ],\n  });\n};\n\n/**\n * Clear the persistent storage in the snap.\n */\nexport const clearStorage = async () => {\n  return await window.ethereum.request({\n    method: 'wallet_invokeSnap',\n    params: [\n      defaultSnapOrigin,\n      {\n        method: 'clearPersistentStorage',\n      },\n    ],\n  });\n};\n</code></pre>\n<p>We also use the <a href=\"https://www.npmjs.com/package/react-chartjs-2\">react-chartjs-2</a> npm package to display analytics of the user’s expenditure.</p>\n<p>This is the final look of the website:</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/AWO9lNPmaXnJXUEtNMXqN/c9b685ec2b2644c1ff6edbe5c3b7f85d/Screenshot_2023-05-10_at_1.28.50_PM.png\" alt=\"Screenshot 2023-05-10 at 1.28.50 PM\"></p>\n<h4>Request Amount Feature</h4>\n<br /> \n<p>This is a unique feature in which a user can send a notification through XMTP to another user requesting for ETH. For this, both the users need to have this snap enabled. This feature is made available at <a href=\"http://localhost:8000/request\">http://localhost:8000/request</a>.</p>\n<p>For this, we use the <a href=\"https://www.npmjs.com/package/@xmtp/xmtp-js\">@xmtp/xmtp-js</a> npm package to create <code>WalletContext</code> and <code>XmtpContext</code> in <code>packages\\site\\src\\contexts\\WalletContext.tsx</code> and <code>packages\\site\\src\\contexts\\XmtpContext.tsx</code> respectively. We also create hooks and components. Most of this code directly comes from an example in the <a href=\"https://github.com/xmtp/xmtp-quickstart-react\">documentation</a>.</p>\n<p>We create a new page, <code>packages\\site\\src\\pages\\request.tsx</code> in the website to accommodate the UI for this feature. We send messages using the sendMessage function from the <code>useSendMessage</code> hook.</p>\n<pre><code>import useSendMessage from '../hooks/useSendMessage';\n\nconst sendNewMessage = () => {\n    const payload = {\n      id: Date.now(),\n      message: msgTxt,\n    };\n    sendMessage(JSON.stringify(payload));\n    setMsgTxt('');\n};\n</code></pre>\n<p>And we display the received messages using the provider state of <code>XmtpContext</code>.</p>\n<pre><code>import { XmtpContext } from '../contexts/XmtpContext';\n\nconst Home = () => {\n    const [providerState] = useContext(XmtpContext);\n    const { convoMessages, client } = providerState;\n\n    return (\n        &#x3C;>\n            &#x3C;ConversationList\n                convoMessages={convoMessages}\n                setSelectedConvo={setSelectedConvo}\n            />\n        &#x3C;/>\n    )\n};\n</code></pre>\n<p>After following the example in the above mentioned documentation, we finally attain the required functionality:</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/56ckGzBW5BnSehYheh5Eqt/8f3fa3518be25d1fefdd334ef7f1a6f9/Screenshot_2023-05-10_at_1.31.53_PM.png\" alt=\"Screenshot 2023-05-10 at 1.31.53 PM\"></p>\n<h4>Conclusion</h4>\n<br /> \n<p>This completes FoxTagger, the entire project with our idea manifested into a MetaMask Snaps application, coupled with a DApp.</p>\n<p><strong>What are the next steps if you would implement this?</strong></p>\n<p>The next step would be to extend the tagging functionality by adding more analytics and using a Machine Learning model to make predictions and suggestions on how to minimize the user’s expenditure.\nThen we can aim to incorporate a transaction split feature where the user can split a fee among multiple accounts, adding on top of the request amount feature.</p>\n<p>Additionally, MetaMask Snap’s new custom UI functionality could be leveraged to provide a more pleasing user experience inside the snap.\nFinally, the snap can be extended to chains other than the Goerli Testnet network.</p>\n<p><strong>Can you tell us a little bit about yourself and your team?</strong></p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/6om9b00PGfNjh6CMwVGtui/708e691cdf4d127c9fcad36a5d347676/Screenshot_2023-05-10_at_1.17.17_PM.png\" alt=\"Screenshot 2023-05-10 at 1.17.17 PM\"></p>\n<p>From ideation to implementation, our team collaborated to generate ideas, refine them, and overcome challenges to come up with our FoxTagger Snaps.</p>\n<p>Sachin Sahu played a pivotal role in developing the frontend and functionalities of the dApp. Not only did he help integrate MetaMask Snaps with the platform, but he also worked on the demo and documentation to ensure that users have all the information they need to start using the Snap's dApp.</p>\n<p>Siddhartha G's expertise in frontend design and implementation was crucial to the development of the platform. He created intuitive frontend components and methods to present and modify data and assisted in integrating MetaMask Snaps with the dApp.</p>\n<p>Shreetesh M took charge of the backend implementation and ensured that all functions were exposed to the frontend. He implemented transaction insights and cron jobs, which helped the team integrate the backend seamlessly with the frontend.</p>\n<p>Noble Saji Mathews's contributions were instrumental in drafting the framework for transactions through on-chain messaging. He was also part of the ideation process for the tagging and transaction request system, which enhances the platform's usability and user-friendliness.</p>\n<p>Kranthi brought his unique perspective to the table by proposing the idea of the tagging system and exploring novel methods to incorporate decentralized communication. His hard work resulted in the implementation of the 'request' feature, which has revolutionized the way users interact with the Snap's dApp.</p>\n<p>Ansh Anand's expertise in frontend design and ideation process made him an invaluable member of the team. He worked on the demo video, which showcased the platform's capabilities and helped attract more users.</p>\n<p><strong>What opportunities do you see with MetaMask Snaps and the possibilities it unlocks for the Web3 space?</strong></p>\n<p>With more than 21 million active users on MetaMask, it’s kind of hard to achieve functionality that fits everybody’s needs. That's where MetaMask Snaps come in - the developer community now has more freedom to customize and personalize MetaMask based on user requirements, making it easier than ever to interact with different dApps that may be built on different blockchains or use different protocols.</p>\n<p>The benefits of MetaMask Snaps are numerous, including the ability to track expenditures over time, analyze spending, donate a small percent of each transaction to charity, request payment from clients, set up autopay for Netflix subscriptions, and much more! Integrating MetaMask with various DeFi protocols, NFT marketplaces, and social media platforms is now a breeze with MetaMask Snaps.</p>\n<p>But Snaps aren't just for complex financial transactions. Imagine going out to lunch with friends and paying with cryptocurrency - with MetaMask Snaps, splitting the bill and requesting payment from your friends is as simple as a single tap! That’s the power of MetaMask Snaps!</p>\n<p>As the Web3 space continues to evolve, MetaMask Snaps is sure to become an increasingly important tool for developers and users alike. With the potential of the metaverse on the horizon, the use cases of Snaps are truly endless.</p>\n<p><strong>Any advice you would like to share with developers keen to try MetaMask Snaps?</strong></p>\n<p>We would advise them to first go through the existing snaps on github. This will help them a lot in understanding the potential of the features provided by MetaMask Snaps, although the features look simple on paper.</p>\n<p>We would also suggest they use the existing monorepo template to start with their implementation. It has many benefits. The repo is structured very well along with linting checks and actions, developers can implement both a companion web app and a snap in one package. Moreover, the repo is always on par with the official documentation.</p>\n<p>Finally, we recommend them to post their issues or doubts on community channels and help increase their exposure to MetaMask’s Snaps.</p>\n<h3>Building with MetaMask Snaps</h3>\n<br /> \n<p>To get started with MetaMask Snaps:</p>\n<ol>\n<li>Checkout the <a href=\"https://docs.metamask.io/guide/snaps.html?utm_source=metamask&#x26;utm_medium=post&#x26;utm_campaign=2022_Sep_hackathon-winners-feature-blog-post_content_technical\">developer docs</a></li>\n<li>Install <a href=\"https://docs.metamask.io/snaps/get-started/install-flask/\">MetaMask Flask</a></li>\n<li>Check out a <a href=\"https://github.com/MetaMask/snaps-skunkworks/discussions/675\">MetaMask Snaps guide</a></li>\n<li>Stay connected with us on <a href=\"https://twitter.com/metamaskdev\">Twitter</a>, <a href=\"https://github.com/MetaMask/snaps-skunkworks/discussions\">GitHub discussions</a>, and <a href=\"https://discord.com/invite/consensys\">Discord</a></li>\n</ol>\n<p>Keep an eye out for our team at the next hackathon in an area near you! Happy BUIDLing ⚒️</p>\n<p><em>Disclaimer: MetaMask Snaps are generally developed by third parties other the ConsenSys Software.  Use of third-party-developed MetaMask Snaps is done at your own discretion and risk and with agreement that you will solely be responsible for any loss or damage that results from such activities.  ConsenSys makes no express or implied warranty, whether oral or written, regarding any third-party-developed MetaMask Snaps and disclaims all liability for third-party developed Snaps.  Use of blockchain-related software carries risks, and you assume them in full when using MetaMask Snaps.</em></p>"}},"categories":[{"contentful_id":"Jc9ZQ937JgPbuV2Xap2l7","node_locale":"it","internal":{"type":"ContentfulNewsCategory"},"name":"Sviluppatori","slug":"developers"}],"metaTitle":null,"metaDescription":null,"canonicalUrl":null,"isPrivate":false},{"contentful_id":"1caIzMGq8AvUrcdfVeHeno","node_locale":"it","internal":{"type":"ContentfulNews"},"title":"How to submit a successful grant proposal with MetaMask Grants DAO","slug":"how-to-submit-a-successful-grant-proposal-with-metamask-grants-dao","subtitle":"Learn tips from the MetaMask Grants DAO team to optimize your chances of getting a grant when applying for funding. ","image":{"title":"successful grant feature image","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/2aYa9u1VZMdFMZsTF5eD8s/2a14576033af581a1d90b9c5e46b5e68/successful_grant_feature_image.png"},"gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/2aYa9u1VZMdFMZsTF5eD8s/2a14576033af581a1d90b9c5e46b5e68/successful_grant_feature_image.png?w=248&h=165&q=80&fm=webp 248w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2aYa9u1VZMdFMZsTF5eD8s/2a14576033af581a1d90b9c5e46b5e68/successful_grant_feature_image.png?w=496&h=331&q=80&fm=webp 496w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2aYa9u1VZMdFMZsTF5eD8s/2a14576033af581a1d90b9c5e46b5e68/successful_grant_feature_image.png?w=992&h=662&q=80&fm=webp 992w","sizes":"(min-width: 992px) 992px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/9sy2a0egs6zh/2aYa9u1VZMdFMZsTF5eD8s/2a14576033af581a1d90b9c5e46b5e68/successful_grant_feature_image.png?w=992&h=662&q=80&fm=png","srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/2aYa9u1VZMdFMZsTF5eD8s/2a14576033af581a1d90b9c5e46b5e68/successful_grant_feature_image.png?w=248&h=165&q=80&fm=png 248w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2aYa9u1VZMdFMZsTF5eD8s/2a14576033af581a1d90b9c5e46b5e68/successful_grant_feature_image.png?w=496&h=331&q=80&fm=png 496w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/2aYa9u1VZMdFMZsTF5eD8s/2a14576033af581a1d90b9c5e46b5e68/successful_grant_feature_image.png?w=992&h=662&q=80&fm=png 992w","sizes":"(min-width: 992px) 992px, 100vw"}},"layout":"constrained","width":1920,"height":1281}},"publishDate":"April 28, 2023","authors":[{"name":"MetaMask","createProfilePage":null,"profileUrl":"metamask"}],"content":{"childMarkdownRemark":{"html":"<p>If you’re a developer building impactful, open experiences in web3, you might be eligible to apply for a grant to fund your project from MetaMask Grants DAO. This post outlines what <a href=\"https://metamaskgrants.org/\">MetaMask Grants DAO</a> is and how to submit a successful grant application.</p>\n<h3>What is MetaMask Grants DAO and how does it work?</h3>\n<br /> \n<p>MetaMask Grants DAO is an internal Consensys employee-led DAO that aims to foster innovation in the MetaMask ecosystem. <a href=\"https://metamask.io/news/latest/building-an-extensible-world-with-metamask-grants-dao/\">Established in October 2022</a>, the DAO places an emphasis on builders and their journey to MVP.</p>\n<p>Making MetaMask the most extensible wallet in the world requires decentralizing efforts to build out a thriving ecosystem to empower our communities. MetaMask Grants DAO not only accelerates growth for crypto-comfortable users but also aims to promote long-term adoption among crypto-curious individuals by providing multiple pathways for participation.</p>\n<p>Every ConsenSys employee can opt-in to be a Grants DAO member with equal voting rights governed by a non-transferable token. Learn more about the DAO <a href=\"https://metamaskgrants.org/\">here</a>.</p>\n<h3>How do I apply?</h3>\n<br /> \n<p>You can apply for a MetaMask grant here: <a href=\"https://consensys-software.typeform.com/to/TQ9ua2g2\">https://consensys-software.typeform.com/to/TQ9ua2g2\n</a></p>\n<p>Recipients include projects that have previously collaborated with MetaMask as well as new relationships formed as a result of the DAO.</p>\n<p>We’ll use information from a prior grant recipient, <a href=\"https://metamask.io/news/developers/metamask-grants-dao-funds-agoric-and-safeheron-with-first-round-of-grants/\">Safeheron</a> as an example in this guide.</p>\n<p>To increase your chances of being funded, make sure to keep these 3 tips in mind when filling out your application:</p>\n<h4>#1 Be specific about your project and the problem you solve</h4>\n<br /> \n<p>Make sure you’re able to describe your project clearly. What are your goals, why is it important, and how does it align with our mission? Does it fit into our <a href=\"https://metamaskgrants.org/request-for-proposals\">current wish list</a>?</p>\n<p>In Safeheron’s application, they clearly stated how their project revolved around improving MetaMask’s key management experience, specifically with a focus on helping users manage their Secret Recovery Phrase (SRP) to reduce phishing attacks while also reducing the chance of those keys being lost.</p>\n<p>This is an extremely important issue to the MetaMask team as we prioritize user security above all else.</p>\n<p>When filling out your grant application, don’t hesitate to include the following:</p>\n<ul>\n<li><strong>Data</strong>: Do you have quantitative data to illustrate the problem you’re solving?</li>\n<li><strong>Track record</strong>: What have you and your team been involved with? Have you participated in one of our hackathons? Collaborated with our team in the past? Let us know! Safeheron mentioned their previous relationship with the MetaMask and Keystone team in implementing a 2/2 MPC snap and described how a grant would fund the evolution of this into a 2/3 MPC snap.</li>\n<li><strong>Roadmap</strong>: What is your vision and what part of your roadmap and execution will our grant enable? Feel free to call out future steps, but be clear in delineating what portion of your project the grant will be funding.</li>\n</ul>\n<h4>#2 Include key milestones and a path to production</h4>\n<br /> \n<p>Including milestones, timelines, and a thorough strategy helps us evaluate the feasibility of your project. And maybe we can even fund a portion of your build, so be explicit in your milestones. Be realistic when sketching this out— what targets would you measure your productivity by? What does success look like? Does it make sense to break out your path to production by dev weeks or by milestones achieved?</p>\n<p>Milestones, for example, could look like this:</p>\n<ul>\n<li>2/2 MPC solution implemented with MetaMask Flask and Keystone hardware wallet</li>\n<li>Compatible 2/3 MPC algorithm developed</li>\n<li>Designs for the 2/3 MPC experience</li>\n<li>Integration of 2/3 MPC algorithm with Flask, Keystone, and MetaMask Mobile</li>\n<li>Security review</li>\n<li>Marketing and PR preparation</li>\n<li>Launch</li>\n</ul>\n<h4>#3 Clearly describe how the budget would be used</h4>\n<br /> \n<p>What would the funding go towards? What are some blocks you’re currently experiencing? Include cost breakdowns so there’s an understanding of where the grant could contribute best.</p>\n<p>For example, if you’re requesting funding for $35,000 how much of that will be used for development costs, security audits, marketing, etc.? We commonly see that audit fees can be a point of pressure for teams, so feel free to get an application in, even if it’s just to cover audit costs.</p>\n<h3>Making an impact</h3>\n<br /> \n<p>MetaMask Grants DAO was funded to enable and empower the developer ecosystem to keep building, innovating, and thriving. If you believe your project is making a positive impact and would benefit from a grant, we encourage you to <a href=\"https://consensys-software.typeform.com/to/TQ9ua2g2\">apply for funding!</a></p>\n<p>Keep tabs on our <a href=\"https://metamaskgrants.org/\">MetaMask Grants DAO</a> page, and stay up to date on our developer offerings on <a href=\"https://twitter.com/MetaMaskDev\">Twitter</a>. We’re looking forward to seeing what you build.</p>\n<p><em>We can’t guarantee when we will review your request or that it will get approved, but know that our team will review the application pipeline as often as we can. Thanks for being patient with us.</em></p>\n<p><em>Thank you to the Safeheron team for letting us use your application as an example in this guide.</em></p>"}},"categories":[{"contentful_id":"Jc9ZQ937JgPbuV2Xap2l7","node_locale":"it","internal":{"type":"ContentfulNewsCategory"},"name":"Sviluppatori","slug":"developers"}],"metaTitle":null,"metaDescription":null,"canonicalUrl":null,"isPrivate":false},{"contentful_id":"3lCs4rMPBRca9SYCWguYaY","node_locale":"it","internal":{"type":"ContentfulNews"},"title":"Account Abstraction: Past, Present, Future","slug":"account-abstraction-past-present-future","subtitle":"Learn about account abstraction in Ethereum—what it means and why it matters.","image":{"title":"Cover-Image@2x","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/5NqR9h49NYl7PHt5tsz1Ha/3510e8c317f5af14fe6fabcd5bb2d8de/Cover-Image_2x.jpg"},"gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/5NqR9h49NYl7PHt5tsz1Ha/3510e8c317f5af14fe6fabcd5bb2d8de/Cover-Image_2x.jpg?w=480&h=320&q=80&fm=webp 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/5NqR9h49NYl7PHt5tsz1Ha/3510e8c317f5af14fe6fabcd5bb2d8de/Cover-Image_2x.jpg?w=960&h=640&q=80&fm=webp 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/5NqR9h49NYl7PHt5tsz1Ha/3510e8c317f5af14fe6fabcd5bb2d8de/Cover-Image_2x.jpg?w=1920&h=1280&q=80&fm=webp 1920w","sizes":"(min-width: 1920px) 1920px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/9sy2a0egs6zh/5NqR9h49NYl7PHt5tsz1Ha/3510e8c317f5af14fe6fabcd5bb2d8de/Cover-Image_2x.jpg?w=1920&h=1280&fl=progressive&q=80&fm=jpg","srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/5NqR9h49NYl7PHt5tsz1Ha/3510e8c317f5af14fe6fabcd5bb2d8de/Cover-Image_2x.jpg?w=480&h=320&fl=progressive&q=80&fm=jpg 480w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/5NqR9h49NYl7PHt5tsz1Ha/3510e8c317f5af14fe6fabcd5bb2d8de/Cover-Image_2x.jpg?w=960&h=640&fl=progressive&q=80&fm=jpg 960w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/5NqR9h49NYl7PHt5tsz1Ha/3510e8c317f5af14fe6fabcd5bb2d8de/Cover-Image_2x.jpg?w=1920&h=1280&fl=progressive&q=80&fm=jpg 1920w","sizes":"(min-width: 1920px) 1920px, 100vw"}},"layout":"constrained","width":1920,"height":1280}},"publishDate":"April 25, 2023","authors":[{"name":"Emmanuel Awosika","createProfilePage":null,"profileUrl":null}],"content":{"childMarkdownRemark":{"html":"<p>Even with a bear market raging on, few people doubt crypto is here to stay—wallets like MetaMask already boast millions of users, for example. But, still, the question remains: “How do we go about bringing the next billion users to web3?”</p>\n<p>Depending on who you ask, answers to the question will vary. But everyone agrees on some points—particularly the need to improve the experience of users interacting with blockchain applications. Without making web3 more user-friendly, people have little incentive to switch from the web2 apps they use every day.</p>\n<p>“Account abstraction” is a proposal seeking to improve user interactions with Ethereum—one that’s increasingly the subject of many discussions in the crypto community. You may, however, be thinking: “What exactly is account abstraction and why should I care about it?”</p>\n<p>This article is designed to help you make sense of account abstraction by putting its past, present, and future into context. We’ll be answering every question you may have about the topic—specifically, the who, what, why, how, and when of account abstraction.</p>\n<p>A quick summary of key talking points:</p>\n<ul>\n<li>Programmable, self-custodial accounts (“smart accounts”) can reduce the friction of onboarding new users to the web3 ecosystem. However, limitations imposed by Ethereum’s design prevent broad adoption and use of smart accounts.</li>\n<li>Account abstraction introduces significant changes that pave the way for wide adoption of trustless, censorship-resistant smart accounts. Different approaches to implementing account abstraction are being considered—each featuring unique benefits and tradeoffs.</li>\n<li>MetaMask is supporting adoption of account abstraction through its permissionless innovation platform: <a href=\"https://metamask.io/snaps/\">MetaMask Snaps</a>. With MetaMask Snaps, developers can extend MetaMask to bring the benefits of account abstraction to crypto users around the world.</li>\n</ul>\n<h3>What is account abstraction?</h3>\n<br />\n<p>Like any other new concept in web3, account abstraction can be hard to define. Nevertheless, we can better understand it by first unpacking the various terms relevant to the discussion of account abstraction in Ethereum:</p>\n<ol>\n<li>\n<p><strong>Abstraction</strong> <em>(n)</em>: A (fairly complicated) term in computer science that roughly means hiding information about a system or application so it can be used with less knowledge of the processes running in the background. Also defined as <em>“the process of hiding the complexity of a system by providing an interface that eases its manipulation.”</em></p>\n</li>\n<li>\n<p><strong>Account</strong> <em>(n)</em>: A user's representation on the blockchain that can send or receive transactions and interact with other on-chain accounts. Ethereum has two types of accounts: <strong>Externally Owned Accounts</strong> (EOAs) and <strong>contract accounts</strong> (aka “smart contracts”).</p>\n</li>\n</ol>\n<p>2a. <strong>Externally Owned Accounts (EOA)</strong>: Ethereum accounts generated using wallet software (like MetaMask) and managed by a cryptographic pair of public and private keys. An EOA is “active” (it can initiate transactions and pay gas fees for EVM execution). However, it is limited to executing basic operations—like sending Ether or interacting with contracts.</p>\n<p>2b. <strong>Contract accounts</strong>: Ethereum accounts deployed as a <a href=\"https://ethereum.org/en/developers/docs/smart-contracts/\">smart contract</a> and controlled by logic written in code (instead of a private key). A contract account is “passive”: it can only send <a href=\"https://ethereum.org/en/developers/docs/transactions/\">transactions</a> in response to a transaction from an EOA and cannot pay gas fees. It is, however, <em>programmable</em> and can execute arbitrary logic depending on code stored at the address.</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/1647oIfQlB2tVf0kvtOEzn/459f3aa5f4d67de4dac8fd150bd10bae/new_EOAs_vs_contract_accounts_2x.png\" alt=\"new EOAs vs contract accounts@2x\"></p>\n<ol start=\"3\">\n<li><strong>Wallet</strong> <em>(n)</em>:  An interface for managing the funds in your Ethereum account—how a wallet operates depends on what type of account it is linked with. An <em>EOA-based wallet</em> like MetaMask requires a private key to authorize transactions. Meanwhile, a <em>smart contract wallet</em> is linked to a contract account and can use arbitrary logic to authorize a transactions (eg. using a <a href=\"https://www.coindesk.com/learn/what-is-a-multisig-wallet/\">multisignature scheme</a>).</li>\n</ol>\n<p>With these definitions out of the way, we can now define account abstraction.</p>\n<p><strong>Defining account abstraction</strong></p>\n<p>Account abstraction is a proposal to increase flexibility in the <em>management</em> and <em>behavior</em> of Ethereum accounts. We achieve this by introducing <strong><em>account contracts</em></strong>: special-purpose smart contracts that define and manage a user’s Ethereum account (now called a <em>smart account</em>).</p>\n<p>With account abstraction, you can enjoy programmable access to funds by using a smart contract wallet instead of relying solely on private keys for security. This is possible because your smart account can have custom rules for spending coins and transferring assets.</p>\n<p>So, how does “abstraction” fit into all of this?</p>\n<p>From a network-level perspective, “account abstraction” means the details of account types are <em>invisible</em> to the Ethereum protocol. Every account (including self-custodial accounts) is simply a smart contract, and users are free to determine how individual accounts are managed and operated.</p>\n<p>From a user-level perspective, “account abstraction” means certain technical details about interacting with Ethereum accounts are concealed behind higher-level interfaces. This improves wallet designs and significantly reduces the complexity of using web3 applications.</p>\n<p>This clarification is necessary because confusion around account abstraction comes from not knowing (a) <em>what</em> is being abstracted and (b) <em>where</em> the abstraction occurs. Accounts aren’t necessarily abstracted from users (even if they are abstracted from the protocol). You still have a wallet address to receive funds and a signing key to ensure only you can spend those funds.</p>\n<p>From your perspective, account abstraction is more like using a smart account that abstracts some details about interacting with the blockchain. For context, this is what interacting with a dapp looks like from the perspective of a first-time user:</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/5GwjBrBDSxaBqoPLzgY9Ah/436d6837761be954dc756628819a338f/Workflow_of_creating_an_EOAand_interacting_with_dapp_2x.png\" alt=\"Workflow of creating an EOA and interacting with dapp@2x\"></p>\n<p>With account abstraction, wallet developers can create systems that handle these processes in the background and simplify the experience of using web3 (TL;DR: <a href=\"https://mirror.xyz/sylve.eth/A8VnNvBVbc0aXmW2FlG58ysI8oZUnH0HGwwjIsQGHUk\">wallets become “invisible”</a>). Some use cases (which we’ll expand on later) include: eliminating the need for you to store seed phrases/private keys, pay gas for transactions, or even set up an on-chain account by yourself.</p>\n<h3>The benefits of account abstraction</h3>\n<br />\n<p>As mentioned previously, account abstraction removes most of the friction associated with using web3 wallets and interacting with dapps. This brings web3 closer to the ideal of web2 where all users—both novice and experienced—can benefit from the same degree of flexibility, security, and ease of use.</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/7qUFagETU8YLBUke3Rphls/6cb508eb04098321458d0b44a55a19e4/Screenshot_2023-04-25_at_1.00.34_PM.png\" alt=\"Screenshot 2023-04-25 at 1.00.34 PM\"></p>\n<p>In particular, account abstraction has <em>huge</em> implications for the future of self-custody. With the features provided by account contracts, using a web3 wallet will feel like using a bank account or application without having to trust the bank.</p>\n<p>In subsequent sections, we’ll touch on the different dimensions of account abstraction and discuss how they improve the experience of using Ethereum. Specifically, we’ll talk about <em>signature abstraction, fee abstraction</em>, and <em>nonce abstraction</em>.</p>\n<h4>Signature abstraction</h4>\n<br />\n<p>Today, transactions from your EOA must have a signature generated by the account’s private key using the <a href=\"https://ethereum.org/en/glossary/#ecdsa\">Elliptic curve digital signature algorithm</a> (ECDSA) to be valid. This gives most EOAs a simple security model: funds are safe if private keys remain in the user’s possession. But it also has several limitations:</p>\n<ol>\n<li>\n<p><strong>EOAs are notoriously difficult to secure, particularly as malicious actors are always evolving new ways of compromising private keys.</strong> At MetaMask, we’ve seen firsthand the challenges that phishing, social engineering, spoofing, malware injection, and similar attacks pose to user security in web3.</p>\n</li>\n<li>\n<p><strong>Self-custody may feel like an extreme sport.</strong> Unlike your regular bank account, you cannot “recover” an EOA wallet if the seed phrase/private key is lost. This creates a challenge for new users who must grapple with the implications of completely losing assets held in Ethereum accounts without any recourse.</p>\n</li>\n</ol>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/3LB2FZPuruKr1qh0Lwm3Of/d9b890df197a7735eb040476fe4a4826/Security-related_drawbacks_of_EOAs_2x.jpg\" alt=\"Security-related drawbacks of EOAs@2x\"></p>\n<p><em>Signature abstraction</em> solves these problems by removing ECDSA signatures as the default authorization mechanism for non-custodial accounts. Rather, users are permitted to define custom rules for authorizing wallets to initiate transactions. Or, said another way, <em>you</em> can decide what it means for a transaction to be valid.</p>\n<p>Implementing signature abstraction opens up possibilities for more advanced authorization schemes. This way, using your web3 wallet will feel similar, if not better than, a web2 banking application. Here are some use cases:</p>\n<ol>\n<li>\n<p><strong>Transaction limits:</strong> A wallet linked to your smart account can reject a transaction (or ask for additional authorization) if the value exceeds a preset limit. Sounds familiar? It should—banks do it already to protect your accounts and credit cards against fraud, unauthorized usage, and other reasons related to security.</p>\n</li>\n<li>\n<p><strong>Multi-party approvals:</strong> You could delegate partial control of your account to trusted parties aka “guardians”. Guardians can be friends, family members, service providers, or even a separate device that you own (eg. a hardware wallet). Thus you can enable web2-style  multi-factor authentication (MFA) for your wallet by requiring guardian approval for transactions that withdraw funds from your smart account.</p>\n</li>\n</ol>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/1C328YvdxnJqZQu6louNxA/1423ed9a1dc6d9b037a3a3754d3b770c/Multi-factor_authentication_for_web3_wallets_2x.jpg\" alt=\"Multi-factor authentication for web3 wallets@2x\"></p>\n<ol start=\"3\">\n<li>\n<p><strong>Key rotation and revocation:</strong> With smart accounts, you can generate a new signing key if the previous key was lost or stolen. For additional security, you can have guardians freeze your account during the recovery process and demand approval for key rotation/revocation flows (ie. <a href=\"https://vitalik.ca/general/2021/01/11/recovery.html\">social recovery</a>). This is similar to how you can freeze your credit card if it’s misplaced/stolen without losing access to your bank account</p>\n</li>\n<li>\n<p><strong>Trusted sessions:</strong> Do you dislike having to approve every action when interacting with a dapp in your browser? Great! You can create special <a href=\"https://mirror.xyz/matchboxdao.eth/VXOvLKIvfXHP-cusKHw55zqlHpvvWwzh_fqm6j48Yek\">“session keys”</a> with your smart account for dapps to automatically sign transactions for a specific period. This means you can interact with dapps—playing a blockchain game, say—without getting pestered with wallet pop-ups.</p>\n</li>\n</ol>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/1PRJPrmFxXj6qq5Nc1OTxK/740e57d3dc380c611de0557757896df2/Using_a_dapp_with_session_keys_2x.jpg\" alt=\"Using a dapp with session keys@2x\"></p>\n<p>At a high level, session keys are based on a smart contract that controls interactions between your account and a dapp. You <em>always</em> have control of session keys and can regulate the dapp’s signing authority, such as how much it can deduct from your balance or what functions it can call.</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/7zePDQiZkvUiXCtmb7ugm3/90bde4a9e861f361b7ecba3348648f13/How_a_user____approves____a_trusted_session_2x.jpg\" alt=\"How a user “approves” a trusted session@2x\"></p>\n<ol start=\"5\">\n<li><strong>Automatic payments:</strong> Similar to the idea of session keys, you can approve service providers to “pull” funds from your smart account (subject to predefined rules). This makes it possible to <a href=\"https://usa.visa.com/solutions/crypto/auto-payments-for-self-custodial-wallets.html\">set up recurring payments and subscriptions</a> with your web3 wallet. Can you imagine paying for a Netflix subscription or utility bill using your Ethereum account?</li>\n</ol>\n<h4>Fee abstraction</h4>\n<br />\n<p>Currently, every Ethereum transaction must have a “gas fee” denoting how much the sending EOA is willing to pay for execution. Gas fees are denominated in Ether, Ethereum’s native token. This creates problems, especially for new users who now need to source for ETH before sending their transaction.</p>\n<p>Account abstraction doesn’t eliminate the need to pay gas fees, but it abstracts away details of how and when users choose to pay for gas (<strong>fee abstraction</strong>). For example, account abstraction enables “sponsored transactions” where another account covers the cost of gas for a user’s transaction. Some benefits of sponsored transactions:</p>\n<ol>\n<li><strong>Non-ETH gas payments:</strong> Have you ever wished you could pay for transaction fees with ERC-20 tokens in your wallet? With sponsored transactions, you can get a <a href=\"https://hackernoon.com/what-is-a-transaction-relayer-and-how-does-it-work-bd1q3ywa\">relayer</a> with ETH to front the cost for your transactions and pay them back in another token like DAI or USDC.</li>\n</ol>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/5YjYkflfhpoftlmlOLOWnx/6de15e5d4da285765903f3dbede68260/Normal_transactions_vs_ETH-less_transactions_2x.jpg\" alt=\"Normal transactions vs ETH-less transactions@2x\"></p>\n<ol start=\"2\">\n<li><strong>Gasless transactions:</strong> Dapp developers can sponsor transactions and minimize onboarding friction for new Ethereum users. You could essentially be using web3 apps without knowing anything about “gas” and enjoy the same one-click experience that web2 apps provide.</li>\n</ol>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/CMzGsERQ4c2NZYjpLkbFb/d92e569d2cf6034b7bb164d576932e80/Normal_transactions_vs_gasless_transactions_2x.jpg\" alt=\"Normal transactions vs gasless transactions@2x\"></p>\n<ol start=\"3\">\n<li><strong><a href=\"https://etherspot.io/blog/easily-onboard-dapp-users-with-web3-social-logins/\">Social logins</a></strong>: A dapp might deploy a contract wallet on your behalf, solving the pain point of setting up a wallet before sending on-chain transactions. The great part? Wallets can use authentication infrastructure (eg. <a href=\"https://web3auth.io/\">Web3Auth</a> and <a href=\"https://webauthn.guide/\">WebAuthn</a>) to enable users to create web3 accounts with existing credentials like an <a href=\"https://archive.nervos.org/blog/joyid-a-passwordless-web3-wallet-that-will-accelerate-the-mass-adoption-for-nervos\">email address</a> or Facebook/Twitter account.</li>\n</ol>\n<h4>Nonce abstraction</h4>\n<br />\n<p>Smart accounts on Ethereum have another special feature: transaction batching. With batched transactions, you can combine multiple operations into a single on-chain transaction and reduce the cost and complexity of interacting with dapps. Here’s why transaction batching is important:</p>\n<p>Your EOA stores a value known as a “<a href=\"https://support.metamask.io/hc/en-us/articles/7417499333531-How-to-customize-a-transaction-nonce\">nonce</a>” that shows how many transactions you’ve sent (think of it like a transaction counter). A new transaction must strictly increase the nonce by 1 to be valid—a rule that prevents someone else from “replaying” the same transaction to steal your funds (yup, <a href=\"https://www.cryptopolitan.com/what-is-replay-attack-on-ethereum-nfts/\">it can happen</a>).</p>\n<p>But there’s a catch. Nonces force you to process transactions in first-in-first-out (FIFO) style. Imagine you have two transactions (A and B) with nonce of 0 and 1, respectively. Here, you’d send transaction A and wait for a confirmation (of its execution) before sending B.</p>\n<p>Sending B while A is still pending would simply have the former rejected since the nonce would be higher than the prescribed range (EOA’s current nonce + 1). In fact, this is a big reason you have “<a href=\"https://support.metamask.io/hc/en-us/articles/360015489251\">stuck transactions</a>\" when using a wallet.</p>\n<p>Nonce abstraction allows you to create custom replay protection mechanisms (instead of the Ethereum protocol enforcing strict ordering on transactions). For example, you can have a nonce scheme that permits processing multiple transactions in parallel. This would solve the problem of clogged/stuck transactions and significantly improve interactions with dapps.</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/1m3tAeocanxSBS5ulnj9QT/7fd20c73b11cf64422fd55f649ccb3ed/Nonce_abstraction_2x.jpg\" alt=\"Nonce abstraction@2x\"></p>\n<p>That said, nonce abstraction is difficult to implement in practice and can potentially break certain invariants critical to security and UX, such as transaction hash uniqueness). This is where transaction batching comes into the picture:</p>\n<p>Since smart accounts can process multiple transactions at once, the need for complex nonce abstraction schemes largely disappears. Going back to the previous example, we can imagine transaction A and B are merely parts of a single hypothetical operation like swapping assets on Uniswap:</p>\n<ul>\n<li><strong>Transaction A</strong>: Approve the Uniswap contract to access your tokens</li>\n<li><strong>Transaction B</strong>: Complete the token swap</li>\n</ul>\n<p>With transaction batching, you can combine the approve-and-swap workflow into one transaction. The result: lower gas fees and reduced wait-times when using dapps. Cool, eh?</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/6F4neIpP9dxlY1jPGGpdFD/b2d33ded2dad9610b4b6b1859eccac36/How_transaction_batching_improves_the_workflow_of_using_a_DeFi_dapp_2x.jpg\" alt=\"How transaction batching improves the workflow of using a DeFi dapp@2x\"></p>\n<h3>The “how” of account abstraction</h3>\n<br />\n<p>At this point, you already know account abstraction allows us to add custom functionality and authorization policies to user accounts. But we really haven’t talked about how any of that is possible. This section discusses different approaches to implementing abstraction on Ethereum (if that doesn’t sound too appealing, feel free to skip to the next section).</p>\n<p>There are two generally accepted ways of achieving account abstraction: (a) letting EOAs execute EVM code and (b) allowing smart contracts to initiate transactions. Hence, you’ll find that many account abstraction proposals either want EOAs to behave as smart contracts or contract accounts to act as EOAs.</p>\n<p>This naturally brings up some questions:</p>\n<ul>\n<li>“How exactly are these approaches different?”</li>\n<li>“Why does it matter which approach we adopt?\"</li>\n</ul>\n<h4>Account abstraction: Approach #1 (Upgrading EOAs to execute code)</h4>\n<br />\n<p>By giving EOAs the ability to execute code, we can add complex functionality to user-controlled accounts. This supercharges EOAs and transforms them into smart accounts, setting the stage for native account abstraction. Importantly, this approach allows you to enjoy the benefits of a programmable wallet <em>without</em> incurring the cost of deploying a new contract account.</p>\n<p>Some approaches to upgrading EOAs to contract accounts involve treating the data payload of EOA transactions as EVM bytecode. Others involve delegating control of an EOA to a special account contract that makes transactions on the EOA’s behalf. In the latter case, the same account contract can be reused by different EOAs, reducing the need to have different contract wallet implementations.</p>\n<p>Below is an infographic showing different account abstraction proposals in the “make EOAs programmable” camp, including their key features and status of implementation:</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/26hqNr3Dd7uLfnNMd94Pmk/95152174f52a9d99f988aa1b3fdb285d/Account_abstraction_proposals__I__2x.jpg\" alt=\"Account abstraction proposals (I)@2x\"></p>\n<h4>Account abstraction: Approach #2 (Upgrading smart contracts)</h4>\n<br />\n<p>With this approach, we upgrade contract accounts so they can approve transactions and pay gas fees (just like EOAs). This provides another route to achieving account abstraction by introducing “supercharged contracts” that can act as EOAs (ie. account contracts). Plus, it solves a pressing problem in Ethereum: lack of support for contract wallets at the protocol level.</p>\n<p>You see—some smart contract wallets already exist today and provide many benefits of account abstraction. But using these wallets can be incredibly difficult because Ethereum treats smart contracts as “second-class citizens” and requires all transactions to start from an EOA.</p>\n<p>This limitation also means smart contract wallets lack the trustlessness and self-custodial nature of EOA wallets like MetaMask. For context, let’s consider the flow of creating and using a smart contract wallet:</p>\n<ul>\n<li>Deploy a new contract account</li>\n<li>Send transactions to call functions on your wallet contract</li>\n</ul>\n<p>The problem is already obvious: you now need to manage <em>two</em> wallets. Why? An EOA (pre-funded with ETH) needs to cover the costs of deploying the wallet and calling necessary functions afterwards.</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/5XK58qVenLHV7UGNNKRdVa/91dcd7ace7322c1365848946694aea3a/Interacting_with_a_smart_contract_wallet_2x.jpg\" alt=\"Interacting with a smart contract wallet@2x\"></p>\n<p>Enter relayers: EOAs that can pay for your wallet’s transactions in exchange for a fee. Smart contract wallet providers will often run relayers to subsidize transactions for users. That is, the relayer pays ETH from its wallet to cover your transaction fees and recoups the costs by charging you elsewhere—perhaps in fiat or some other token.</p>\n<p>This system works fine in most cases: you can create and use a contract wallet without worrying too much about the intricacies of paying for gas. However, it also requires <em>trusting</em> the relayer not to censor or tamper with your transactions.</p>\n<p>But this is crypto, and we like <em>trustless</em> systems.</p>\n<p>By letting contract accounts approve transactions and pay gas fees, account abstraction makes the process of creating and using a smart contract wallet more trustless. To be specific, it allows anyone that runs a relayer to execute transactions on your behalf. You just need to sign a message approving the relayer to deduct funds from your wallet balance after executing the transaction:</p>\n<p>Now the flow of using a smart contract wallet looks somewhat different:</p>\n<ul>\n<li>Deploying a wallet contract? By <a href=\"https://blog.goodaudience.com/one-weird-trick-to-fix-user-on-boarding-d54b7ff9d711\">using counterfactual deployment workflows</a>, you can send funds to the contract account <em>before</em> deploying it and pay a relayer’s EOA for deployment costs from your wallet’s balance.</li>\n<li>Interacting with a wallet contract? Sign a message off-chain and have a relayer make the call to your account contract. The message will include an instruction for the account contract to refund the relayer’s gas costs.</li>\n</ul>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/em7IHsWzZOfVexI1E38KT/da6a12273d0d8284d58454cae259c3e3/Interacting_with_a_smart_contract_wallet_via_a_relayer_2x.jpg\" alt=\"Interacting with a smart contract wallet via a relayer@2x\"></p>\n<p>This idea of enabling <em>trustless</em> and <em>censorship-resistant</em> smart accounts underpins many account abstraction proposals in this category. For example, ERC-4337—the most popular account abstraction proposal yet—decentralizes relayers by introducing an alternate mempool where users can submit contract wallet transactions for processing.</p>\n<p>In this case, relayers (called “bundlers”) can compete to execute smart account transactions, reducing the risk of censorship or over-reliance on wallet providers. Below is an infographic showing different account abstraction proposals in the “give smart contracts EOA features” camp, including their key features, and status of implementation:</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/5npUM2AWmg9l8iueDbkp1s/5f94b1a08360e2eca6dd253336aa5edc/Account_abstraction_proposals__II__2x.jpg\" alt=\"Account abstraction proposals (II)@2x\"></p>\n<h3>On the future of account abstraction</h3>\n<br />\n<p>Years after Vitalik Buterin <a href=\"https://blog.ethereum.org/2015/07/05/on-abstraction\">first introduced the concept</a>, there’s still some disagreement about the best way to implement account abstraction. For example, implementing <a href=\"https://eips.ethereum.org/EIPS/eip-3074\">EIP-3074</a> and <a href=\"https://eips.ethereum.org/EIPS/eip-5003\">EIP-5003</a> would enable existing EOAs (including MetaMask users) to upgrade to smart accounts. But these proposals require a hard fork which, given the community’s focus on more pressing upgrades, seems infeasible for now.</p>\n<p>In contrast, <a href=\"https://eips.ethereum.org/EIPS/eip-4337\">EIP-4337</a> has received broad support as it implements account abstraction without requiring large-scale changes to the Ethereum protocol. But for users currently using EOA-based wallets, it means having to move assets from an EOA to a newly deployed contract account—a potentially complex and costly process, given high gas fees on Ethereum today.</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/J4Bls1oUe5cR34hpklAvM/5bdffbc407331560ab957519c2cf3ebe/account-abstraction-meme.jpg\" alt=\"account-abstraction-meme\"></p>\n<p>At MetaMask, we believe account abstraction is key to providing a seamless onboarding experience for new web3 users. We also know that EOAs cannot guarantee crypto’s adoption (“The next billion users won’t write 12 words on a paper,” as Ethereum Foundation researcher Yoav Weiss colorfully puts it.).</p>\n<p>As such, we have begun thinking of ways to deliver the benefits of account abstraction without compromising on the MetaMask wallet users know and love. Part of this effort includes turning to <a href=\"https://metamask.io/snaps/\">MetaMask Snaps</a>—the permissionless innovation platform that allows developers to build custom features on top of existing MetaMask infrastructure.</p>\n<p>Using Snaps, developers can extend the functionality of your MetaMask wallet to support different account abstraction use cases. From <a href=\"https://www.youtube.com/watch?v=NBQEtLjN84E\">session keys</a> to <a href=\"https://metamask.io/news/developers/aa-snap-democratizing-account-abstraction/\">complete smart account integrations</a> built with MetaMask—all built with Snaps—we have seen developers rise to the challenge of using MetaMask to democratize access to account abstraction for users.</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/599jxdWzaS6iCp9r44dJ1W/dada164248dd55f32ce7262fbbc652c8/MetaMask_loves_Account_Abstraction_2x.jpg\" alt=\"MetaMask loves Account Abstraction@2x\"></p>\n<h4>“Don’t let perfect be the enemy of good.” — Voltaire</h4>\n<br />\n<p>The current account abstraction proposal—even if slightly imperfect—is a giant step towards achieving trustless, censorship-resistant smart accounts on Ethereum and deserves enough support. To quote one of our own, Taylor Monahan, “A shipped half-solution is still better than an unshipped perfect solution.”</p>\n<p>Which is why our next article on the topic of account abstraction will take the form of a deep dive into the details of ERC-4337. Importantly, we’ll discuss how web3 developers can start building the future of account abstraction and onboard the next billion users—one line of code at a time—with MetaMask.</p>\n<p>Stay tuned!</p>\n<p><em>Special thanks to Patrick McCorry, Simon Brown, Mirko Garozzo, Christian Montoya, Oliver Renwick, and Megan Dias for feedback on earlier drafts of this article. My appreciation also goes out to Clarissa Watson and Francesco Andreoli who provided guidance and support in the early stages of the project.</em></p>"}},"categories":[{"contentful_id":"3tE0tpmPMGsXezpOhKyWGO","node_locale":"it","internal":{"type":"ContentfulNewsCategory"},"name":"Novità","slug":"latest"},{"contentful_id":"Jc9ZQ937JgPbuV2Xap2l7","node_locale":"it","internal":{"type":"ContentfulNewsCategory"},"name":"Sviluppatori","slug":"developers"}],"metaTitle":null,"metaDescription":"Exploring Account Abstraction: Key Concepts & Applications","canonicalUrl":null,"isPrivate":false},{"contentful_id":"3tC48HqGCqzdwFDmIBJL7f","node_locale":"it","internal":{"type":"ContentfulNews"},"title":"CoinChoice Snap: Top Up Gas With Any Currency","slug":"coinchoice-snap-top-up-gas-with-any-currency","subtitle":"An ETHDenver Hackathon Winner ","image":{"title":"Snaps Spotlights Feature Images","description":"","file":{"url":"//images.ctfassets.net/9sy2a0egs6zh/153GRVA1VDu9vHQwC8g8Rx/39664dbd3833543b8d1a3072e04086ff/Snaps_Spotlights_Feature_Images.png"},"gatsbyImageData":{"images":{"sources":[{"srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/153GRVA1VDu9vHQwC8g8Rx/39664dbd3833543b8d1a3072e04086ff/Snaps_Spotlights_Feature_Images.png?w=270&h=180&q=80&fm=webp 270w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/153GRVA1VDu9vHQwC8g8Rx/39664dbd3833543b8d1a3072e04086ff/Snaps_Spotlights_Feature_Images.png?w=540&h=360&q=80&fm=webp 540w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/153GRVA1VDu9vHQwC8g8Rx/39664dbd3833543b8d1a3072e04086ff/Snaps_Spotlights_Feature_Images.png?w=1080&h=720&q=80&fm=webp 1080w","sizes":"(min-width: 1080px) 1080px, 100vw","type":"image/webp"}],"fallback":{"src":"https://images.ctfassets.net/9sy2a0egs6zh/153GRVA1VDu9vHQwC8g8Rx/39664dbd3833543b8d1a3072e04086ff/Snaps_Spotlights_Feature_Images.png?w=1080&h=720&q=80&fm=png","srcSet":"https://images.ctfassets.net/9sy2a0egs6zh/153GRVA1VDu9vHQwC8g8Rx/39664dbd3833543b8d1a3072e04086ff/Snaps_Spotlights_Feature_Images.png?w=270&h=180&q=80&fm=png 270w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/153GRVA1VDu9vHQwC8g8Rx/39664dbd3833543b8d1a3072e04086ff/Snaps_Spotlights_Feature_Images.png?w=540&h=360&q=80&fm=png 540w,\nhttps://images.ctfassets.net/9sy2a0egs6zh/153GRVA1VDu9vHQwC8g8Rx/39664dbd3833543b8d1a3072e04086ff/Snaps_Spotlights_Feature_Images.png?w=1080&h=720&q=80&fm=png 1080w","sizes":"(min-width: 1080px) 1080px, 100vw"}},"layout":"constrained","width":1920,"height":1280}},"publishDate":"April 24, 2023","authors":[{"name":"MetaMask","createProfilePage":null,"profileUrl":"metamask"}],"content":{"childMarkdownRemark":{"html":"<p><a href=\"https://metamask.io/snaps/\">MetaMask Snaps</a> is the roadmap to making MetaMask the most extensible wallet in the world. As a developer, you can bring your features and APIs to MetaMask in totally new ways. Web3 developers are the core of this growth and this series aims to showcase the novel MetMask Snaps being built today.</p>\n<h3>CoinChoice Snap</h3>\n<br /> \n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Dx1SGHAqFlY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n<br /> \n<p><strong>Snap Repo</strong>: <a href=\"https://github.com/coinchoice/coinchoice/\">https://github.com/coinchoice/coinchoice/</a></p>\n<p><strong>Why did you build it?</strong></p>\n<p>CoinChoice was developed out of a small and tedious yet widely common problem whereby a Web3 user may own a wallet with tokens of value but no gas currency to perform any transactions.</p>\n<p>This problem is highlighted for users with fractionalized liquidity. A user managing multiple wallets and engaging opportunities across blockchain ecosystems will find themselves splitting their gas tokens across each of their wallets, reserving capital that would otherwise be for their investments in order to facilitate their digital assets and transactions. Beyond gas management, tokens transferred to a network where gas isn’t owned require the user to obtain gas before any further actions can be taken. Typically this involves the user accessing a Centralised Exchange to obtain and withdraw gas – subjecting the user to CEX withdrawal fees.</p>\n<p>Fundamentally, the experience is flawed. There should not be a dependency on centralised exchanges for users to access Web3. Users should not have to worry about managing their gas and instead should be able to simply interact with decentralised systems. This is not to say that gas should not be required. Gas serves a fantastic purpose of rewarding operators of a network, as well as preventing spam/ddos. Gas should simply be more flexible. If a dApp or game developer has a native token, this token should suffice as a currency to pay for gas.</p>\n<p>With this philosophy in mind, CoinChoice was developed.</p>\n<p>CoinChoice lives within the user’s browser, supplementing every transaction with the ability to manage gas in a currency that the user desires. If the User prefers to hold USDC over ETH, then gas can be paid in USDC.</p>\n<p>CoinChoice’s MetaMask Snap further complements the experience. Directly within the MetaMask Browser Extension, users can top up their ETH in exchange for their chosen gas currency. This turns MetaMask into a solution that replaces the visit to a Centralised Exchange, consolidating and simplifying the Web3 experience, and enabling new Web3 users to familiarise themselves with a subset of systems without becoming overwhelmed by the growing abundance of services and platforms.</p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/3WXvTGgbRilfA2XVPGUQIF/bfad2a54fc8e8ba22e9005958cadcd5f/team_1.jpeg\" alt=\"team 1\"></p>\n<p><strong>Walk us through the technical implementation?</strong></p>\n<p>CoinChoice is a MetaMask &#x26; Browser Extension that gives you choice over which coins are used to pay gas.</p>\n<h4>Packages</h4>\n<br /> \n<ul>\n<li>\n<p><code>backend</code>: A NestJS Web Server responsible for</p>\n<ul>\n<li>simulating transactions against the Tenderly API and 0x Quote API to yield gas estimates in chosen currency</li>\n<li>receive and syndicate messages between the client’s Metamask Snap and Browser Extension</li>\n<li>receive meta-tx to forward to relayer contracts</li>\n</ul>\n</li>\n<li>\n<p><code>browser-extension</code>: A Browser Extension powered by the Plasmo Framework</p>\n<ul>\n<li>intercepts RPC requests to MetaMask in order to inject swaps to ETH for gas financing</li>\n<li>offers a popup where Gas Coin can be selected</li>\n<li>offers a popup for Token management powered by Cypher Onboarding SDK</li>\n<li>all data is submitted to backend service where Blockchain Interactions and Simulations are managed</li>\n</ul>\n</li>\n<li>\n<p><code>contracts</code> : Smart Contracts that power relaying meta-transactions to facilitate swaps on 0x Protocol.</p>\n</li>\n<li>\n<p><code>frpc</code>: A package to leverage the Fluence Network’s fRPC Gateway</p>\n</li>\n<li>\n<p><code>meta-mask</code>: A package that contains a React.js Site and assocated MetaMask Snap.</p>\n<ul>\n<li>The Snap is responsible for offering ETH Swaps directly within the MetaMask interface, by showing a message “Need ETH?”</li>\n<li>The Snap works by making a request to the backend so that a message is forwarded to the client’s browser-extension, enabling an experience where the MetaMask Snap can initiate the Browser Extension</li>\n<li>The associated Site is used to enable MetaMask Snap Installation</li>\n</ul>\n</li>\n</ul>\n<h4>Technical Setup</h4>\n<br /> \n<p>CoinChoice is browser extension that supplements transactions with the opportunity to top up gas with a chosen currency.</p>\n<p>The browser extension is designed to prompt the user to pay gas in their selected currency prior to each transaction.</p>\n<p>If a user accepts, a meta-transcation is captured to convert an estimated amount of the chosen token to ETH.</p>\n<p>This meta-transaction is forwarded to the backend service that forwards it to the relayer Smart Contract where it is executed.</p>\n<p>Once the meta-transaction is settled, the user’s original transaction is prompted and accessible due to the deposit of the appropriate amount of gas.</p>\n<p>The MetaMask Snap is designed to forward a transaction that would otherwise be isolated within the MetaMask extension to the CoinChoice Extension.\nIt does this by</p>\n<ol>\n<li>submitting a request with the transaction details to the backend serivce</li>\n<li>the backend will then forward the transaction data to the browser extension over a websocket connection</li>\n<li>once the browser extension receives this websocket message, it initiates its flow of topping up an automatically estimated amount of gas in exchange for a selected currency.</li>\n</ol>\n<h4>Backend as a Message Bus</h4>\n<br /> \n<p>CoinChoice took the approach of using a backend as a message bus between the two frontend components due to the sandboxed nature of the MetaMask Snap.</p>\n<p>The Snap code isolation prevents communication to frontend components that reside in contexts outside of the MetaMask extension.</p>\n<p>However, Snaps can facilitate server-side requests, and therefore a backend service capable of managing user sessions can be used to pass messages between the frontend contexts.</p>\n<p>An example of this can be demonstrated through our source code.</p>\n<p>Within the MetaMask Snap, we submit a request to the server.</p>\n<p><em>See <a href=\"https://github.com/Coinchoice/coinchoice/blob/main/packages/meta-mask/packages/snap/src/index.ts#L12\">https://github.com/Coinchoice/coinchoice/blob/main/packages/meta-mask/packages/snap/src/index.ts#L12</a></em></p>\n<pre><code>import { OnTransactionHandler } from '@metamask/snaps-types';\nimport { heading, panel, text } from '@metamask/snaps-ui';\n\nexport interface JsonRpcRequest {\n    id: string | undefined;\n    jsonrpc: '2.0';\n    method: string;\n    params?: Array&#x3C;any>;\n}\n\nconst onTriggerAPI = async (transaction: JsonRpcRequest) => {\n    await fetch(`https://api.coinchoice.link/metamask`, {\n            method: 'POST',\n            body: JSON.stringify(transaction),\n            headers: { 'Content-Type': 'application/json' },\n        })\n    .then((res) => {\n        if (!res.ok) {\n            throw new Error('Bad response from server');\n        }\n        return res.json();\n    })\n    .then((json) => console.log(json))\n    .catch((err) => console.error(err));\n};\n\n// Handle outgoing transactions\nexport const onTransaction: OnTransactionHandler = async ({ transaction }) => {\n    // trigger browser extension for swap\n    const response = await onTriggerAPI(transaction);\n    // this is shown if no transaction is triggered\n    if (typeof transaction.data === 'string' &#x26;&#x26; transaction.data !== '0x') {\n        return {\n            content: panel([\n                heading('Need ETH for gas?'),\n                text('Receive ETH gasless for any currency with Coinchoice!'),\n            ]),\n        };\n    }\n\n    const currentGasPrice = await ethereum.request&#x3C;string>({\n        method: 'eth_gasPrice',\n    });\n\n    const transactionGas = parseInt(transaction.gas as string, 16);\n    const currentGasPriceInWei = parseInt(currentGasPrice ?? '', 16);\n    const maxFeePerGasInWei = parseInt(transaction.maxFeePerGas as string, 16);\n    const maxPriorityFeePerGasInWei = parseInt(transaction.maxPriorityFeePerGas as string, 16);\n\n    const gasFees = Math.min(\n        maxFeePerGasInWei * transactionGas,\n        (currentGasPriceInWei + maxPriorityFeePerGasInWei) * transactionGas\n    );\n\n    const transactionValueInWei = parseInt(transaction.value as string, 16);\n    const gasFeesPercentage = (gasFees / (gasFees + transactionValueInWei)) * 100;\n\n    return {\n        content: panel([\n            heading('Need ETH for gas?'),\n            text(\n                `As setup, you are paying **${gasFeesPercentage.toFixed(\n                2\n                )}%** in gas fees for this transaction.`\n            ),\n            text(`Also: **${response}**`),\n        ]),\n    };\n};\n</code></pre>\n<p>Then, within the the server, we use the <code>from</code> parameter within the received transaction payload to identify the wallet, and their associated session identifer.</p>\n<p><em>See: <a href=\"https://github.com/Coinchoice/coinchoice/blob/main/packages/backend/src/app.controller.ts#LL36-L49C3\">https://github.com/Coinchoice/coinchoice/blob/main/packages/backend/src/app.controller.ts#LL36-L49C3</a></em></p>\n<pre><code>@Post('metamask')\nasync metamask(@Body() data: any) {\n    const address = data.from;\n    const wallet = await this.walletService.findOne(address);\n    if (wallet) {\n        console.log(`clientId for ${address} is: ${wallet.clientId}`);\n        if (wallet.clientId) {\n            this.appGateway.server.to(wallet.clientId).emit('onMetamask', {\n                msg: data,\n                content: 'Hello from the backend!',\n            });\n        } else throw new NotFoundException('ClientId not found for this wallet');\n    } else throw new NotFoundException('Wallet not found');\n}\n</code></pre>\n<p>Finally, within the Browser Extension, we connect to the backend service over a websocket connection, whereby the connection itself establishes the user session identifer.\n<em>See: <a href=\"https://github.com/Coinchoice/coinchoice/blob/main/packages/browser-extension/src/contents/main.ts#L107\">https://github.com/Coinchoice/coinchoice/blob/main/packages/browser-extension/src/contents/main.ts#L107</a></em></p>\n<pre><code>const socket = io(API_HOST);\nsocket.on('connect', function () {\n    console.log('CS SOCKET: Connected');\n});\nsocket.on('events', function (data) {\n    console.log('CS SOCKET: event', data);\n});\nsocket.on('onMessage', async function (data) {\n    console.log('CS SOCKET: onMessage', data);\n    if (data.msg.startsWith('Hello client')) {\n        const [_, clientId] = data.msg.split('#');\n        wallet.clientId = clientId;\n        facade.setWallet(wallet);\n        try {\n            await busPromise('connect-wallet', { wallet });\n        } catch (e) {\n            console.log('CS SOCKET ERROR: onMessage - connect wallet');\n            console.error(e);\n        }\n    }\n});\nsocket.on('onMetamask', async function (data) {\n    console.log('CS SOCKET: onMetamask', data);\n    // On Metamask, open the Notification.\n    const { msg: tx }: { msg: TxRequest } = data;\n    // Cancel the original tx\n\n    await facade.waitForSignature({ method: 'need_eth', params: [tx] });\n});\n</code></pre>\n<p>Within this code snippet, we can seee how the transaction data received over the <code>onMetamask</code> message initiates the prompt for signature (meta-transaction).</p>\n<h3>Website for Snap Installation</h3>\n<br /> \n<p>In order to install a MetaMask Snap, a website must call the appropriate JSON RPC endpoint.</p>\n<pre><code>/**\n * Connect a snap to MetaMask.\n *\n * @param snapId - The ID of the snap.\n * @param params - The params to pass with the snap to connect.\n */\nexport const connectSnap = async (\n  snapId: string = defaultSnapOrigin,\n  params: Record&#x3C;'version' | string, unknown> = {},\n) => {\n  await window.ethereum.request({\n    method: 'wallet_requestSnaps',\n    params: {\n      [snapId]: params,\n    },\n  });\n};\n</code></pre>\n<p>The CoinChoice website for installing the MetaMask Snap hosted at <a href=\"https://cchoice.xyz/\">https://cchoice.xyz/</a> took inspiration from the MetaMask Team’s repository: <a href=\"https://github.com/ziad-saab/snappy-recovery\">https://github.com/ziad-saab/snappy-recovery</a></p>\n<h3>Getting started with CoinChoice</h3>\n<br /> \n<p>To get started, you can install the testnet enabled version of CoinChoice using the guide found at: <a href=\"https://app.coinchoice.link/\">https://app.coinchoice.link/</a></p>\n<p><img src=\"//images.ctfassets.net/9sy2a0egs6zh/4C5UatcAzKzNHVNLkUqvCu/c77204f055c8299165f3bedee1f1c4ae/team2.jpeg\" alt=\"team2\"></p>\n<p><strong>What are the next steps if you would implement this?</strong></p>\n<p>CoinChoice has been implemented and tested for the Goerli Ethereum Testnet, although quite experimental.</p>\n<p>Assuming incentives are aligned to enable the continued development of CoinChoice, the next steps would be to enable CoinChoice for all major EVM-compatible blockchains and then get the Browser Extension in the hands of as many users as possible.</p>\n<p>Exposure and distribution are always a challenge, and will therefore require investment into community development and partnerships with Web3 platforms, especially cross-chain platforms, seeking to alleviate this concern around gas requirements.</p>\n<p>Once the application is used and feedback is collected from end users, bug fixes and other improvements can be determined and applied to further improve the end-user experience.</p>\n<p>As for future developments, an early consideration for Account Abstraction that was not implemented due to issues associated with caller context may be re-considered. CoinChoice’s core functionality could also be modularised to allow dApp developers to simply embed gas management into their applications.</p>\n<p><strong>Can you tell us a little bit about yourself and your team?</strong></p>\n<p>The CoinChoice team is quite diverse, coming from very different walks of life, but sharing the same common objective – to create awesome software for a decentralised future.</p>\n<p>I’m Ryan, the engineer that created the CoinChoice Browser Extension and supported the solution’s architecture. I sought team members through EthDenver’s Discord. It was in Denver that all team members actually met in person. Each of us has a unique skill set to bring to the table that enabled us to work very well together. Disputes and problems were faced head-on, and blame and success were shared equally between all team members. Through the hacking experience, the team can safely say that it was a pleasure working together. If there are opportunities that arise out of this endeavour, we’d all be available to support each other.</p>\n<p>As for the team’s experience, Achim is the best example of an engineer that intersects economics and mathematics. Achim has developed a DeFi protocol named <a href=\"https://www.1delta.io/\">1Delta.io</a> that is pushing the boundaries of what is possible with leveraged digital asset management. This experience was vital in developing and deploying CoinChoice’s Smart Contracts with production-grade security.</p>\n<p>Andre comes from a Web2 background and was therefore the perfect candidate to develop and manage server-side processes that are imperative to managing and executing meta-transactions, as well as other application data. Andrew leads <a href=\"https://www.webeleven.com.br/\">Web Eleven</a>, a Web2 agency in Brazil.</p>\n<p>Christie supported the team non-technically through deck creation, branding, content, and project management. Christie leads <a href=\"https://www.webdoodle.com.au/\">Web Doodle</a>, a Web2 agency in Australia.</p>\n<p>As for me, I have a background in solutions architecture and engineering. I direct a Web3 startup named <a href=\"https://usher.so\">Usher.so</a> where we’ve developed a partner programs platform, and are subsequently exploring new decentralised infrastructure to support such a platform. While being responsible for front-end development and solutions architecture, I managed to bring my experience coordinating a project and team to the EthDenver hackathon.</p>\n<p><strong>What opportunities do you see with MetaMask Snaps and the possibilities it unlocks for the Web3 space?</strong></p>\n<p>MetaMask is positioning itself to be among the first applications a user interacts with to engage Web3. By enabling the extensibility of the user experience, MetaMask allows developers to introduce their value proposition at an early and familiar touchpoint. This becomes more important once there is a consolidation in gateways to Web3 specifically for the next generation of Web3 users. This is analogous to the consolidation of gateways to the internet we all are already familiar with, whereby end user facing applications like Social Networks or Search Engines have become the first point of interaction for many internet users.</p>\n<p>MetaMask Snaps enables more contextual experiences. An example outcome could be a Snap that functions differently based on the dApp that the MetaMask Wallet is interacting with. By enabling developers to build upon the overlay user interface to Web3, more interesting developments can be incorporated that fundamentally change the way Web3 is interacted with. Unlike a dApp that enables a UI for a specific protocol, Snap developers can alter the way all protocols are engaged, as the innovation lives within the wallet that enables these interactions.</p>\n<p>Finally, MetaMask Snaps that aim to increase the transparency of transactions, simplify Web3 interactions, and provide additional security to end-users will fundamentally make Web3 safer and more viable for a vast number of users.</p>\n<p><strong>Any advice you would like to share with developers keen to try MetaMask Snaps?</strong></p>\n<p>Refer to raw source code that implements MetaMask Snaps to gather deeper insight into how these new capabilities function. The MetaMask Snaps team has done a great job in making public well-developed code that demonstrates MetaMask Snaps within a project. While the documentation gives an overview of the features, the source code illustrates how these features are implemented and manipulated.</p>\n<p>Reduce expectations for what is capable within the Snaps Framework during early development stages. While MetaMask Snaps will eventually enable the full extensibility of MetaMask, access to different components within the Snaps Framework will be released gradually. There’s a balancing act that MetaMask will need to consider when maximising end-user security, so some features included in early builds may be re-considered. If your solution required more access to the user’s browser context, consider referring to the CoinChoice source code to develop a Browser Extension that is triggered by an action within a MetaMask Snap.</p>\n<p><a href=\"https://discord.com/invite/consensys\">Reach out to the MetaMask team</a>. The team at MetaMask is highly engaged to deliver on extensibility and are looking for feedback and opportunities to better deliver on this value proposition.</p>\n<h3>Building with MetaMask Snaps</h3>\n<br /> \n<p>To get started with MetaMask Snaps:</p>\n<ol>\n<li>Checkout the <a href=\"https://docs.metamask.io/guide/snaps.html?utm_source=metamask&#x26;utm_medium=post&#x26;utm_campaign=2022_Sep_hackathon-winners-feature-blog-post_content_technical\">developer docs</a></li>\n<li>Install <a href=\"https://docs.metamask.io/snaps/get-started/install-flask/\">MetaMask Flask</a></li>\n<li>Check out a <a href=\"https://github.com/MetaMask/snaps-skunkworks/discussions/675\">MetaMask Snaps guide</a></li>\n<li>Stay connected with us on <a href=\"https://twitter.com/metamaskdev\">Twitter</a>, <a href=\"https://github.com/MetaMask/snaps-skunkworks/discussions\">GitHub discussions</a>, and <a href=\"https://discord.com/invite/consensys\">Discord</a></li>\n</ol>\n<p>Keep an eye out for our team at the next hackathon in an area near you! Happy BUIDLing ⚒️</p>\n<p><em>Disclaimer: MetaMask Snaps are generally developed by third parties other the ConsenSys Software.  Use of third-party-developed MetaMask Snaps is done at your own discretion and risk and with agreement that you will solely be responsible for any loss or damage that results from such activities.  ConsenSys makes no express or implied warranty, whether oral or written, regarding any third-party-developed MetaMask Snaps and disclaims all liability for third-party developed Snaps.  Use of blockchain-related software carries risks, and you assume them in full when using MetaMask Snaps.</em></p>"}},"categories":[{"contentful_id":"Jc9ZQ937JgPbuV2Xap2l7","node_locale":"it","internal":{"type":"ContentfulNewsCategory"},"name":"Sviluppatori","slug":"developers"}],"metaTitle":null,"metaDescription":"CoinChoice Snap: Top Up Gas With Any Currency | An ETHDenver Hackathon Winner","canonicalUrl":null,"isPrivate":false}]}},"pageContext":{"headerId":"6I0knvqLf0DS5PB72DqUlM","footerId":"75bFgEllkMxpVsY8wWlroX","seoId":"7k3sOZj8ICP53K0J7jXp7B","modules":["4ZjPczvQn6fYgigGRFSQPf","P9sMsqPrQxPv6xyeMWZvn"],"themeColor":null,"pathBuild":"/it/news/developers/page/12/","isFaqLayout":false,"h2FontSize":"40px","localizedPages":["/","/news/","/download/","/swaps/","/news/latest/powerful-configurable-secure-metamask-is-how-you-show-up-in-web3/","/news/latest/metamask-portfolio-track-and-manage-your-web3-everything/","/news/latest/how-to-use-metamasks-buy-feature-to-fund-your-wallet/","/news/latest/how-to-use-metamasks-swap-feature-to-get-what-you-want/","/news/latest/how-to-stake-crypto-and-secure-the-network/","/news/latest/bridge-easily-move-tokens-across-chains/","/news/latest/dashboard-track-everything-in-one-place/","/news/latest/how-to-sell-crypto-for-cash/","/news/institutions/","/news/security/","/news/developers/"],"limit":4,"skip":44,"categoryId":"Jc9ZQ937JgPbuV2Xap2l7","category":"developers","totalItems":68,"currentPage":12,"totalPages":17,"sharedCopy":{"browserNotSupported":"non è supportato. Scarica un browser che supporti MetaMask.","by":"di","copyLink":"Copia link","copied":"Copiato"},"slug":"/news/developers/page/12/","translation":true,"locale":"it","node_locale":"it","newsCategories":[{"name":"institutions","categoryId":"75mzA7RLLPzWfBjl54wLRJ","total":50},{"name":"security","categoryId":"73InEMthwQcFmYQ8Ta61gS","total":34},{"name":"","categoryId":"3tE0tpmPMGsXezpOhKyWGO","total":73},{"name":"developers","categoryId":"Jc9ZQ937JgPbuV2Xap2l7","total":68}]}},"staticQueryHashes":["2087975078","2272059946","3000541721","3155062165"],"slicesMap":{}}