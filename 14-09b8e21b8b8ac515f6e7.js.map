{"version":3,"sources":["webpack:///./node_modules/gl-matrix/esm/common.js","webpack:///./node_modules/gl-matrix/esm/mat3.js","webpack:///./node_modules/gl-matrix/esm/mat4.js","webpack:///./node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/gl-matrix/esm/vec4.js","webpack:///./node_modules/gl-matrix/esm/quat.js","webpack:///./node_modules/gl-matrix/esm/vec2.js","webpack:///./node_modules/simplex-noise/dist/esm/simplex-noise.js","webpack:///./src/components/FoxAnimation/Logo/fox-animate.ts","webpack:///./src/components/FoxAnimation/Logo/fox-data.ts","webpack:///./src/components/FoxAnimation/Logo/fox-geometry.ts","webpack:///./src/components/FoxAnimation/Logo/fox-shader.ts","webpack:///./src/components/FoxAnimation/Logo/fox-render.ts","webpack:///./src/components/FoxAnimation/Logo/MetamaskBoxAnimation.tsx","webpack:///./src/components/FoxAnimation/index.js","webpack:///./node_modules/core-js/modules/es.math.hypot.js"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","PI","create","out","fromMat4","a","clone","copy","fromValues","m00","m01","m02","m10","m11","m12","m20","m21","m22","set","identity","transpose","a01","a02","a12","invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","det","adjoint","determinant","multiply","b","b00","b02","b10","b12","b20","b22","translate","v","x","y","rotate","rad","s","sin","c","cos","fromTranslation","fromRotation","fromScaling","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","str","frob","hypot","add","subtract","multiplyScalar","multiplyScalarAndAdd","scale","exactEquals","a0","a1","a2","a3","a4","a5","a6","a7","a8","b0","b1","b2","b3","b4","b5","b6","b7","b8","abs","max","i","arguments","length","sqrt","mul","sub","m03","m13","m23","m30","m31","m32","m33","axis","t","len","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspectiveNO","fovy","aspect","f","tan","Infinity","perspective","perspectiveZO","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","orthoNO","lr","bt","ortho","orthoZO","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","divide","ceil","floor","min","round","scaleAndAdd","squaredDistance","squaredLength","negate","inverse","normalize","cross","lerp","hermite","d","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","r","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","angle","mag","cosine","acos","zero","vec","div","dist","sqrDist","sqrLen","forEach","stride","offset","count","fn","arg","l","u","A","B","C","D","E","F","G","H","I","J","v1","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","out_axis","getAngle","dotproduct","calculateW","exp","et","ln","atan2","log","pow","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","dot","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","rotationTo","sqlerp","setAxes","view","transformMat2","transformMat2d","p0","p1","sinC","cosC","F4","G4","fastFloor","grad4","Float64Array","buildPermutationTable","Uint8Array","tableSize","_i","aux","_i2","noise","undefined","perm","permGrad4x","map","permGrad4y","permGrad4z","permGrad4w","n0","n1","n2","n3","n4","w0","rankx","ranky","rankz","rankw","i1","j1","k1","l1","i2","j2","k2","l2","i3","j3","k3","l3","w1","x3","y3","z3","w3","x4","y4","z4","w4","ii","jj","kk","ll","t0","gi0","t1","gi1","t2","gi2","t3","gi3","t4","gi4","createNoise4D","allocBuffer","N","buffer","result","push","subarray","FoxAnimation","boxes","boxTransforms","animRotation","quat","centers","weights","restPosition","curPosition","nextPosition","velocity","restRotation","curRotation","nextRotation","angularVelocity","_qTmp","_lastExplode","_displacement","vec3","_linePoint","_velocity","_angVelocity","_tmpPos","_tmpPos2","_tmpMat","mat3","_tmpMat2","_tmpRot","_prevAnimRotation","this","mat4","vec4","P","preintegrate","dt","postintegrate","VELOCITY_SCALE","ROTATION_SCALE","updateTransforms","explode","direction","M","disp","weight","extForce","applyPositionConstraints","R0","R1","M0","M1","invDT","DR","distance","tpos","C0","C1","DC","trot","applyWaveForce","tx","tw","MR","n","rotDir","update","FOX_BOXES","JSON","parse","ab","ac","normal","triNormal","FoxRenderer","gl","animationTick","theta","phi","lo","hi","proj","viewProj","invViewProj","_lastTimestamp","hemisphereAxis","hemisphereColor0","hemisphereColor1","interiorColor0","interiorColor1","fogColor","initFoxShader","initGeometry","initShader","type","src","shader","createShader","Error","shaderSource","compileShader","initProgram","spec","vs","VERTEX_SHADER","vert","fs","FRAGMENT_SHADER","frag","prog","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","error","getProgramInfoLog","getShaderInfoLog","program","foxShader","vPosition","getAttribLocation","vNormal","vColor","vCenter","uAnimate","getUniformLocation","uViewProj","uTick","uEye","uHemisphereAxis","uHemisphereColor0","uHemisphereColor1","uInteriorColor0","uInteriorColor1","uFogColor","vbuffer","ibuffer","colors","verts","boundary","chunks","start","material","poly","nx","ny","nz","g","basePtr","vertIndex","px","py","pz","end","unpackFox","foxBoxes","foxVertCount","foxVerts","createBuffer","foxVBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","foxFaces","foxIBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","animation","bindFoxBuffer","enableVertexAttribArray","vertexAttribPointer","FLOAT","updateCamera","drawingBufferWidth","drawingBufferHeight","foxLookAt","pick","window","devicePixelRatio","point","animate","timestamp","explodeRay","pickDir","dir","draw","viewport","clearColor","clearDepth","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","disable","BLEND","enable","DEPTH_TEST","depthMask","CULL_FACE","useProgram","uniformMatrix4fv","uniform1f","uniform3fv","xforms","drawElements","TRIANGLES","UNSIGNED_SHORT","getOffset","evt","el","isNaN","offsetLeft","offsetTop","scrollLeft","scrollTop","offsetParent","clientX","scrollX","clientY","scrollY","clamp","value","MetamaskBoxAnimation","props","container","resizeObserver","intersectionObserver","raf","frame","renderer","requestAnimationFrame","updateSize","canvas","parentNode","removeChild","bounds","getBoundingClientRect","appendChild","updateVisibility","entries","e","isIntersecting","cancelAnimationFrame","_prevPos","vec2","_handleMouseDown","document","body","addEventListener","_handleMouseMove","passive","_handleTouchMove","_handleMouseUp","_lastPinchDist","ev","preventDefault","touches","enableZoom","pageX","pageY","dx","touch","_handleMove","layerX","layerY","removeEventListener","_handleTouchStart","_handleWheel","stopPropagation","deltaY","initWebGL","glFailed","createElement","Object","assign","style","margin","padding","position","getContext","premultipliedAlpha","alpha","antialias","err","componentWillUnmount","posX","posY","render","noGLFallback","lookPixel","cursor","onMouseDown","onMouseMove","followMouse","ref","disconnect","ResizeObserver","observe","IntersectionObserver","React","Wrapper","withTheme","useState","shouldMount","setShouldMount","setLeft","setDistance","handleWindowSizeChange","innerWidth","useEffect","id","styled","theme","device","mobile","$","$hypot","stat","forced","NaN","value1","value2","sum","aLen","larg"],"mappings":"miVAOWA,EAAU,KACVC,EAAqC,oBAAjBC,aAA+BA,aAAeC,MAClEC,EAASC,KAAKC,OAUZD,KAAKE,GCNX,SAASC,IACd,IAAIC,EAAM,IAAI,EAAoB,GAclC,OAZI,GAAuBP,eACzBO,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGXA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAUF,SAASC,EAASD,EAAKE,GAU5B,OATAF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,IACJF,EASF,SAASG,EAAMD,GACpB,IAAIF,EAAM,IAAI,EAAoB,GAUlC,OATAA,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACJF,EAUF,SAASI,EAAKJ,EAAKE,GAUxB,OATAF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACJF,EAiBF,SAASK,EAAWC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GACjE,IAAId,EAAM,IAAI,EAAoB,GAUlC,OATAA,EAAI,GAAKM,EACTN,EAAI,GAAKO,EACTP,EAAI,GAAKQ,EACTR,EAAI,GAAKS,EACTT,EAAI,GAAKU,EACTV,EAAI,GAAKW,EACTX,EAAI,GAAKY,EACTZ,EAAI,GAAKa,EACTb,EAAI,GAAKc,EACFd,EAkBF,SAASe,EAAIf,EAAKM,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GAU/D,OATAd,EAAI,GAAKM,EACTN,EAAI,GAAKO,EACTP,EAAI,GAAKQ,EACTR,EAAI,GAAKS,EACTT,EAAI,GAAKU,EACTV,EAAI,GAAKW,EACTX,EAAI,GAAKY,EACTZ,EAAI,GAAKa,EACTb,EAAI,GAAKc,EACFd,EASF,SAASgB,EAAShB,GAUvB,OATAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAUF,SAASiB,EAAUjB,EAAKE,GAE7B,GAAIF,IAAQE,EAAG,CACb,IAAIgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRkB,EAAMlB,EAAE,GACZF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKkB,EACTlB,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKmB,EACTnB,EAAI,GAAKoB,OAETpB,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GAGb,OAAOF,EAUF,SAASqB,EAAOrB,EAAKE,GAC1B,IAAIoB,EAAMpB,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRqB,EAAMrB,EAAE,GACRsB,EAAMtB,EAAE,GACRkB,EAAMlB,EAAE,GACRuB,EAAMvB,EAAE,GACRwB,EAAMxB,EAAE,GACRyB,EAAMzB,EAAE,GACR0B,EAAMD,EAAMH,EAAMJ,EAAMM,EACxBG,GAAOF,EAAMJ,EAAMH,EAAMK,EACzBK,EAAMJ,EAAMH,EAAMC,EAAMC,EAExBM,EAAMT,EAAMM,EAAMV,EAAMW,EAAMV,EAAMW,EAExC,OAAKC,GAILA,EAAM,EAAMA,EACZ/B,EAAI,GAAK4B,EAAMG,EACf/B,EAAI,KAAO2B,EAAMT,EAAMC,EAAMO,GAAOK,EACpC/B,EAAI,IAAMoB,EAAMF,EAAMC,EAAMK,GAAOO,EACnC/B,EAAI,GAAK6B,EAAME,EACf/B,EAAI,IAAM2B,EAAML,EAAMH,EAAMM,GAAOM,EACnC/B,EAAI,KAAOoB,EAAME,EAAMH,EAAMI,GAAOQ,EACpC/B,EAAI,GAAK8B,EAAMC,EACf/B,EAAI,KAAO0B,EAAMJ,EAAMJ,EAAMO,GAAOM,EACpC/B,EAAI,IAAMwB,EAAMF,EAAMJ,EAAMK,GAAOQ,EAC5B/B,GAbE,KAuBJ,SAASgC,EAAQhC,EAAKE,GAC3B,IAAIoB,EAAMpB,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRqB,EAAMrB,EAAE,GACRsB,EAAMtB,EAAE,GACRkB,EAAMlB,EAAE,GACRuB,EAAMvB,EAAE,GACRwB,EAAMxB,EAAE,GACRyB,EAAMzB,EAAE,GAUZ,OATAF,EAAI,GAAKwB,EAAMG,EAAMP,EAAMM,EAC3B1B,EAAI,GAAKmB,EAAMO,EAAMR,EAAMS,EAC3B3B,EAAI,GAAKkB,EAAME,EAAMD,EAAMK,EAC3BxB,EAAI,GAAKoB,EAAMK,EAAMF,EAAMI,EAC3B3B,EAAI,GAAKsB,EAAMK,EAAMR,EAAMM,EAC3BzB,EAAI,GAAKmB,EAAMI,EAAMD,EAAMF,EAC3BpB,EAAI,GAAKuB,EAAMG,EAAMF,EAAMC,EAC3BzB,EAAI,GAAKkB,EAAMO,EAAMH,EAAMI,EAC3B1B,EAAI,GAAKsB,EAAME,EAAMN,EAAMK,EACpBvB,EASF,SAASiC,EAAY/B,GAC1B,IAAIoB,EAAMpB,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRqB,EAAMrB,EAAE,GACRsB,EAAMtB,EAAE,GACRkB,EAAMlB,EAAE,GACRuB,EAAMvB,EAAE,GACRwB,EAAMxB,EAAE,GACRyB,EAAMzB,EAAE,GACZ,OAAOoB,GAAOK,EAAMH,EAAMJ,EAAMM,GAAOR,IAAQS,EAAMJ,EAAMH,EAAMK,GAAON,GAAOO,EAAMH,EAAMC,EAAMC,GAW5F,SAASS,EAASlC,EAAKE,EAAGiC,GAC/B,IAAIb,EAAMpB,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRqB,EAAMrB,EAAE,GACRsB,EAAMtB,EAAE,GACRkB,EAAMlB,EAAE,GACRuB,EAAMvB,EAAE,GACRwB,EAAMxB,EAAE,GACRyB,EAAMzB,EAAE,GACRkC,EAAMD,EAAE,GACRP,EAAMO,EAAE,GACRE,EAAMF,EAAE,GACRG,EAAMH,EAAE,GACRN,EAAMM,EAAE,GACRI,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRL,EAAMK,EAAE,GACRM,EAAMN,EAAE,GAUZ,OATAnC,EAAI,GAAKoC,EAAMd,EAAMM,EAAML,EAAMc,EAAMZ,EACvCzB,EAAI,GAAKoC,EAAMlB,EAAMU,EAAMJ,EAAMa,EAAMX,EACvC1B,EAAI,GAAKoC,EAAMjB,EAAMS,EAAMR,EAAMiB,EAAMV,EACvC3B,EAAI,GAAKsC,EAAMhB,EAAMO,EAAMN,EAAMgB,EAAMd,EACvCzB,EAAI,GAAKsC,EAAMpB,EAAMW,EAAML,EAAMe,EAAMb,EACvC1B,EAAI,GAAKsC,EAAMnB,EAAMU,EAAMT,EAAMmB,EAAMZ,EACvC3B,EAAI,GAAKwC,EAAMlB,EAAMQ,EAAMP,EAAMkB,EAAMhB,EACvCzB,EAAI,GAAKwC,EAAMtB,EAAMY,EAAMN,EAAMiB,EAAMf,EACvC1B,EAAI,GAAKwC,EAAMrB,EAAMW,EAAMV,EAAMqB,EAAMd,EAChC3B,EAWF,SAAS0C,EAAU1C,EAAKE,EAAGyC,GAChC,IAAIrB,EAAMpB,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRqB,EAAMrB,EAAE,GACRsB,EAAMtB,EAAE,GACRkB,EAAMlB,EAAE,GACRuB,EAAMvB,EAAE,GACRwB,EAAMxB,EAAE,GACRyB,EAAMzB,EAAE,GACR0C,EAAID,EAAE,GACNE,EAAIF,EAAE,GAUV,OATA3C,EAAI,GAAKsB,EACTtB,EAAI,GAAKkB,EACTlB,EAAI,GAAKmB,EACTnB,EAAI,GAAKuB,EACTvB,EAAI,GAAKwB,EACTxB,EAAI,GAAKoB,EACTpB,EAAI,GAAK4C,EAAItB,EAAMuB,EAAItB,EAAME,EAC7BzB,EAAI,GAAK4C,EAAI1B,EAAM2B,EAAIrB,EAAME,EAC7B1B,EAAI,GAAK4C,EAAIzB,EAAM0B,EAAIzB,EAAMO,EACtB3B,EAWF,SAAS8C,EAAO9C,EAAKE,EAAG6C,GAC7B,IAAIzB,EAAMpB,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRqB,EAAMrB,EAAE,GACRsB,EAAMtB,EAAE,GACRkB,EAAMlB,EAAE,GACRuB,EAAMvB,EAAE,GACRwB,EAAMxB,EAAE,GACRyB,EAAMzB,EAAE,GACR8C,EAAIpD,KAAKqD,IAAIF,GACbG,EAAItD,KAAKuD,IAAIJ,GAUjB,OATA/C,EAAI,GAAKkD,EAAI5B,EAAM0B,EAAIzB,EACvBvB,EAAI,GAAKkD,EAAIhC,EAAM8B,EAAIxB,EACvBxB,EAAI,GAAKkD,EAAI/B,EAAM6B,EAAI5B,EACvBpB,EAAI,GAAKkD,EAAI3B,EAAMyB,EAAI1B,EACvBtB,EAAI,GAAKkD,EAAI1B,EAAMwB,EAAI9B,EACvBlB,EAAI,GAAKkD,EAAI9B,EAAM4B,EAAI7B,EACvBnB,EAAI,GAAKyB,EACTzB,EAAI,GAAK0B,EACT1B,EAAI,GAAK2B,EACF3B,EAWF,SAAS,EAAMA,EAAKE,EAAGyC,GAC5B,IAAIC,EAAID,EAAE,GACNE,EAAIF,EAAE,GAUV,OATA3C,EAAI,GAAK4C,EAAI1C,EAAE,GACfF,EAAI,GAAK4C,EAAI1C,EAAE,GACfF,EAAI,GAAK4C,EAAI1C,EAAE,GACfF,EAAI,GAAK6C,EAAI3C,EAAE,GACfF,EAAI,GAAK6C,EAAI3C,EAAE,GACfF,EAAI,GAAK6C,EAAI3C,EAAE,GACfF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACJF,EAcF,SAASoD,EAAgBpD,EAAK2C,GAUnC,OATA3C,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK2C,EAAE,GACX3C,EAAI,GAAK2C,EAAE,GACX3C,EAAI,GAAK,EACFA,EAcF,SAASqD,EAAarD,EAAK+C,GAChC,IAAIC,EAAIpD,KAAKqD,IAAIF,GACbG,EAAItD,KAAKuD,IAAIJ,GAUjB,OATA/C,EAAI,GAAKkD,EACTlD,EAAI,GAAKgD,EACThD,EAAI,GAAK,EACTA,EAAI,IAAMgD,EACVhD,EAAI,GAAKkD,EACTlD,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAcF,SAASsD,EAAYtD,EAAK2C,GAU/B,OATA3C,EAAI,GAAK2C,EAAE,GACX3C,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK2C,EAAE,GACX3C,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAUF,SAASuD,EAAUvD,EAAKE,GAU7B,OATAF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAK,EACTA,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAK,EACTA,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAK,EACFA,EAWF,SAASwD,EAASxD,EAAKyD,GAC5B,IAAIb,EAAIa,EAAE,GACNZ,EAAIY,EAAE,GACNC,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNG,EAAKhB,EAAIA,EACTiB,EAAKhB,EAAIA,EACTiB,EAAKJ,EAAIA,EACTK,EAAKnB,EAAIgB,EACTI,EAAKnB,EAAIe,EACTK,EAAKpB,EAAIgB,EACTK,EAAKR,EAAIE,EACTO,EAAKT,EAAIG,EACTO,EAAKV,EAAII,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EAUb,OATA9D,EAAI,GAAK,EAAIiE,EAAKG,EAClBpE,EAAI,GAAKgE,EAAKO,EACdvE,EAAI,GAAKkE,EAAKI,EACdtE,EAAI,GAAKgE,EAAKO,EACdvE,EAAI,GAAK,EAAI+D,EAAKK,EAClBpE,EAAI,GAAKmE,EAAKE,EACdrE,EAAI,GAAKkE,EAAKI,EACdtE,EAAI,GAAKmE,EAAKE,EACdrE,EAAI,GAAK,EAAI+D,EAAKE,EACXjE,EAWF,SAASwE,EAAexE,EAAKE,GAClC,IAAIoB,EAAMpB,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRuE,EAAMvE,EAAE,GACRqB,EAAMrB,EAAE,GACRsB,EAAMtB,EAAE,GACRkB,EAAMlB,EAAE,GACRwE,EAAMxE,EAAE,GACRuB,EAAMvB,EAAE,GACRwB,EAAMxB,EAAE,GACRyB,EAAMzB,EAAE,IACRyE,EAAMzE,EAAE,IACR0E,EAAM1E,EAAE,IACR2E,EAAM3E,EAAE,IACR4E,EAAM5E,EAAE,IACR6E,EAAM7E,EAAE,IACRkC,EAAMd,EAAME,EAAMN,EAAMK,EACxBK,EAAMN,EAAMF,EAAMD,EAAMI,EACxBc,EAAMf,EAAMoD,EAAMD,EAAMlD,EACxByD,EAAM9D,EAAME,EAAMD,EAAMK,EACxByD,EAAM/D,EAAMwD,EAAMD,EAAMjD,EACxB0D,EAAM/D,EAAMuD,EAAMD,EAAMrD,EACxB+D,EAAM1D,EAAMoD,EAAMnD,EAAMkD,EACxBQ,EAAM3D,EAAMqD,EAAMnD,EAAMiD,EACxBS,EAAM5D,EAAMsD,EAAMJ,EAAMC,EACxBU,EAAM5D,EAAMoD,EAAMnD,EAAMkD,EACxBvC,EAAMZ,EAAMqD,EAAMJ,EAAME,EACxBhD,EAAMF,EAAMoD,EAAMJ,EAAMG,EAExB/C,EAAMK,EAAMP,EAAMD,EAAMU,EAAMD,EAAMiD,EAAMN,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE5E,OAAKpD,GAILA,EAAM,EAAMA,EACZ/B,EAAI,IAAMwB,EAAMK,EAAMT,EAAMkB,EAAMoC,EAAMY,GAAOvD,EAC/C/B,EAAI,IAAMoB,EAAMiE,EAAM9D,EAAMM,EAAM6C,EAAMU,GAAOrD,EAC/C/B,EAAI,IAAMuB,EAAMe,EAAMd,EAAM6D,EAAMX,EAAMS,GAAOpD,EAC/C/B,EAAI,IAAMmB,EAAMmB,EAAMpB,EAAMW,EAAM4C,EAAMa,GAAOvD,EAC/C/B,EAAI,IAAMsB,EAAMO,EAAMV,EAAMkE,EAAMZ,EAAMW,GAAOrD,EAC/C/B,EAAI,IAAMkB,EAAMmE,EAAM/D,EAAMgB,EAAMmC,EAAMU,GAAOpD,EAC/C/B,EAAI,IAAM6E,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,GAAOjD,EAC/C/B,EAAI,IAAM8E,EAAMzC,EAAMuC,EAAMM,EAAMH,EAAMnD,GAAOG,EAC/C/B,EAAI,IAAM4E,EAAMK,EAAMJ,EAAMxC,EAAM0C,EAAM3C,GAAOL,EACxC/B,GAbE,KAwBJ,SAASuF,EAAWvF,EAAKwF,EAAOC,GAUrC,OATAzF,EAAI,GAAK,EAAIwF,EACbxF,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EAAIyF,EACdzF,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAAS0F,EAAIxF,GAClB,MAAO,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IASnI,SAASyF,EAAKzF,GACnB,OAAON,KAAKgG,MAAM1F,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAW/D,SAAS2F,EAAI7F,EAAKE,EAAGiC,GAU1B,OATAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GACXnC,EAWF,SAAS8F,EAAS9F,EAAKE,EAAGiC,GAU/B,OATAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GACXnC,EAWF,SAAS+F,EAAe/F,EAAKE,EAAGiC,GAUrC,OATAnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EACTnC,EAYF,SAASgG,EAAqBhG,EAAKE,EAAGiC,EAAG8D,GAU9C,OATAjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EAChBjG,EAUF,SAASkG,EAAYhG,EAAGiC,GAC7B,OAAOjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,GAUrJ,SAAS,EAAOjC,EAAGiC,GACxB,IAAIgE,EAAKjG,EAAE,GACPkG,EAAKlG,EAAE,GACPmG,EAAKnG,EAAE,GACPoG,EAAKpG,EAAE,GACPqG,EAAKrG,EAAE,GACPsG,EAAKtG,EAAE,GACPuG,EAAKvG,EAAE,GACPwG,EAAKxG,EAAE,GACPyG,EAAKzG,EAAE,GACP0G,EAAKzE,EAAE,GACP0E,EAAK1E,EAAE,GACP2E,EAAK3E,EAAE,GACP4E,EAAK5E,EAAE,GACP6E,EAAK7E,EAAE,GACP8E,EAAK9E,EAAE,GACP+E,EAAK/E,EAAE,GACPgF,EAAKhF,EAAE,GACPiF,EAAKjF,EAAE,GACX,OAAOvC,KAAKyH,IAAIlB,EAAKS,IAAO,EAAmBhH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIlB,GAAKvG,KAAKyH,IAAIT,KAAQhH,KAAKyH,IAAIjB,EAAKS,IAAO,EAAmBjH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIjB,GAAKxG,KAAKyH,IAAIR,KAAQjH,KAAKyH,IAAIhB,EAAKS,IAAO,EAAmBlH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIhB,GAAKzG,KAAKyH,IAAIP,KAAQlH,KAAKyH,IAAIf,EAAKS,IAAO,EAAmBnH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIf,GAAK1G,KAAKyH,IAAIN,KAAQnH,KAAKyH,IAAId,EAAKS,IAAO,EAAmBpH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAId,GAAK3G,KAAKyH,IAAIL,KAAQpH,KAAKyH,IAAIb,EAAKS,IAAO,EAAmBrH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIb,GAAK5G,KAAKyH,IAAIJ,KAAQrH,KAAKyH,IAAIZ,EAAKS,IAAO,EAAmBtH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIZ,GAAK7G,KAAKyH,IAAIH,KAAQtH,KAAKyH,IAAIX,EAAKS,IAAO,EAAmBvH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIX,GAAK9G,KAAKyH,IAAIF,KAAQvH,KAAKyH,IAAIV,EAAKS,IAAO,EAAmBxH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIV,GAAK/G,KAAKyH,IAAID,IDntBzvBxH,KAAKgG,QAAOhG,KAAKgG,MAAQ,WAI5B,IAHA,IAAI/C,EAAI,EACJ0E,EAAIC,UAAUC,OAEXF,KACL1E,GAAK2E,UAAUD,GAAKC,UAAUD,GAGhC,OAAO3H,KAAK8H,KAAK7E,KCktBZ,IAAI8E,EAAMzF,EAMN0F,EAAM9B,EC7vBV,SAAS,IACd,IAAI9F,EAAM,IAAI,EAAoB,IAqBlC,OAnBI,GAAuBP,eACzBO,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,GAGZA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EASF,SAAS,EAAME,GACpB,IAAIF,EAAM,IAAI,EAAoB,IAiBlC,OAhBAA,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACLF,EAUF,SAAS,EAAKA,EAAKE,GAiBxB,OAhBAF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACLF,EAwBF,SAAS,EAAWM,EAAKC,EAAKC,EAAKqH,EAAKpH,EAAKC,EAAKC,EAAKmH,EAAKlH,EAAKC,EAAKC,EAAKiH,EAAKC,EAAKC,EAAKC,EAAKC,GACpG,IAAInI,EAAM,IAAI,EAAoB,IAiBlC,OAhBAA,EAAI,GAAKM,EACTN,EAAI,GAAKO,EACTP,EAAI,GAAKQ,EACTR,EAAI,GAAK6H,EACT7H,EAAI,GAAKS,EACTT,EAAI,GAAKU,EACTV,EAAI,GAAKW,EACTX,EAAI,GAAK8H,EACT9H,EAAI,GAAKY,EACTZ,EAAI,GAAKa,EACTb,EAAI,IAAMc,EACVd,EAAI,IAAM+H,EACV/H,EAAI,IAAMgI,EACVhI,EAAI,IAAMiI,EACVjI,EAAI,IAAMkI,EACVlI,EAAI,IAAMmI,EACHnI,EAyBF,SAAS,EAAIA,EAAKM,EAAKC,EAAKC,EAAKqH,EAAKpH,EAAKC,EAAKC,EAAKmH,EAAKlH,EAAKC,EAAKC,EAAKiH,EAAKC,EAAKC,EAAKC,EAAKC,GAiBlG,OAhBAnI,EAAI,GAAKM,EACTN,EAAI,GAAKO,EACTP,EAAI,GAAKQ,EACTR,EAAI,GAAK6H,EACT7H,EAAI,GAAKS,EACTT,EAAI,GAAKU,EACTV,EAAI,GAAKW,EACTX,EAAI,GAAK8H,EACT9H,EAAI,GAAKY,EACTZ,EAAI,GAAKa,EACTb,EAAI,IAAMc,EACVd,EAAI,IAAM+H,EACV/H,EAAI,IAAMgI,EACVhI,EAAI,IAAMiI,EACVjI,EAAI,IAAMkI,EACVlI,EAAI,IAAMmI,EACHnI,EASF,SAAS,EAASA,GAiBvB,OAhBAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAUF,SAAS,EAAUA,EAAKE,GAE7B,GAAIF,IAAQE,EAAG,CACb,IAAIgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRuE,EAAMvE,EAAE,GACRkB,EAAMlB,EAAE,GACRwE,EAAMxE,EAAE,GACRyE,EAAMzE,EAAE,IACZF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,IACXF,EAAI,GAAKkB,EACTlB,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,IACXF,EAAI,GAAKmB,EACTnB,EAAI,GAAKoB,EACTpB,EAAI,IAAME,EAAE,IACZF,EAAI,IAAMyE,EACVzE,EAAI,IAAM0E,EACV1E,EAAI,IAAM2E,OAEV3E,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,IACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,IACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,GACZF,EAAI,IAAME,EAAE,GACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IAGd,OAAOF,EAUF,SAAS,EAAOA,EAAKE,GAC1B,IAAIoB,EAAMpB,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRuE,EAAMvE,EAAE,GACRqB,EAAMrB,EAAE,GACRsB,EAAMtB,EAAE,GACRkB,EAAMlB,EAAE,GACRwE,EAAMxE,EAAE,GACRuB,EAAMvB,EAAE,GACRwB,EAAMxB,EAAE,GACRyB,EAAMzB,EAAE,IACRyE,EAAMzE,EAAE,IACR0E,EAAM1E,EAAE,IACR2E,EAAM3E,EAAE,IACR4E,EAAM5E,EAAE,IACR6E,EAAM7E,EAAE,IACRkC,EAAMd,EAAME,EAAMN,EAAMK,EACxBK,EAAMN,EAAMF,EAAMD,EAAMI,EACxBc,EAAMf,EAAMoD,EAAMD,EAAMlD,EACxByD,EAAM9D,EAAME,EAAMD,EAAMK,EACxByD,EAAM/D,EAAMwD,EAAMD,EAAMjD,EACxB0D,EAAM/D,EAAMuD,EAAMD,EAAMrD,EACxB+D,EAAM1D,EAAMoD,EAAMnD,EAAMkD,EACxBQ,EAAM3D,EAAMqD,EAAMnD,EAAMiD,EACxBS,EAAM5D,EAAMsD,EAAMJ,EAAMC,EACxBU,EAAM5D,EAAMoD,EAAMnD,EAAMkD,EACxBvC,EAAMZ,EAAMqD,EAAMJ,EAAME,EACxBhD,EAAMF,EAAMoD,EAAMJ,EAAMG,EAExB/C,EAAMK,EAAMP,EAAMD,EAAMU,EAAMD,EAAMiD,EAAMN,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE5E,OAAKpD,GAILA,EAAM,EAAMA,EACZ/B,EAAI,IAAMwB,EAAMK,EAAMT,EAAMkB,EAAMoC,EAAMY,GAAOvD,EAC/C/B,EAAI,IAAMmB,EAAMmB,EAAMpB,EAAMW,EAAM4C,EAAMa,GAAOvD,EAC/C/B,EAAI,IAAM6E,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,GAAOjD,EAC/C/B,EAAI,IAAM2B,EAAMsD,EAAMvD,EAAMwD,EAAMP,EAAMK,GAAOjD,EAC/C/B,EAAI,IAAMoB,EAAMiE,EAAM9D,EAAMM,EAAM6C,EAAMU,GAAOrD,EAC/C/B,EAAI,IAAMsB,EAAMO,EAAMV,EAAMkE,EAAMZ,EAAMW,GAAOrD,EAC/C/B,EAAI,IAAM8E,EAAMzC,EAAMuC,EAAMM,EAAMH,EAAMnD,GAAOG,EAC/C/B,EAAI,IAAMyB,EAAMyD,EAAMvD,EAAMU,EAAMsC,EAAM/C,GAAOG,EAC/C/B,EAAI,IAAMuB,EAAMe,EAAMd,EAAM6D,EAAMX,EAAMS,GAAOpD,EAC/C/B,EAAI,IAAMkB,EAAMmE,EAAM/D,EAAMgB,EAAMmC,EAAMU,GAAOpD,EAC/C/B,EAAI,KAAO4E,EAAMK,EAAMJ,EAAMxC,EAAM0C,EAAM3C,GAAOL,EAChD/B,EAAI,KAAO0B,EAAMW,EAAMZ,EAAMwD,EAAMN,EAAMvC,GAAOL,EAChD/B,EAAI,KAAOwB,EAAM4D,EAAM7D,EAAM+D,EAAMlE,EAAM+D,GAAOpD,EAChD/B,EAAI,KAAOsB,EAAMgE,EAAMpE,EAAMkE,EAAMjE,EAAMgE,GAAOpD,EAChD/B,EAAI,KAAO6E,EAAMjD,EAAMgD,EAAMI,EAAMF,EAAM1C,GAAOL,EAChD/B,EAAI,KAAOyB,EAAMuD,EAAMtD,EAAME,EAAMD,EAAMS,GAAOL,EACzC/B,GApBE,KA8BJ,SAAS,GAAQA,EAAKE,GAC3B,IAAIoB,EAAMpB,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRuE,EAAMvE,EAAE,GACRqB,EAAMrB,EAAE,GACRsB,EAAMtB,EAAE,GACRkB,EAAMlB,EAAE,GACRwE,EAAMxE,EAAE,GACRuB,EAAMvB,EAAE,GACRwB,EAAMxB,EAAE,GACRyB,EAAMzB,EAAE,IACRyE,EAAMzE,EAAE,IACR0E,EAAM1E,EAAE,IACR2E,EAAM3E,EAAE,IACR4E,EAAM5E,EAAE,IACR6E,EAAM7E,EAAE,IAiBZ,OAhBAF,EAAI,GAAKwB,GAAOG,EAAMoD,EAAMJ,EAAMG,GAAOpD,GAAON,EAAM2D,EAAML,EAAMI,GAAOD,GAAOzD,EAAMuD,EAAMD,EAAM/C,GAClG3B,EAAI,KAAOkB,GAAOS,EAAMoD,EAAMJ,EAAMG,GAAOpD,GAAOP,EAAM4D,EAAMN,EAAMK,GAAOD,GAAO1D,EAAMwD,EAAMF,EAAM9C,IACpG3B,EAAI,GAAKkB,GAAOE,EAAM2D,EAAML,EAAMI,GAAOtD,GAAOL,EAAM4D,EAAMN,EAAMK,GAAOD,GAAO1D,EAAMuD,EAAMD,EAAMrD,GAClGpB,EAAI,KAAOkB,GAAOE,EAAMuD,EAAMD,EAAM/C,GAAOH,GAAOL,EAAMwD,EAAMF,EAAM9C,GAAOD,GAAOP,EAAMuD,EAAMD,EAAMrD,IACpGpB,EAAI,KAAOuB,GAAOI,EAAMoD,EAAMJ,EAAMG,GAAOrD,GAAOL,EAAM2D,EAAML,EAAMI,GAAOF,GAAOxD,EAAMuD,EAAMD,EAAM/C,IACpG3B,EAAI,GAAKsB,GAAOK,EAAMoD,EAAMJ,EAAMG,GAAOrD,GAAON,EAAM4D,EAAMN,EAAMK,GAAOF,GAAOzD,EAAMwD,EAAMF,EAAM9C,GAClG3B,EAAI,KAAOsB,GAAOF,EAAM2D,EAAML,EAAMI,GAAOvD,GAAOJ,EAAM4D,EAAMN,EAAMK,GAAOF,GAAOzD,EAAMuD,EAAMD,EAAMrD,IACpGpB,EAAI,GAAKsB,GAAOF,EAAMuD,EAAMD,EAAM/C,GAAOJ,GAAOJ,EAAMwD,EAAMF,EAAM9C,GAAOF,GAAON,EAAMuD,EAAMD,EAAMrD,GAClGpB,EAAI,GAAKuB,GAAOG,EAAMqD,EAAMJ,EAAME,GAAOpD,GAAOD,EAAMuD,EAAML,EAAMG,GAAOD,GAAOpD,EAAMmD,EAAMD,EAAMhD,GAClG1B,EAAI,KAAOsB,GAAOI,EAAMqD,EAAMJ,EAAME,GAAOpD,GAAOP,EAAM6D,EAAMN,EAAMI,GAAOD,GAAO1D,EAAMyD,EAAMF,EAAM/C,IACpG1B,EAAI,IAAMsB,GAAOE,EAAMuD,EAAML,EAAMG,GAAOtD,GAAOL,EAAM6D,EAAMN,EAAMI,GAAOD,GAAO1D,EAAMwD,EAAMD,EAAMjD,GACnGxB,EAAI,MAAQsB,GAAOE,EAAMmD,EAAMD,EAAMhD,GAAOH,GAAOL,EAAMyD,EAAMF,EAAM/C,GAAOD,GAAOP,EAAMwD,EAAMD,EAAMjD,IACrGxB,EAAI,MAAQuB,GAAOG,EAAMoD,EAAMnD,EAAMkD,GAAOpD,GAAOD,EAAMsD,EAAM1D,EAAMyD,GAAOD,GAAOpD,EAAMG,EAAMP,EAAMM,IACrG1B,EAAI,IAAMsB,GAAOI,EAAMoD,EAAMnD,EAAMkD,GAAOpD,GAAOP,EAAM4D,EAAM3D,EAAM0D,GAAOD,GAAO1D,EAAMS,EAAMR,EAAMO,GACnG1B,EAAI,MAAQsB,GAAOE,EAAMsD,EAAM1D,EAAMyD,GAAOtD,GAAOL,EAAM4D,EAAM3D,EAAM0D,GAAOD,GAAO1D,EAAME,EAAMD,EAAMK,IACrGxB,EAAI,IAAMsB,GAAOE,EAAMG,EAAMP,EAAMM,GAAOH,GAAOL,EAAMS,EAAMR,EAAMO,GAAOD,GAAOP,EAAME,EAAMD,EAAMK,GAC5FxB,EASF,SAAS,GAAYE,GAC1B,IAAIoB,EAAMpB,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRuE,EAAMvE,EAAE,GACRqB,EAAMrB,EAAE,GACRsB,EAAMtB,EAAE,GACRkB,EAAMlB,EAAE,GACRwE,EAAMxE,EAAE,GACRuB,EAAMvB,EAAE,GACRwB,EAAMxB,EAAE,GACRyB,EAAMzB,EAAE,IACRyE,EAAMzE,EAAE,IACR0E,EAAM1E,EAAE,IACR2E,EAAM3E,EAAE,IACR4E,EAAM5E,EAAE,IACR6E,EAAM7E,EAAE,IAcZ,OAbUoB,EAAME,EAAMN,EAAMK,IAWlBI,EAAMoD,EAAMJ,EAAMG,IAVlBxD,EAAMF,EAAMD,EAAMI,IASlBG,EAAMqD,EAAMJ,EAAME,IARlBvD,EAAMoD,EAAMD,EAAMlD,IAOlBG,EAAMoD,EAAMnD,EAAMkD,IANlB3D,EAAME,EAAMD,EAAMK,IAKlBC,EAAMsD,EAAMJ,EAAMC,IAJlB1D,EAAMwD,EAAMD,EAAMjD,IAGlBC,EAAMqD,EAAMnD,EAAMiD,IAFlBzD,EAAMuD,EAAMD,EAAMrD,IAClBK,EAAMoD,EAAMnD,EAAMkD,GAkBvB,SAAS,GAAS5E,EAAKE,EAAGiC,GAC/B,IAAIb,EAAMpB,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRuE,EAAMvE,EAAE,GACRqB,EAAMrB,EAAE,GACRsB,EAAMtB,EAAE,GACRkB,EAAMlB,EAAE,GACRwE,EAAMxE,EAAE,GACRuB,EAAMvB,EAAE,GACRwB,EAAMxB,EAAE,GACRyB,EAAMzB,EAAE,IACRyE,EAAMzE,EAAE,IACR0E,EAAM1E,EAAE,IACR2E,EAAM3E,EAAE,IACR4E,EAAM5E,EAAE,IACR6E,EAAM7E,EAAE,IAER0G,EAAKzE,EAAE,GACP0E,EAAK1E,EAAE,GACP2E,EAAK3E,EAAE,GACP4E,EAAK5E,EAAE,GA6BX,OA5BAnC,EAAI,GAAK4G,EAAKtF,EAAMuF,EAAKtF,EAAMuF,EAAKrF,EAAMsF,EAAKnC,EAC/C5E,EAAI,GAAK4G,EAAK1F,EAAM2F,EAAKrF,EAAMsF,EAAKpF,EAAMqF,EAAKlC,EAC/C7E,EAAI,GAAK4G,EAAKzF,EAAM0F,EAAKzF,EAAM0F,EAAKnF,EAAMoF,EAAKjC,EAC/C9E,EAAI,GAAK4G,EAAKnC,EAAMoC,EAAKnC,EAAMoC,EAAKnC,EAAMoC,EAAKhC,EAC/C6B,EAAKzE,EAAE,GACP0E,EAAK1E,EAAE,GACP2E,EAAK3E,EAAE,GACP4E,EAAK5E,EAAE,GACPnC,EAAI,GAAK4G,EAAKtF,EAAMuF,EAAKtF,EAAMuF,EAAKrF,EAAMsF,EAAKnC,EAC/C5E,EAAI,GAAK4G,EAAK1F,EAAM2F,EAAKrF,EAAMsF,EAAKpF,EAAMqF,EAAKlC,EAC/C7E,EAAI,GAAK4G,EAAKzF,EAAM0F,EAAKzF,EAAM0F,EAAKnF,EAAMoF,EAAKjC,EAC/C9E,EAAI,GAAK4G,EAAKnC,EAAMoC,EAAKnC,EAAMoC,EAAKnC,EAAMoC,EAAKhC,EAC/C6B,EAAKzE,EAAE,GACP0E,EAAK1E,EAAE,GACP2E,EAAK3E,EAAE,IACP4E,EAAK5E,EAAE,IACPnC,EAAI,GAAK4G,EAAKtF,EAAMuF,EAAKtF,EAAMuF,EAAKrF,EAAMsF,EAAKnC,EAC/C5E,EAAI,GAAK4G,EAAK1F,EAAM2F,EAAKrF,EAAMsF,EAAKpF,EAAMqF,EAAKlC,EAC/C7E,EAAI,IAAM4G,EAAKzF,EAAM0F,EAAKzF,EAAM0F,EAAKnF,EAAMoF,EAAKjC,EAChD9E,EAAI,IAAM4G,EAAKnC,EAAMoC,EAAKnC,EAAMoC,EAAKnC,EAAMoC,EAAKhC,EAChD6B,EAAKzE,EAAE,IACP0E,EAAK1E,EAAE,IACP2E,EAAK3E,EAAE,IACP4E,EAAK5E,EAAE,IACPnC,EAAI,IAAM4G,EAAKtF,EAAMuF,EAAKtF,EAAMuF,EAAKrF,EAAMsF,EAAKnC,EAChD5E,EAAI,IAAM4G,EAAK1F,EAAM2F,EAAKrF,EAAMsF,EAAKpF,EAAMqF,EAAKlC,EAChD7E,EAAI,IAAM4G,EAAKzF,EAAM0F,EAAKzF,EAAM0F,EAAKnF,EAAMoF,EAAKjC,EAChD9E,EAAI,IAAM4G,EAAKnC,EAAMoC,EAAKnC,EAAMoC,EAAKnC,EAAMoC,EAAKhC,EACzC/E,EAWF,SAAS,GAAUA,EAAKE,EAAGyC,GAChC,IAGIrB,EAAKJ,EAAKC,EAAKsD,EACflD,EAAKC,EAAKJ,EAAKsD,EACfjD,EAAKC,EAAKC,EAAKgD,EALf/B,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNe,EAAIf,EAAE,GAyCV,OApCIzC,IAAMF,GACRA,EAAI,IAAME,EAAE,GAAK0C,EAAI1C,EAAE,GAAK2C,EAAI3C,EAAE,GAAKwD,EAAIxD,EAAE,IAC7CF,EAAI,IAAME,EAAE,GAAK0C,EAAI1C,EAAE,GAAK2C,EAAI3C,EAAE,GAAKwD,EAAIxD,EAAE,IAC7CF,EAAI,IAAME,EAAE,GAAK0C,EAAI1C,EAAE,GAAK2C,EAAI3C,EAAE,IAAMwD,EAAIxD,EAAE,IAC9CF,EAAI,IAAME,EAAE,GAAK0C,EAAI1C,EAAE,GAAK2C,EAAI3C,EAAE,IAAMwD,EAAIxD,EAAE,MAE9CoB,EAAMpB,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRuE,EAAMvE,EAAE,GACRqB,EAAMrB,EAAE,GACRsB,EAAMtB,EAAE,GACRkB,EAAMlB,EAAE,GACRwE,EAAMxE,EAAE,GACRuB,EAAMvB,EAAE,GACRwB,EAAMxB,EAAE,GACRyB,EAAMzB,EAAE,IACRyE,EAAMzE,EAAE,IACRF,EAAI,GAAKsB,EACTtB,EAAI,GAAKkB,EACTlB,EAAI,GAAKmB,EACTnB,EAAI,GAAKyE,EACTzE,EAAI,GAAKuB,EACTvB,EAAI,GAAKwB,EACTxB,EAAI,GAAKoB,EACTpB,EAAI,GAAK0E,EACT1E,EAAI,GAAKyB,EACTzB,EAAI,GAAK0B,EACT1B,EAAI,IAAM2B,EACV3B,EAAI,IAAM2E,EACV3E,EAAI,IAAMsB,EAAMsB,EAAIrB,EAAMsB,EAAIpB,EAAMiC,EAAIxD,EAAE,IAC1CF,EAAI,IAAMkB,EAAM0B,EAAIpB,EAAMqB,EAAInB,EAAMgC,EAAIxD,EAAE,IAC1CF,EAAI,IAAMmB,EAAMyB,EAAIxB,EAAMyB,EAAIlB,EAAM+B,EAAIxD,EAAE,IAC1CF,EAAI,IAAMyE,EAAM7B,EAAI8B,EAAM7B,EAAI8B,EAAMjB,EAAIxD,EAAE,KAGrCF,EAWF,SAAS,GAAMA,EAAKE,EAAGyC,GAC5B,IAAIC,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNe,EAAIf,EAAE,GAiBV,OAhBA3C,EAAI,GAAKE,EAAE,GAAK0C,EAChB5C,EAAI,GAAKE,EAAE,GAAK0C,EAChB5C,EAAI,GAAKE,EAAE,GAAK0C,EAChB5C,EAAI,GAAKE,EAAE,GAAK0C,EAChB5C,EAAI,GAAKE,EAAE,GAAK2C,EAChB7C,EAAI,GAAKE,EAAE,GAAK2C,EAChB7C,EAAI,GAAKE,EAAE,GAAK2C,EAChB7C,EAAI,GAAKE,EAAE,GAAK2C,EAChB7C,EAAI,GAAKE,EAAE,GAAKwD,EAChB1D,EAAI,GAAKE,EAAE,GAAKwD,EAChB1D,EAAI,IAAME,EAAE,IAAMwD,EAClB1D,EAAI,IAAME,EAAE,IAAMwD,EAClB1D,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACLF,EAYF,SAAS,GAAOA,EAAKE,EAAG6C,EAAKqF,GAClC,IAIIpF,EAAGE,EAAGmF,EACN/G,EAAKJ,EAAKC,EAAKsD,EACflD,EAAKC,EAAKJ,EAAKsD,EACfjD,EAAKC,EAAKC,EAAKgD,EACfvC,EAAKR,EAAKS,EACVC,EAAKT,EAAKU,EACVC,EAAKV,EAAKW,EAVVG,EAAIwF,EAAK,GACTvF,EAAIuF,EAAK,GACT1E,EAAI0E,EAAK,GACTE,EAAM1I,KAAKgG,MAAMhD,EAAGC,EAAGa,GAS3B,OAAI4E,EAAM,EACD,MAIT1F,GADA0F,EAAM,EAAIA,EAEVzF,GAAKyF,EACL5E,GAAK4E,EACLtF,EAAIpD,KAAKqD,IAAIF,GAEbsF,EAAI,GADJnF,EAAItD,KAAKuD,IAAIJ,IAEbzB,EAAMpB,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRuE,EAAMvE,EAAE,GACRqB,EAAMrB,EAAE,GACRsB,EAAMtB,EAAE,GACRkB,EAAMlB,EAAE,GACRwE,EAAMxE,EAAE,GACRuB,EAAMvB,EAAE,GACRwB,EAAMxB,EAAE,GACRyB,EAAMzB,EAAE,IACRyE,EAAMzE,EAAE,IAERkC,EAAMQ,EAAIA,EAAIyF,EAAInF,EAClBtB,EAAMiB,EAAID,EAAIyF,EAAI3E,EAAIV,EACtBX,EAAMqB,EAAId,EAAIyF,EAAIxF,EAAIG,EACtBV,EAAMM,EAAIC,EAAIwF,EAAI3E,EAAIV,EACtBnB,EAAMgB,EAAIA,EAAIwF,EAAInF,EAClBX,EAAMmB,EAAIb,EAAIwF,EAAIzF,EAAII,EACtBR,EAAMI,EAAIc,EAAI2E,EAAIxF,EAAIG,EACtBlB,EAAMe,EAAIa,EAAI2E,EAAIzF,EAAII,EACtBP,EAAMiB,EAAIA,EAAI2E,EAAInF,EAElBlD,EAAI,GAAKsB,EAAMc,EAAMb,EAAMK,EAAMH,EAAMY,EACvCrC,EAAI,GAAKkB,EAAMkB,EAAMZ,EAAMI,EAAMF,EAAMW,EACvCrC,EAAI,GAAKmB,EAAMiB,EAAMhB,EAAMQ,EAAMD,EAAMU,EACvCrC,EAAI,GAAKyE,EAAMrC,EAAMsC,EAAM9C,EAAM+C,EAAMtC,EACvCrC,EAAI,GAAKsB,EAAMgB,EAAMf,EAAMM,EAAMJ,EAAMc,EACvCvC,EAAI,GAAKkB,EAAMoB,EAAMd,EAAMK,EAAMH,EAAMa,EACvCvC,EAAI,GAAKmB,EAAMmB,EAAMlB,EAAMS,EAAMF,EAAMY,EACvCvC,EAAI,GAAKyE,EAAMnC,EAAMoC,EAAM7C,EAAM8C,EAAMpC,EACvCvC,EAAI,GAAKsB,EAAMkB,EAAMjB,EAAMO,EAAML,EAAMgB,EACvCzC,EAAI,GAAKkB,EAAMsB,EAAMhB,EAAMM,EAAMJ,EAAMe,EACvCzC,EAAI,IAAMmB,EAAMqB,EAAMpB,EAAMU,EAAMH,EAAMc,EACxCzC,EAAI,IAAMyE,EAAMjC,EAAMkC,EAAM5C,EAAM6C,EAAMlC,EAEpCvC,IAAMF,IAERA,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,KAGPF,GAWF,SAASuI,GAAQvI,EAAKE,EAAG6C,GAC9B,IAAIC,EAAIpD,KAAKqD,IAAIF,GACbG,EAAItD,KAAKuD,IAAIJ,GACbxB,EAAMrB,EAAE,GACRsB,EAAMtB,EAAE,GACRkB,EAAMlB,EAAE,GACRwE,EAAMxE,EAAE,GACRuB,EAAMvB,EAAE,GACRwB,EAAMxB,EAAE,GACRyB,EAAMzB,EAAE,IACRyE,EAAMzE,EAAE,IAuBZ,OArBIA,IAAMF,IAERA,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,KAIdF,EAAI,GAAKuB,EAAM2B,EAAIzB,EAAMuB,EACzBhD,EAAI,GAAKwB,EAAM0B,EAAIxB,EAAMsB,EACzBhD,EAAI,GAAKoB,EAAM8B,EAAIvB,EAAMqB,EACzBhD,EAAI,GAAK0E,EAAMxB,EAAIyB,EAAM3B,EACzBhD,EAAI,GAAKyB,EAAMyB,EAAI3B,EAAMyB,EACzBhD,EAAI,GAAK0B,EAAMwB,EAAI1B,EAAMwB,EACzBhD,EAAI,IAAM2B,EAAMuB,EAAI9B,EAAM4B,EAC1BhD,EAAI,IAAM2E,EAAMzB,EAAIwB,EAAM1B,EACnBhD,EAWF,SAASwI,GAAQxI,EAAKE,EAAG6C,GAC9B,IAAIC,EAAIpD,KAAKqD,IAAIF,GACbG,EAAItD,KAAKuD,IAAIJ,GACbzB,EAAMpB,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRuE,EAAMvE,EAAE,GACRuB,EAAMvB,EAAE,GACRwB,EAAMxB,EAAE,GACRyB,EAAMzB,EAAE,IACRyE,EAAMzE,EAAE,IAuBZ,OArBIA,IAAMF,IAERA,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,KAIdF,EAAI,GAAKsB,EAAM4B,EAAIzB,EAAMuB,EACzBhD,EAAI,GAAKkB,EAAMgC,EAAIxB,EAAMsB,EACzBhD,EAAI,GAAKmB,EAAM+B,EAAIvB,EAAMqB,EACzBhD,EAAI,GAAKyE,EAAMvB,EAAIyB,EAAM3B,EACzBhD,EAAI,GAAKsB,EAAM0B,EAAIvB,EAAMyB,EACzBlD,EAAI,GAAKkB,EAAM8B,EAAItB,EAAMwB,EACzBlD,EAAI,IAAMmB,EAAM6B,EAAIrB,EAAMuB,EAC1BlD,EAAI,IAAMyE,EAAMzB,EAAI2B,EAAMzB,EACnBlD,EAWF,SAASyI,GAAQzI,EAAKE,EAAG6C,GAC9B,IAAIC,EAAIpD,KAAKqD,IAAIF,GACbG,EAAItD,KAAKuD,IAAIJ,GACbzB,EAAMpB,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRuE,EAAMvE,EAAE,GACRqB,EAAMrB,EAAE,GACRsB,EAAMtB,EAAE,GACRkB,EAAMlB,EAAE,GACRwE,EAAMxE,EAAE,GAuBZ,OArBIA,IAAMF,IAERA,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,IACZF,EAAI,IAAME,EAAE,KAIdF,EAAI,GAAKsB,EAAM4B,EAAI3B,EAAMyB,EACzBhD,EAAI,GAAKkB,EAAMgC,EAAI1B,EAAMwB,EACzBhD,EAAI,GAAKmB,EAAM+B,EAAI9B,EAAM4B,EACzBhD,EAAI,GAAKyE,EAAMvB,EAAIwB,EAAM1B,EACzBhD,EAAI,GAAKuB,EAAM2B,EAAI5B,EAAM0B,EACzBhD,EAAI,GAAKwB,EAAM0B,EAAIhC,EAAM8B,EACzBhD,EAAI,GAAKoB,EAAM8B,EAAI/B,EAAM6B,EACzBhD,EAAI,GAAK0E,EAAMxB,EAAIuB,EAAMzB,EAClBhD,EAcF,SAAS,GAAgBA,EAAK2C,GAiBnC,OAhBA3C,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM2C,EAAE,GACZ3C,EAAI,IAAM2C,EAAE,GACZ3C,EAAI,IAAM2C,EAAE,GACZ3C,EAAI,IAAM,EACHA,EAcF,SAAS,GAAYA,EAAK2C,GAiB/B,OAhBA3C,EAAI,GAAK2C,EAAE,GACX3C,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK2C,EAAE,GACX3C,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM2C,EAAE,GACZ3C,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAeF,SAAS,GAAaA,EAAK+C,EAAKqF,GACrC,IAIIpF,EAAGE,EAAGmF,EAJNzF,EAAIwF,EAAK,GACTvF,EAAIuF,EAAK,GACT1E,EAAI0E,EAAK,GACTE,EAAM1I,KAAKgG,MAAMhD,EAAGC,EAAGa,GAG3B,OAAI4E,EAAM,EACD,MAIT1F,GADA0F,EAAM,EAAIA,EAEVzF,GAAKyF,EACL5E,GAAK4E,EACLtF,EAAIpD,KAAKqD,IAAIF,GAEbsF,EAAI,GADJnF,EAAItD,KAAKuD,IAAIJ,IAGb/C,EAAI,GAAK4C,EAAIA,EAAIyF,EAAInF,EACrBlD,EAAI,GAAK6C,EAAID,EAAIyF,EAAI3E,EAAIV,EACzBhD,EAAI,GAAK0D,EAAId,EAAIyF,EAAIxF,EAAIG,EACzBhD,EAAI,GAAK,EACTA,EAAI,GAAK4C,EAAIC,EAAIwF,EAAI3E,EAAIV,EACzBhD,EAAI,GAAK6C,EAAIA,EAAIwF,EAAInF,EACrBlD,EAAI,GAAK0D,EAAIb,EAAIwF,EAAIzF,EAAII,EACzBhD,EAAI,GAAK,EACTA,EAAI,GAAK4C,EAAIc,EAAI2E,EAAIxF,EAAIG,EACzBhD,EAAI,GAAK6C,EAAIa,EAAI2E,EAAIzF,EAAII,EACzBhD,EAAI,IAAM0D,EAAIA,EAAI2E,EAAInF,EACtBlD,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,GAcF,SAAS0I,GAAc1I,EAAK+C,GACjC,IAAIC,EAAIpD,KAAKqD,IAAIF,GACbG,EAAItD,KAAKuD,IAAIJ,GAkBjB,OAhBA/C,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAKkD,EACTlD,EAAI,GAAKgD,EACThD,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAMgD,EACVhD,EAAI,IAAMkD,EACVlD,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAcF,SAAS2I,GAAc3I,EAAK+C,GACjC,IAAIC,EAAIpD,KAAKqD,IAAIF,GACbG,EAAItD,KAAKuD,IAAIJ,GAkBjB,OAhBA/C,EAAI,GAAKkD,EACTlD,EAAI,GAAK,EACTA,EAAI,IAAMgD,EACVhD,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAKgD,EACThD,EAAI,GAAK,EACTA,EAAI,IAAMkD,EACVlD,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAcF,SAAS4I,GAAc5I,EAAK+C,GACjC,IAAIC,EAAIpD,KAAKqD,IAAIF,GACbG,EAAItD,KAAKuD,IAAIJ,GAkBjB,OAhBA/C,EAAI,GAAKkD,EACTlD,EAAI,GAAKgD,EACThD,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAMgD,EACVhD,EAAI,GAAKkD,EACTlD,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAkBF,SAAS6I,GAAwB7I,EAAKyD,EAAGd,GAE9C,IAAIC,EAAIa,EAAE,GACNZ,EAAIY,EAAE,GACNC,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNG,EAAKhB,EAAIA,EACTiB,EAAKhB,EAAIA,EACTiB,EAAKJ,EAAIA,EACTK,EAAKnB,EAAIgB,EACTkF,EAAKlG,EAAIiB,EACTkF,EAAKnG,EAAIkB,EACTG,EAAKpB,EAAIgB,EACTmF,EAAKnG,EAAIiB,EACTM,EAAKV,EAAII,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EAiBb,OAhBA9D,EAAI,GAAK,GAAKiE,EAAKG,GACnBpE,EAAI,GAAK8I,EAAKvE,EACdvE,EAAI,GAAK+I,EAAKzE,EACdtE,EAAI,GAAK,EACTA,EAAI,GAAK8I,EAAKvE,EACdvE,EAAI,GAAK,GAAK+D,EAAKK,GACnBpE,EAAI,GAAKgJ,EAAK3E,EACdrE,EAAI,GAAK,EACTA,EAAI,GAAK+I,EAAKzE,EACdtE,EAAI,GAAKgJ,EAAK3E,EACdrE,EAAI,IAAM,GAAK+D,EAAKE,GACpBjE,EAAI,IAAM,EACVA,EAAI,IAAM2C,EAAE,GACZ3C,EAAI,IAAM2C,EAAE,GACZ3C,EAAI,IAAM2C,EAAE,GACZ3C,EAAI,IAAM,EACHA,EAUF,SAASiJ,GAAUjJ,EAAKE,GAC7B,IAAIgJ,EAAc,IAAI,EAAoB,GACtCC,GAAMjJ,EAAE,GACRkJ,GAAMlJ,EAAE,GACRmJ,GAAMnJ,EAAE,GACRoJ,EAAKpJ,EAAE,GACPqJ,EAAKrJ,EAAE,GACPsJ,EAAKtJ,EAAE,GACPuJ,EAAKvJ,EAAE,GACPwJ,EAAKxJ,EAAE,GACPyJ,EAAYR,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAanD,OAXIK,EAAY,GACdT,EAAY,GAA+C,GAAzCK,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,GAAUO,EAC/DT,EAAY,GAA+C,GAAzCM,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,GAAUM,EAC/DT,EAAY,GAA+C,GAAzCO,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,GAAUQ,IAE/DT,EAAY,GAA+C,GAAzCK,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,GACrDF,EAAY,GAA+C,GAAzCM,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,GACrDH,EAAY,GAA+C,GAAzCO,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,IAGvDN,GAAwB7I,EAAKE,EAAGgJ,GACzBlJ,EAYF,SAAS4J,GAAe5J,EAAK6J,GAIlC,OAHA7J,EAAI,GAAK6J,EAAI,IACb7J,EAAI,GAAK6J,EAAI,IACb7J,EAAI,GAAK6J,EAAI,IACN7J,EAaF,SAAS8J,GAAW9J,EAAK6J,GAC9B,IAAInJ,EAAMmJ,EAAI,GACVlJ,EAAMkJ,EAAI,GACV/B,EAAM+B,EAAI,GACVhJ,EAAMgJ,EAAI,GACV/I,EAAM+I,EAAI,GACV9B,EAAM8B,EAAI,GACV5B,EAAM4B,EAAI,GACV3B,EAAM2B,EAAI,GACV1B,EAAM0B,EAAI,IAId,OAHA7J,EAAI,GAAKJ,KAAKgG,MAAMlF,EAAKC,EAAKmH,GAC9B9H,EAAI,GAAKJ,KAAKgG,MAAM/E,EAAKC,EAAKiH,GAC9B/H,EAAI,GAAKJ,KAAKgG,MAAMqC,EAAKC,EAAKC,GACvBnI,EAYF,SAAS+J,GAAY/J,EAAK6J,GAC/B,IAAIG,EAAU,IAAI,EAAoB,GACtCF,GAAWE,EAASH,GACpB,IAAII,EAAM,EAAID,EAAQ,GAClBE,EAAM,EAAIF,EAAQ,GAClBG,EAAM,EAAIH,EAAQ,GAClBI,EAAOP,EAAI,GAAKI,EAChBI,EAAOR,EAAI,GAAKK,EAChBI,EAAOT,EAAI,GAAKM,EAChBI,EAAOV,EAAI,GAAKI,EAChBO,EAAOX,EAAI,GAAKK,EAChBO,EAAOZ,EAAI,GAAKM,EAChBO,EAAOb,EAAI,GAAKI,EAChBU,EAAOd,EAAI,GAAKK,EAChBU,EAAOf,EAAI,IAAMM,EACjBU,EAAQT,EAAOI,EAAOI,EACtBE,EAAI,EA4BR,OA1BID,EAAQ,GACVC,EAA6B,EAAzBlL,KAAK8H,KAAKmD,EAAQ,GACtB7K,EAAI,GAAK,IAAO8K,EAChB9K,EAAI,IAAMyK,EAAOE,GAAQG,EACzB9K,EAAI,IAAM0K,EAAOJ,GAAQQ,EACzB9K,EAAI,IAAMqK,EAAOE,GAAQO,GAChBV,EAAOI,GAAQJ,EAAOQ,GAC/BE,EAA0C,EAAtClL,KAAK8H,KAAK,EAAM0C,EAAOI,EAAOI,GAClC5K,EAAI,IAAMyK,EAAOE,GAAQG,EACzB9K,EAAI,GAAK,IAAO8K,EAChB9K,EAAI,IAAMqK,EAAOE,GAAQO,EACzB9K,EAAI,IAAM0K,EAAOJ,GAAQQ,GAChBN,EAAOI,GAChBE,EAA0C,EAAtClL,KAAK8H,KAAK,EAAM8C,EAAOJ,EAAOQ,GAClC5K,EAAI,IAAM0K,EAAOJ,GAAQQ,EACzB9K,EAAI,IAAMqK,EAAOE,GAAQO,EACzB9K,EAAI,GAAK,IAAO8K,EAChB9K,EAAI,IAAMyK,EAAOE,GAAQG,IAEzBA,EAA0C,EAAtClL,KAAK8H,KAAK,EAAMkD,EAAOR,EAAOI,GAClCxK,EAAI,IAAMqK,EAAOE,GAAQO,EACzB9K,EAAI,IAAM0K,EAAOJ,GAAQQ,EACzB9K,EAAI,IAAMyK,EAAOE,GAAQG,EACzB9K,EAAI,GAAK,IAAO8K,GAGX9K,EAoBF,SAAS+K,GAA6B/K,EAAKyD,EAAGd,EAAGK,GAEtD,IAAIJ,EAAIa,EAAE,GACNZ,EAAIY,EAAE,GACNC,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNG,EAAKhB,EAAIA,EACTiB,EAAKhB,EAAIA,EACTiB,EAAKJ,EAAIA,EACTK,EAAKnB,EAAIgB,EACTkF,EAAKlG,EAAIiB,EACTkF,EAAKnG,EAAIkB,EACTG,EAAKpB,EAAIgB,EACTmF,EAAKnG,EAAIiB,EACTM,EAAKV,EAAII,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EACTkH,EAAKhI,EAAE,GACPiI,EAAKjI,EAAE,GACPkI,EAAKlI,EAAE,GAiBX,OAhBAhD,EAAI,IAAM,GAAKiE,EAAKG,IAAO4G,EAC3BhL,EAAI,IAAM8I,EAAKvE,GAAMyG,EACrBhL,EAAI,IAAM+I,EAAKzE,GAAM0G,EACrBhL,EAAI,GAAK,EACTA,EAAI,IAAM8I,EAAKvE,GAAM0G,EACrBjL,EAAI,IAAM,GAAK+D,EAAKK,IAAO6G,EAC3BjL,EAAI,IAAMgJ,EAAK3E,GAAM4G,EACrBjL,EAAI,GAAK,EACTA,EAAI,IAAM+I,EAAKzE,GAAM4G,EACrBlL,EAAI,IAAMgJ,EAAK3E,GAAM6G,EACrBlL,EAAI,KAAO,GAAK+D,EAAKE,IAAOiH,EAC5BlL,EAAI,IAAM,EACVA,EAAI,IAAM2C,EAAE,GACZ3C,EAAI,IAAM2C,EAAE,GACZ3C,EAAI,IAAM2C,EAAE,GACZ3C,EAAI,IAAM,EACHA,EAuBF,SAASmL,GAAmCnL,EAAKyD,EAAGd,EAAGK,EAAGoI,GAE/D,IAAIxI,EAAIa,EAAE,GACNZ,EAAIY,EAAE,GACNC,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNG,EAAKhB,EAAIA,EACTiB,EAAKhB,EAAIA,EACTiB,EAAKJ,EAAIA,EACTK,EAAKnB,EAAIgB,EACTkF,EAAKlG,EAAIiB,EACTkF,EAAKnG,EAAIkB,EACTG,EAAKpB,EAAIgB,EACTmF,EAAKnG,EAAIiB,EACTM,EAAKV,EAAII,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EACTkH,EAAKhI,EAAE,GACPiI,EAAKjI,EAAE,GACPkI,EAAKlI,EAAE,GACPqI,EAAKD,EAAE,GACPE,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPI,GAAQ,GAAKvH,EAAKG,IAAO4G,EACzBS,GAAQ3C,EAAKvE,GAAMyG,EACnBU,GAAQ3C,EAAKzE,GAAM0G,EACnBW,GAAQ7C,EAAKvE,GAAM0G,EACnBW,GAAQ,GAAK7H,EAAKK,IAAO6G,EACzBY,GAAQ7C,EAAK3E,GAAM4G,EACnBa,GAAQ/C,EAAKzE,GAAM4G,EACnBa,GAAQ/C,EAAK3E,GAAM6G,EACnBc,GAAS,GAAKjI,EAAKE,IAAOiH,EAiB9B,OAhBAlL,EAAI,GAAKwL,EACTxL,EAAI,GAAKyL,EACTzL,EAAI,GAAK0L,EACT1L,EAAI,GAAK,EACTA,EAAI,GAAK2L,EACT3L,EAAI,GAAK4L,EACT5L,EAAI,GAAK6L,EACT7L,EAAI,GAAK,EACTA,EAAI,GAAK8L,EACT9L,EAAI,GAAK+L,EACT/L,EAAI,IAAMgM,EACVhM,EAAI,IAAM,EACVA,EAAI,IAAM2C,EAAE,GAAK0I,GAAMG,EAAOH,EAAKM,EAAOL,EAAKQ,EAAOP,GACtDvL,EAAI,IAAM2C,EAAE,GAAK2I,GAAMG,EAAOJ,EAAKO,EAAON,EAAKS,EAAOR,GACtDvL,EAAI,IAAM2C,EAAE,GAAK4I,GAAMG,EAAOL,EAAKQ,EAAOP,EAAKU,EAAQT,GACvDvL,EAAI,IAAM,EACHA,EAWF,SAAS,GAASA,EAAKyD,GAC5B,IAAIb,EAAIa,EAAE,GACNZ,EAAIY,EAAE,GACNC,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNG,EAAKhB,EAAIA,EACTiB,EAAKhB,EAAIA,EACTiB,EAAKJ,EAAIA,EACTK,EAAKnB,EAAIgB,EACTI,EAAKnB,EAAIe,EACTK,EAAKpB,EAAIgB,EACTK,EAAKR,EAAIE,EACTO,EAAKT,EAAIG,EACTO,EAAKV,EAAII,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EAiBb,OAhBA9D,EAAI,GAAK,EAAIiE,EAAKG,EAClBpE,EAAI,GAAKgE,EAAKO,EACdvE,EAAI,GAAKkE,EAAKI,EACdtE,EAAI,GAAK,EACTA,EAAI,GAAKgE,EAAKO,EACdvE,EAAI,GAAK,EAAI+D,EAAKK,EAClBpE,EAAI,GAAKmE,EAAKE,EACdrE,EAAI,GAAK,EACTA,EAAI,GAAKkE,EAAKI,EACdtE,EAAI,GAAKmE,EAAKE,EACdrE,EAAI,IAAM,EAAI+D,EAAKE,EACnBjE,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAeF,SAASiM,GAAQjM,EAAKkM,EAAMC,EAAOC,EAAQC,EAAKC,EAAMC,GAC3D,IAAIC,EAAK,GAAKL,EAAQD,GAClBO,EAAK,GAAKJ,EAAMD,GAChBM,EAAK,GAAKJ,EAAOC,GAiBrB,OAhBAvM,EAAI,GAAY,EAAPsM,EAAWE,EACpBxM,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAY,EAAPsM,EAAWG,EACpBzM,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAMmM,EAAQD,GAAQM,EAC1BxM,EAAI,IAAMqM,EAAMD,GAAUK,EAC1BzM,EAAI,KAAOuM,EAAMD,GAAQI,EACzB1M,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAMuM,EAAMD,EAAO,EAAII,EAC3B1M,EAAI,IAAM,EACHA,EAgBF,SAAS2M,GAAc3M,EAAK4M,EAAMC,EAAQP,EAAMC,GACrD,IACIG,EADAI,EAAI,EAAMlN,KAAKmN,IAAIH,EAAO,GA0B9B,OAxBA5M,EAAI,GAAK8M,EAAID,EACb7M,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK8M,EACT9M,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EAEC,MAAPuM,GAAeA,IAAQS,KACzBN,EAAK,GAAKJ,EAAOC,GACjBvM,EAAI,KAAOuM,EAAMD,GAAQI,EACzB1M,EAAI,IAAM,EAAIuM,EAAMD,EAAOI,IAE3B1M,EAAI,KAAO,EACXA,EAAI,KAAO,EAAIsM,GAGVtM,EAOF,IAAIiN,GAAcN,GAelB,SAASO,GAAclN,EAAK4M,EAAMC,EAAQP,EAAMC,GACrD,IACIG,EADAI,EAAI,EAAMlN,KAAKmN,IAAIH,EAAO,GA0B9B,OAxBA5M,EAAI,GAAK8M,EAAID,EACb7M,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK8M,EACT9M,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EAEC,MAAPuM,GAAeA,IAAQS,KACzBN,EAAK,GAAKJ,EAAOC,GACjBvM,EAAI,IAAMuM,EAAMG,EAChB1M,EAAI,IAAMuM,EAAMD,EAAOI,IAEvB1M,EAAI,KAAO,EACXA,EAAI,KAAOsM,GAGNtM,EAcF,SAASmN,GAA2BnN,EAAKoN,EAAKd,EAAMC,GACzD,IAAIc,EAAQzN,KAAKmN,IAAIK,EAAIE,UAAY1N,KAAKE,GAAK,KAC3CyN,EAAU3N,KAAKmN,IAAIK,EAAII,YAAc5N,KAAKE,GAAK,KAC/C2N,EAAU7N,KAAKmN,IAAIK,EAAIM,YAAc9N,KAAKE,GAAK,KAC/C6N,EAAW/N,KAAKmN,IAAIK,EAAIQ,aAAehO,KAAKE,GAAK,KACjD+N,EAAS,GAAOJ,EAAUE,GAC1BG,EAAS,GAAOT,EAAQE,GAiB5B,OAhBAvN,EAAI,GAAK6N,EACT7N,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK8N,EACT9N,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,KAAQyN,EAAUE,GAAYE,EAAS,GAC3C7N,EAAI,IAAMqN,EAAQE,GAAWO,EAAS,GACtC9N,EAAI,IAAMuM,GAAOD,EAAOC,GACxBvM,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAMuM,EAAMD,GAAQA,EAAOC,GAC/BvM,EAAI,IAAM,EACHA,EAiBF,SAAS+N,GAAQ/N,EAAKkM,EAAMC,EAAOC,EAAQC,EAAKC,EAAMC,GAC3D,IAAIyB,EAAK,GAAK9B,EAAOC,GACjB8B,EAAK,GAAK7B,EAASC,GACnBK,EAAK,GAAKJ,EAAOC,GAiBrB,OAhBAvM,EAAI,IAAM,EAAIgO,EACdhO,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EAAIiO,EACdjO,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EAAI0M,EACd1M,EAAI,IAAM,EACVA,EAAI,KAAOkM,EAAOC,GAAS6B,EAC3BhO,EAAI,KAAOqM,EAAMD,GAAU6B,EAC3BjO,EAAI,KAAOuM,EAAMD,GAAQI,EACzB1M,EAAI,IAAM,EACHA,EAOF,IAAIkO,GAAQH,GAgBZ,SAASI,GAAQnO,EAAKkM,EAAMC,EAAOC,EAAQC,EAAKC,EAAMC,GAC3D,IAAIyB,EAAK,GAAK9B,EAAOC,GACjB8B,EAAK,GAAK7B,EAASC,GACnBK,EAAK,GAAKJ,EAAOC,GAiBrB,OAhBAvM,EAAI,IAAM,EAAIgO,EACdhO,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EAAIiO,EACdjO,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM0M,EACV1M,EAAI,IAAM,EACVA,EAAI,KAAOkM,EAAOC,GAAS6B,EAC3BhO,EAAI,KAAOqM,EAAMD,GAAU6B,EAC3BjO,EAAI,IAAMsM,EAAOI,EACjB1M,EAAI,IAAM,EACHA,EAaF,SAASoO,GAAOpO,EAAKqO,EAAKC,EAAQC,GACvC,IAAIC,EAAIC,EAAI7K,EAAI8K,EAAIC,EAAI9K,EAAI+K,EAAIC,EAAI/K,EAAIwE,EACpCwG,EAAOT,EAAI,GACXU,EAAOV,EAAI,GACXW,EAAOX,EAAI,GACXY,EAAMV,EAAG,GACTW,EAAMX,EAAG,GACTY,EAAMZ,EAAG,GACTa,EAAUd,EAAO,GACjBe,EAAUf,EAAO,GACjBgB,EAAUhB,EAAO,GAErB,OAAI1O,KAAKyH,IAAIyH,EAAOM,GAAW,GAAoBxP,KAAKyH,IAAI0H,EAAOM,GAAW,GAAoBzP,KAAKyH,IAAI2H,EAAOM,GAAW,EACpH,EAAStP,IAGlB4O,EAAKE,EAAOM,EACZP,EAAKE,EAAOM,EACZvL,EAAKkL,EAAOM,EAKZd,EAAKU,GADLpL,GAHAwE,EAAM,EAAI1I,KAAKgG,MAAMgJ,EAAIC,EAAI/K,IAIbqL,GAFhBN,GAAMvG,GAGNmG,EAAKU,GAJLP,GAAMtG,GAIU2G,EAAMnL,EACtBF,EAAKqL,EAAMJ,EAAKK,EAAMN,GACtBtG,EAAM1I,KAAKgG,MAAM4I,EAAIC,EAAI7K,KAQvB4K,GADAlG,EAAM,EAAIA,EAEVmG,GAAMnG,EACN1E,GAAM0E,IAPNkG,EAAK,EACLC,EAAK,EACL7K,EAAK,GAQP8K,EAAKG,EAAKjL,EAAKE,EAAK2K,EACpBE,EAAK7K,EAAK0K,EAAKI,EAAKhL,EACpBC,EAAK+K,EAAKH,EAAKI,EAAKL,GACpBlG,EAAM1I,KAAKgG,MAAM8I,EAAIC,EAAI9K,KAQvB6K,GADApG,EAAM,EAAIA,EAEVqG,GAAMrG,EACNzE,GAAMyE,IAPNoG,EAAK,EACLC,EAAK,EACL9K,EAAK,GAQP7D,EAAI,GAAKwO,EACTxO,EAAI,GAAK0O,EACT1O,EAAI,GAAK4O,EACT5O,EAAI,GAAK,EACTA,EAAI,GAAKyO,EACTzO,EAAI,GAAK2O,EACT3O,EAAI,GAAK6O,EACT7O,EAAI,GAAK,EACTA,EAAI,GAAK4D,EACT5D,EAAI,GAAK6D,EACT7D,EAAI,IAAM8D,EACV9D,EAAI,IAAM,EACVA,EAAI,MAAQwO,EAAKM,EAAOL,EAAKM,EAAOnL,EAAKoL,GACzChP,EAAI,MAAQ0O,EAAKI,EAAOH,EAAKI,EAAOlL,EAAKmL,GACzChP,EAAI,MAAQ4O,EAAKE,EAAOD,EAAKE,EAAOjL,EAAKkL,GACzChP,EAAI,IAAM,EACHA,GAYF,SAASuP,GAASvP,EAAKqO,EAAKmB,EAAQjB,GACzC,IAAIO,EAAOT,EAAI,GACXU,EAAOV,EAAI,GACXW,EAAOX,EAAI,GACXY,EAAMV,EAAG,GACTW,EAAMX,EAAG,GACTY,EAAMZ,EAAG,GACTK,EAAKE,EAAOU,EAAO,GACnBX,EAAKE,EAAOS,EAAO,GACnB1L,EAAKkL,EAAOQ,EAAO,GACnBlH,EAAMsG,EAAKA,EAAKC,EAAKA,EAAK/K,EAAKA,EAE/BwE,EAAM,IAERsG,GADAtG,EAAM,EAAI1I,KAAK8H,KAAKY,GAEpBuG,GAAMvG,EACNxE,GAAMwE,GAGR,IAAIkG,EAAKU,EAAMpL,EAAKqL,EAAMN,EACtBJ,EAAKU,EAAMP,EAAKK,EAAMnL,EACtBF,EAAKqL,EAAMJ,EAAKK,EAAMN,EA0B1B,OAzBAtG,EAAMkG,EAAKA,EAAKC,EAAKA,EAAK7K,EAAKA,GAErB,IAER4K,GADAlG,EAAM,EAAI1I,KAAK8H,KAAKY,GAEpBmG,GAAMnG,EACN1E,GAAM0E,GAGRtI,EAAI,GAAKwO,EACTxO,EAAI,GAAKyO,EACTzO,EAAI,GAAK4D,EACT5D,EAAI,GAAK,EACTA,EAAI,GAAK6O,EAAKjL,EAAKE,EAAK2K,EACxBzO,EAAI,GAAK8D,EAAK0K,EAAKI,EAAKhL,EACxB5D,EAAI,GAAK4O,EAAKH,EAAKI,EAAKL,EACxBxO,EAAI,GAAK,EACTA,EAAI,GAAK4O,EACT5O,EAAI,GAAK6O,EACT7O,EAAI,IAAM8D,EACV9D,EAAI,IAAM,EACVA,EAAI,IAAM8O,EACV9O,EAAI,IAAM+O,EACV/O,EAAI,IAAMgP,EACVhP,EAAI,IAAM,EACHA,EASF,SAAS,GAAIE,GAClB,MAAO,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,IAAM,KAAOA,EAAE,IAAM,KAAOA,EAAE,IAAM,KAAOA,EAAE,IAAM,KAAOA,EAAE,IAAM,KAAOA,EAAE,IAAM,IAS3O,SAAS,GAAKA,GACnB,OAAON,KAAKgG,MAAM1F,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAAKA,EAAE,IAAKA,EAAE,IAAKA,EAAE,IAAKA,EAAE,IAAKA,EAAE,KAW9G,SAAS,GAAIF,EAAKE,EAAGiC,GAiB1B,OAhBAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,IAAME,EAAE,IAAMiC,EAAE,IACpBnC,EAAI,IAAME,EAAE,IAAMiC,EAAE,IACpBnC,EAAI,IAAME,EAAE,IAAMiC,EAAE,IACpBnC,EAAI,IAAME,EAAE,IAAMiC,EAAE,IACpBnC,EAAI,IAAME,EAAE,IAAMiC,EAAE,IACpBnC,EAAI,IAAME,EAAE,IAAMiC,EAAE,IACbnC,EAWF,SAAS,GAASA,EAAKE,EAAGiC,GAiB/B,OAhBAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,IAAME,EAAE,IAAMiC,EAAE,IACpBnC,EAAI,IAAME,EAAE,IAAMiC,EAAE,IACpBnC,EAAI,IAAME,EAAE,IAAMiC,EAAE,IACpBnC,EAAI,IAAME,EAAE,IAAMiC,EAAE,IACpBnC,EAAI,IAAME,EAAE,IAAMiC,EAAE,IACpBnC,EAAI,IAAME,EAAE,IAAMiC,EAAE,IACbnC,EAWF,SAAS,GAAeA,EAAKE,EAAGiC,GAiBrC,OAhBAnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,IAAME,EAAE,IAAMiC,EAClBnC,EAAI,IAAME,EAAE,IAAMiC,EAClBnC,EAAI,IAAME,EAAE,IAAMiC,EAClBnC,EAAI,IAAME,EAAE,IAAMiC,EAClBnC,EAAI,IAAME,EAAE,IAAMiC,EAClBnC,EAAI,IAAME,EAAE,IAAMiC,EACXnC,EAYF,SAAS,GAAqBA,EAAKE,EAAGiC,EAAG8D,GAiB9C,OAhBAjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,IAAME,EAAE,IAAMiC,EAAE,IAAM8D,EAC1BjG,EAAI,IAAME,EAAE,IAAMiC,EAAE,IAAM8D,EAC1BjG,EAAI,IAAME,EAAE,IAAMiC,EAAE,IAAM8D,EAC1BjG,EAAI,IAAME,EAAE,IAAMiC,EAAE,IAAM8D,EAC1BjG,EAAI,IAAME,EAAE,IAAMiC,EAAE,IAAM8D,EAC1BjG,EAAI,IAAME,EAAE,IAAMiC,EAAE,IAAM8D,EACnBjG,EAUF,SAAS,GAAYE,EAAGiC,GAC7B,OAAOjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,MAAQiC,EAAE,KAAOjC,EAAE,MAAQiC,EAAE,KAAOjC,EAAE,MAAQiC,EAAE,KAAOjC,EAAE,MAAQiC,EAAE,KAAOjC,EAAE,MAAQiC,EAAE,KAAOjC,EAAE,MAAQiC,EAAE,IAUvR,SAAS,GAAOjC,EAAGiC,GACxB,IAAIgE,EAAKjG,EAAE,GACPkG,EAAKlG,EAAE,GACPmG,EAAKnG,EAAE,GACPoG,EAAKpG,EAAE,GACPqG,EAAKrG,EAAE,GACPsG,EAAKtG,EAAE,GACPuG,EAAKvG,EAAE,GACPwG,EAAKxG,EAAE,GACPyG,EAAKzG,EAAE,GACPuP,EAAKvP,EAAE,GACPqB,EAAMrB,EAAE,IACRsB,EAAMtB,EAAE,IACRkB,EAAMlB,EAAE,IACRwE,EAAMxE,EAAE,IACRwP,EAAMxP,EAAE,IACRyP,EAAMzP,EAAE,IACR0G,EAAKzE,EAAE,GACP0E,EAAK1E,EAAE,GACP2E,EAAK3E,EAAE,GACP4E,EAAK5E,EAAE,GACP6E,EAAK7E,EAAE,GACP8E,EAAK9E,EAAE,GACP+E,EAAK/E,EAAE,GACPgF,EAAKhF,EAAE,GACPiF,EAAKjF,EAAE,GACPyN,EAAKzN,EAAE,GACPG,EAAMH,EAAE,IACRN,EAAMM,EAAE,IACRI,EAAMJ,EAAE,IACR0N,EAAM1N,EAAE,IACR2N,EAAM3N,EAAE,IACR4N,EAAM5N,EAAE,IACZ,OAAOvC,KAAKyH,IAAIlB,EAAKS,IAAO,EAAmBhH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIlB,GAAKvG,KAAKyH,IAAIT,KAAQhH,KAAKyH,IAAIjB,EAAKS,IAAO,EAAmBjH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIjB,GAAKxG,KAAKyH,IAAIR,KAAQjH,KAAKyH,IAAIhB,EAAKS,IAAO,EAAmBlH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIhB,GAAKzG,KAAKyH,IAAIP,KAAQlH,KAAKyH,IAAIf,EAAKS,IAAO,EAAmBnH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIf,GAAK1G,KAAKyH,IAAIN,KAAQnH,KAAKyH,IAAId,EAAKS,IAAO,EAAmBpH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAId,GAAK3G,KAAKyH,IAAIL,KAAQpH,KAAKyH,IAAIb,EAAKS,IAAO,EAAmBrH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIb,GAAK5G,KAAKyH,IAAIJ,KAAQrH,KAAKyH,IAAIZ,EAAKS,IAAO,EAAmBtH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIZ,GAAK7G,KAAKyH,IAAIH,KAAQtH,KAAKyH,IAAIX,EAAKS,IAAO,EAAmBvH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIX,GAAK9G,KAAKyH,IAAIF,KAAQvH,KAAKyH,IAAIV,EAAKS,IAAO,EAAmBxH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIV,GAAK/G,KAAKyH,IAAID,KAAQxH,KAAKyH,IAAIoI,EAAKG,IAAO,EAAmBhQ,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIoI,GAAK7P,KAAKyH,IAAIuI,KAAQhQ,KAAKyH,IAAI9F,EAAMe,IAAQ,EAAmB1C,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAI9F,GAAM3B,KAAKyH,IAAI/E,KAAS1C,KAAKyH,IAAI7F,EAAMK,IAAQ,EAAmBjC,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAI7F,GAAM5B,KAAKyH,IAAIxF,KAASjC,KAAKyH,IAAIjG,EAAMmB,IAAQ,EAAmB3C,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIjG,GAAMxB,KAAKyH,IAAI9E,KAAS3C,KAAKyH,IAAI3C,EAAMmL,IAAQ,EAAmBjQ,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAI3C,GAAM9E,KAAKyH,IAAIwI,KAASjQ,KAAKyH,IAAIqI,EAAMI,IAAQ,EAAmBlQ,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIqI,GAAM9P,KAAKyH,IAAIyI,KAASlQ,KAAKyH,IAAIsI,EAAMI,IAAQ,EAAmBnQ,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIsI,GAAM/P,KAAKyH,IAAI0I,IAOj2C,IAAI,GAAM,GAMN,GAAM,GCz2DV,SAAS,KACd,IAAI/P,EAAM,IAAI,EAAoB,GAQlC,OANI,GAAuBP,eACzBO,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,EASF,SAAS,GAAME,GACpB,IAAIF,EAAM,IAAI,EAAoB,GAIlC,OAHAA,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACJF,EASF,SAAS,GAAOE,GACrB,IAAI0C,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACNwD,EAAIxD,EAAE,GACV,OAAON,KAAKgG,MAAMhD,EAAGC,EAAGa,GAWnB,SAAS,GAAWd,EAAGC,EAAGa,GAC/B,IAAI1D,EAAM,IAAI,EAAoB,GAIlC,OAHAA,EAAI,GAAK4C,EACT5C,EAAI,GAAK6C,EACT7C,EAAI,GAAK0D,EACF1D,EAUF,SAAS,GAAKA,EAAKE,GAIxB,OAHAF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACJF,EAYF,SAAS,GAAIA,EAAK4C,EAAGC,EAAGa,GAI7B,OAHA1D,EAAI,GAAK4C,EACT5C,EAAI,GAAK6C,EACT7C,EAAI,GAAK0D,EACF1D,EAWF,SAAS,GAAIA,EAAKE,EAAGiC,GAI1B,OAHAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GACXnC,EAWF,SAAS,GAASA,EAAKE,EAAGiC,GAI/B,OAHAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GACXnC,EAWF,SAAS,GAASA,EAAKE,EAAGiC,GAI/B,OAHAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GACXnC,EAWF,SAASgQ,GAAOhQ,EAAKE,EAAGiC,GAI7B,OAHAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GACXnC,EAUF,SAASiQ,GAAKjQ,EAAKE,GAIxB,OAHAF,EAAI,GAAKJ,KAAKqQ,KAAK/P,EAAE,IACrBF,EAAI,GAAKJ,KAAKqQ,KAAK/P,EAAE,IACrBF,EAAI,GAAKJ,KAAKqQ,KAAK/P,EAAE,IACdF,EAUF,SAASkQ,GAAMlQ,EAAKE,GAIzB,OAHAF,EAAI,GAAKJ,KAAKsQ,MAAMhQ,EAAE,IACtBF,EAAI,GAAKJ,KAAKsQ,MAAMhQ,EAAE,IACtBF,EAAI,GAAKJ,KAAKsQ,MAAMhQ,EAAE,IACfF,EAWF,SAASmQ,GAAInQ,EAAKE,EAAGiC,GAI1B,OAHAnC,EAAI,GAAKJ,KAAKuQ,IAAIjQ,EAAE,GAAIiC,EAAE,IAC1BnC,EAAI,GAAKJ,KAAKuQ,IAAIjQ,EAAE,GAAIiC,EAAE,IAC1BnC,EAAI,GAAKJ,KAAKuQ,IAAIjQ,EAAE,GAAIiC,EAAE,IACnBnC,EAWF,SAASsH,GAAItH,EAAKE,EAAGiC,GAI1B,OAHAnC,EAAI,GAAKJ,KAAK0H,IAAIpH,EAAE,GAAIiC,EAAE,IAC1BnC,EAAI,GAAKJ,KAAK0H,IAAIpH,EAAE,GAAIiC,EAAE,IAC1BnC,EAAI,GAAKJ,KAAK0H,IAAIpH,EAAE,GAAIiC,EAAE,IACnBnC,EAUF,SAASoQ,GAAMpQ,EAAKE,GAIzB,OAHAF,EAAI,GAAKJ,KAAKwQ,MAAMlQ,EAAE,IACtBF,EAAI,GAAKJ,KAAKwQ,MAAMlQ,EAAE,IACtBF,EAAI,GAAKJ,KAAKwQ,MAAMlQ,EAAE,IACfF,EAWF,SAAS,GAAMA,EAAKE,EAAGiC,GAI5B,OAHAnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EACTnC,EAYF,SAASqQ,GAAYrQ,EAAKE,EAAGiC,EAAG8D,GAIrC,OAHAjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EAChBjG,EAUF,SAAS,GAASE,EAAGiC,GAC1B,IAAIS,EAAIT,EAAE,GAAKjC,EAAE,GACb2C,EAAIV,EAAE,GAAKjC,EAAE,GACbwD,EAAIvB,EAAE,GAAKjC,EAAE,GACjB,OAAON,KAAKgG,MAAMhD,EAAGC,EAAGa,GAUnB,SAAS4M,GAAgBpQ,EAAGiC,GACjC,IAAIS,EAAIT,EAAE,GAAKjC,EAAE,GACb2C,EAAIV,EAAE,GAAKjC,EAAE,GACbwD,EAAIvB,EAAE,GAAKjC,EAAE,GACjB,OAAO0C,EAAIA,EAAIC,EAAIA,EAAIa,EAAIA,EAStB,SAAS6M,GAAcrQ,GAC5B,IAAI0C,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACNwD,EAAIxD,EAAE,GACV,OAAO0C,EAAIA,EAAIC,EAAIA,EAAIa,EAAIA,EAUtB,SAAS8M,GAAOxQ,EAAKE,GAI1B,OAHAF,EAAI,IAAME,EAAE,GACZF,EAAI,IAAME,EAAE,GACZF,EAAI,IAAME,EAAE,GACLF,EAUF,SAASyQ,GAAQzQ,EAAKE,GAI3B,OAHAF,EAAI,GAAK,EAAME,EAAE,GACjBF,EAAI,GAAK,EAAME,EAAE,GACjBF,EAAI,GAAK,EAAME,EAAE,GACVF,EAUF,SAAS0Q,GAAU1Q,EAAKE,GAC7B,IAAI0C,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACNwD,EAAIxD,EAAE,GACNoI,EAAM1F,EAAIA,EAAIC,EAAIA,EAAIa,EAAIA,EAU9B,OARI4E,EAAM,IAERA,EAAM,EAAI1I,KAAK8H,KAAKY,IAGtBtI,EAAI,GAAKE,EAAE,GAAKoI,EAChBtI,EAAI,GAAKE,EAAE,GAAKoI,EAChBtI,EAAI,GAAKE,EAAE,GAAKoI,EACTtI,EAUF,SAAS,GAAIE,EAAGiC,GACrB,OAAOjC,EAAE,GAAKiC,EAAE,GAAKjC,EAAE,GAAKiC,EAAE,GAAKjC,EAAE,GAAKiC,EAAE,GAWvC,SAASwO,GAAM3Q,EAAKE,EAAGiC,GAC5B,IAAIoH,EAAKrJ,EAAE,GACPsJ,EAAKtJ,EAAE,GACPuJ,EAAKvJ,EAAE,GACPiJ,EAAKhH,EAAE,GACPiH,EAAKjH,EAAE,GACPkH,EAAKlH,EAAE,GAIX,OAHAnC,EAAI,GAAKwJ,EAAKH,EAAKI,EAAKL,EACxBpJ,EAAI,GAAKyJ,EAAKN,EAAKI,EAAKF,EACxBrJ,EAAI,GAAKuJ,EAAKH,EAAKI,EAAKL,EACjBnJ,EAYF,SAAS4Q,GAAK5Q,EAAKE,EAAGiC,EAAGkG,GAC9B,IAAIkB,EAAKrJ,EAAE,GACPsJ,EAAKtJ,EAAE,GACPuJ,EAAKvJ,EAAE,GAIX,OAHAF,EAAI,GAAKuJ,EAAKlB,GAAKlG,EAAE,GAAKoH,GAC1BvJ,EAAI,GAAKwJ,EAAKnB,GAAKlG,EAAE,GAAKqH,GAC1BxJ,EAAI,GAAKyJ,EAAKpB,GAAKlG,EAAE,GAAKsH,GACnBzJ,EAcF,SAAS6Q,GAAQ7Q,EAAKE,EAAGiC,EAAGe,EAAG4N,EAAGzI,GACvC,IAAI0I,EAAe1I,EAAIA,EACnB2I,EAAUD,GAAgB,EAAI1I,EAAI,GAAK,EACvC4I,EAAUF,GAAgB1I,EAAI,GAAKA,EACnC6I,EAAUH,GAAgB1I,EAAI,GAC9B8I,EAAUJ,GAAgB,EAAI,EAAI1I,GAItC,OAHArI,EAAI,GAAKE,EAAE,GAAK8Q,EAAU7O,EAAE,GAAK8O,EAAU/N,EAAE,GAAKgO,EAAUJ,EAAE,GAAKK,EACnEnR,EAAI,GAAKE,EAAE,GAAK8Q,EAAU7O,EAAE,GAAK8O,EAAU/N,EAAE,GAAKgO,EAAUJ,EAAE,GAAKK,EACnEnR,EAAI,GAAKE,EAAE,GAAK8Q,EAAU7O,EAAE,GAAK8O,EAAU/N,EAAE,GAAKgO,EAAUJ,EAAE,GAAKK,EAC5DnR,EAcF,SAASoR,GAAOpR,EAAKE,EAAGiC,EAAGe,EAAG4N,EAAGzI,GACtC,IAAIgJ,EAAgB,EAAIhJ,EACpBiJ,EAAwBD,EAAgBA,EACxCN,EAAe1I,EAAIA,EACnB2I,EAAUM,EAAwBD,EAClCJ,EAAU,EAAI5I,EAAIiJ,EAClBJ,EAAU,EAAIH,EAAeM,EAC7BF,EAAUJ,EAAe1I,EAI7B,OAHArI,EAAI,GAAKE,EAAE,GAAK8Q,EAAU7O,EAAE,GAAK8O,EAAU/N,EAAE,GAAKgO,EAAUJ,EAAE,GAAKK,EACnEnR,EAAI,GAAKE,EAAE,GAAK8Q,EAAU7O,EAAE,GAAK8O,EAAU/N,EAAE,GAAKgO,EAAUJ,EAAE,GAAKK,EACnEnR,EAAI,GAAKE,EAAE,GAAK8Q,EAAU7O,EAAE,GAAK8O,EAAU/N,EAAE,GAAKgO,EAAUJ,EAAE,GAAKK,EAC5DnR,EAUF,SAASH,GAAOG,EAAKiG,GAC1BA,EAAQA,GAAS,EACjB,IAAIsL,EAAwB,EAApB,IAA0B3R,KAAKE,GACnC4D,EAAwB,EAApB,IAA0B,EAC9B8N,EAAS5R,KAAK8H,KAAK,EAAMhE,EAAIA,GAAKuC,EAItC,OAHAjG,EAAI,GAAKJ,KAAKuD,IAAIoO,GAAKC,EACvBxR,EAAI,GAAKJ,KAAKqD,IAAIsO,GAAKC,EACvBxR,EAAI,GAAK0D,EAAIuC,EACNjG,EAYF,SAASyR,GAAczR,EAAKE,EAAGwR,GACpC,IAAI9O,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACNwD,EAAIxD,EAAE,GACNyD,EAAI+N,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,IAAMhO,EAAIgO,EAAE,IAK5C,OAJA/N,EAAIA,GAAK,EACT3D,EAAI,IAAM0R,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,GAAKhO,EAAIgO,EAAE,KAAO/N,EACpD3D,EAAI,IAAM0R,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,GAAKhO,EAAIgO,EAAE,KAAO/N,EACpD3D,EAAI,IAAM0R,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,IAAMhO,EAAIgO,EAAE,KAAO/N,EAC9C3D,EAWF,SAAS2R,GAAc3R,EAAKE,EAAGwR,GACpC,IAAI9O,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACNwD,EAAIxD,EAAE,GAIV,OAHAF,EAAI,GAAK4C,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,GAAKhO,EAAIgO,EAAE,GACrC1R,EAAI,GAAK4C,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,GAAKhO,EAAIgO,EAAE,GACrC1R,EAAI,GAAK4C,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,GAAKhO,EAAIgO,EAAE,GAC9B1R,EAYF,SAAS4R,GAAc5R,EAAKE,EAAGuD,GAEpC,IAAIoO,EAAKpO,EAAE,GACPqO,EAAKrO,EAAE,GACPsO,EAAKtO,EAAE,GACPuO,EAAKvO,EAAE,GACPb,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACNwD,EAAIxD,EAAE,GAGN+R,EAAMH,EAAKpO,EAAIqO,EAAKlP,EACpBqP,EAAMH,EAAKnP,EAAIiP,EAAKnO,EACpByO,EAAMN,EAAKhP,EAAIiP,EAAKlP,EAEpBwP,EAAON,EAAKK,EAAMJ,EAAKG,EACvBG,EAAON,EAAKE,EAAMJ,EAAKM,EACvBG,EAAOT,EAAKK,EAAMJ,EAAKG,EAEvBM,EAAU,EAALP,EAYT,OAXAC,GAAOM,EACPL,GAAOK,EACPJ,GAAOI,EAEPH,GAAQ,EACRC,GAAQ,EACRC,GAAQ,EAERtS,EAAI,GAAK4C,EAAIqP,EAAMG,EACnBpS,EAAI,GAAK6C,EAAIqP,EAAMG,EACnBrS,EAAI,GAAK0D,EAAIyO,EAAMG,EACZtS,EAWF,SAAS,GAAQA,EAAKE,EAAGiC,EAAGY,GACjC,IAAIyP,EAAI,GACJjB,EAAI,GAaR,OAXAiB,EAAE,GAAKtS,EAAE,GAAKiC,EAAE,GAChBqQ,EAAE,GAAKtS,EAAE,GAAKiC,EAAE,GAChBqQ,EAAE,GAAKtS,EAAE,GAAKiC,EAAE,GAEhBoP,EAAE,GAAKiB,EAAE,GACTjB,EAAE,GAAKiB,EAAE,GAAK5S,KAAKuD,IAAIJ,GAAOyP,EAAE,GAAK5S,KAAKqD,IAAIF,GAC9CwO,EAAE,GAAKiB,EAAE,GAAK5S,KAAKqD,IAAIF,GAAOyP,EAAE,GAAK5S,KAAKuD,IAAIJ,GAE9C/C,EAAI,GAAKuR,EAAE,GAAKpP,EAAE,GAClBnC,EAAI,GAAKuR,EAAE,GAAKpP,EAAE,GAClBnC,EAAI,GAAKuR,EAAE,GAAKpP,EAAE,GACXnC,EAWF,SAAS,GAAQA,EAAKE,EAAGiC,EAAGY,GACjC,IAAIyP,EAAI,GACJjB,EAAI,GAaR,OAXAiB,EAAE,GAAKtS,EAAE,GAAKiC,EAAE,GAChBqQ,EAAE,GAAKtS,EAAE,GAAKiC,EAAE,GAChBqQ,EAAE,GAAKtS,EAAE,GAAKiC,EAAE,GAEhBoP,EAAE,GAAKiB,EAAE,GAAK5S,KAAKqD,IAAIF,GAAOyP,EAAE,GAAK5S,KAAKuD,IAAIJ,GAC9CwO,EAAE,GAAKiB,EAAE,GACTjB,EAAE,GAAKiB,EAAE,GAAK5S,KAAKuD,IAAIJ,GAAOyP,EAAE,GAAK5S,KAAKqD,IAAIF,GAE9C/C,EAAI,GAAKuR,EAAE,GAAKpP,EAAE,GAClBnC,EAAI,GAAKuR,EAAE,GAAKpP,EAAE,GAClBnC,EAAI,GAAKuR,EAAE,GAAKpP,EAAE,GACXnC,EAWF,SAAS,GAAQA,EAAKE,EAAGiC,EAAGY,GACjC,IAAIyP,EAAI,GACJjB,EAAI,GAaR,OAXAiB,EAAE,GAAKtS,EAAE,GAAKiC,EAAE,GAChBqQ,EAAE,GAAKtS,EAAE,GAAKiC,EAAE,GAChBqQ,EAAE,GAAKtS,EAAE,GAAKiC,EAAE,GAEhBoP,EAAE,GAAKiB,EAAE,GAAK5S,KAAKuD,IAAIJ,GAAOyP,EAAE,GAAK5S,KAAKqD,IAAIF,GAC9CwO,EAAE,GAAKiB,EAAE,GAAK5S,KAAKqD,IAAIF,GAAOyP,EAAE,GAAK5S,KAAKuD,IAAIJ,GAC9CwO,EAAE,GAAKiB,EAAE,GAETxS,EAAI,GAAKuR,EAAE,GAAKpP,EAAE,GAClBnC,EAAI,GAAKuR,EAAE,GAAKpP,EAAE,GAClBnC,EAAI,GAAKuR,EAAE,GAAKpP,EAAE,GACXnC,EASF,SAASyS,GAAMvS,EAAGiC,GACvB,IAAIoH,EAAKrJ,EAAE,GACPsJ,EAAKtJ,EAAE,GACPuJ,EAAKvJ,EAAE,GACPiJ,EAAKhH,EAAE,GACPiH,EAAKjH,EAAE,GACPkH,EAAKlH,EAAE,GAGPuQ,EAFO9S,KAAK8H,KAAK6B,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GACnC7J,KAAK8H,KAAKyB,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAE1CsJ,EAASD,GAAO,GAAIxS,EAAGiC,GAAKuQ,EAChC,OAAO9S,KAAKgT,KAAKhT,KAAKuQ,IAAIvQ,KAAK0H,IAAIqL,GAAS,GAAI,IAS3C,SAASE,GAAK7S,GAInB,OAHAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAAS,GAAIE,GAClB,MAAO,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAU/C,SAAS,GAAYA,EAAGiC,GAC7B,OAAOjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,GAU/C,SAAS,GAAOjC,EAAGiC,GACxB,IAAIgE,EAAKjG,EAAE,GACPkG,EAAKlG,EAAE,GACPmG,EAAKnG,EAAE,GACP0G,EAAKzE,EAAE,GACP0E,EAAK1E,EAAE,GACP2E,EAAK3E,EAAE,GACX,OAAOvC,KAAKyH,IAAIlB,EAAKS,IAAO,EAAmBhH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIlB,GAAKvG,KAAKyH,IAAIT,KAAQhH,KAAKyH,IAAIjB,EAAKS,IAAO,EAAmBjH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIjB,GAAKxG,KAAKyH,IAAIR,KAAQjH,KAAKyH,IAAIhB,EAAKS,IAAO,EAAmBlH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIhB,GAAKzG,KAAKyH,IAAIP,IAOzP,IAmDDgM,GAnDK,GAAM,GAMN,GAAM,GAMNC,GAAM/C,GAMNgD,GAAO,GAMPC,GAAU3C,GAMV,GAAM,GAMN4C,GAAS3C,GAcT4C,IACLL,GAAM,KACH,SAAU5S,EAAGkT,EAAQC,EAAQC,EAAOC,EAAIC,GAC7C,IAAIjM,EAAGkM,EAgBP,IAdKL,IACHA,EAAS,GAGNC,IACHA,EAAS,GAITI,EADEH,EACE1T,KAAKuQ,IAAImD,EAAQF,EAASC,EAAQnT,EAAEuH,QAEpCvH,EAAEuH,OAGHF,EAAI8L,EAAQ9L,EAAIkM,EAAGlM,GAAK6L,EAC3BN,GAAI,GAAK5S,EAAEqH,GACXuL,GAAI,GAAK5S,EAAEqH,EAAI,GACfuL,GAAI,GAAK5S,EAAEqH,EAAI,GACfgM,EAAGT,GAAKA,GAAKU,GACbtT,EAAEqH,GAAKuL,GAAI,GACX5S,EAAEqH,EAAI,GAAKuL,GAAI,GACf5S,EAAEqH,EAAI,GAAKuL,GAAI,GAGjB,OAAO5S,ICpwBJ,SAAS,KACd,IAAIF,EAAM,IAAI,EAAoB,GASlC,OAPI,GAAuBP,eACzBO,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,EASF,SAAS,GAAME,GACpB,IAAIF,EAAM,IAAI,EAAoB,GAKlC,OAJAA,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACJF,EAYF,SAAS,GAAW4C,EAAGC,EAAGa,EAAGC,GAClC,IAAI3D,EAAM,IAAI,EAAoB,GAKlC,OAJAA,EAAI,GAAK4C,EACT5C,EAAI,GAAK6C,EACT7C,EAAI,GAAK0D,EACT1D,EAAI,GAAK2D,EACF3D,EAUF,SAAS,GAAKA,EAAKE,GAKxB,OAJAF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACJF,EAaF,SAAS,GAAIA,EAAK4C,EAAGC,EAAGa,EAAGC,GAKhC,OAJA3D,EAAI,GAAK4C,EACT5C,EAAI,GAAK6C,EACT7C,EAAI,GAAK0D,EACT1D,EAAI,GAAK2D,EACF3D,EAWF,SAAS,GAAIA,EAAKE,EAAGiC,GAK1B,OAJAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GACXnC,EAWF,SAAS,GAASA,EAAKE,EAAGiC,GAK/B,OAJAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GACXnC,EAWF,SAAS,GAASA,EAAKE,EAAGiC,GAK/B,OAJAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GACXnC,EAWF,SAAS,GAAOA,EAAKE,EAAGiC,GAK7B,OAJAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GACXnC,EAUF,SAAS,GAAKA,EAAKE,GAKxB,OAJAF,EAAI,GAAKJ,KAAKqQ,KAAK/P,EAAE,IACrBF,EAAI,GAAKJ,KAAKqQ,KAAK/P,EAAE,IACrBF,EAAI,GAAKJ,KAAKqQ,KAAK/P,EAAE,IACrBF,EAAI,GAAKJ,KAAKqQ,KAAK/P,EAAE,IACdF,EAUF,SAAS,GAAMA,EAAKE,GAKzB,OAJAF,EAAI,GAAKJ,KAAKsQ,MAAMhQ,EAAE,IACtBF,EAAI,GAAKJ,KAAKsQ,MAAMhQ,EAAE,IACtBF,EAAI,GAAKJ,KAAKsQ,MAAMhQ,EAAE,IACtBF,EAAI,GAAKJ,KAAKsQ,MAAMhQ,EAAE,IACfF,EAWF,SAAS,GAAIA,EAAKE,EAAGiC,GAK1B,OAJAnC,EAAI,GAAKJ,KAAKuQ,IAAIjQ,EAAE,GAAIiC,EAAE,IAC1BnC,EAAI,GAAKJ,KAAKuQ,IAAIjQ,EAAE,GAAIiC,EAAE,IAC1BnC,EAAI,GAAKJ,KAAKuQ,IAAIjQ,EAAE,GAAIiC,EAAE,IAC1BnC,EAAI,GAAKJ,KAAKuQ,IAAIjQ,EAAE,GAAIiC,EAAE,IACnBnC,EAWF,SAAS,GAAIA,EAAKE,EAAGiC,GAK1B,OAJAnC,EAAI,GAAKJ,KAAK0H,IAAIpH,EAAE,GAAIiC,EAAE,IAC1BnC,EAAI,GAAKJ,KAAK0H,IAAIpH,EAAE,GAAIiC,EAAE,IAC1BnC,EAAI,GAAKJ,KAAK0H,IAAIpH,EAAE,GAAIiC,EAAE,IAC1BnC,EAAI,GAAKJ,KAAK0H,IAAIpH,EAAE,GAAIiC,EAAE,IACnBnC,EAUF,SAAS,GAAMA,EAAKE,GAKzB,OAJAF,EAAI,GAAKJ,KAAKwQ,MAAMlQ,EAAE,IACtBF,EAAI,GAAKJ,KAAKwQ,MAAMlQ,EAAE,IACtBF,EAAI,GAAKJ,KAAKwQ,MAAMlQ,EAAE,IACtBF,EAAI,GAAKJ,KAAKwQ,MAAMlQ,EAAE,IACfF,EAWF,SAAS,GAAMA,EAAKE,EAAGiC,GAK5B,OAJAnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EACTnC,EAYF,SAAS,GAAYA,EAAKE,EAAGiC,EAAG8D,GAKrC,OAJAjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EAChBjG,EAUF,SAAS,GAASE,EAAGiC,GAC1B,IAAIS,EAAIT,EAAE,GAAKjC,EAAE,GACb2C,EAAIV,EAAE,GAAKjC,EAAE,GACbwD,EAAIvB,EAAE,GAAKjC,EAAE,GACbyD,EAAIxB,EAAE,GAAKjC,EAAE,GACjB,OAAON,KAAKgG,MAAMhD,EAAGC,EAAGa,EAAGC,GAUtB,SAAS,GAAgBzD,EAAGiC,GACjC,IAAIS,EAAIT,EAAE,GAAKjC,EAAE,GACb2C,EAAIV,EAAE,GAAKjC,EAAE,GACbwD,EAAIvB,EAAE,GAAKjC,EAAE,GACbyD,EAAIxB,EAAE,GAAKjC,EAAE,GACjB,OAAO0C,EAAIA,EAAIC,EAAIA,EAAIa,EAAIA,EAAIC,EAAIA,EAS9B,SAAS,GAAOzD,GACrB,IAAI0C,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACNwD,EAAIxD,EAAE,GACNyD,EAAIzD,EAAE,GACV,OAAON,KAAKgG,MAAMhD,EAAGC,EAAGa,EAAGC,GAStB,SAAS,GAAczD,GAC5B,IAAI0C,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACNwD,EAAIxD,EAAE,GACNyD,EAAIzD,EAAE,GACV,OAAO0C,EAAIA,EAAIC,EAAIA,EAAIa,EAAIA,EAAIC,EAAIA,EAU9B,SAAS,GAAO3D,EAAKE,GAK1B,OAJAF,EAAI,IAAME,EAAE,GACZF,EAAI,IAAME,EAAE,GACZF,EAAI,IAAME,EAAE,GACZF,EAAI,IAAME,EAAE,GACLF,EAUF,SAAS,GAAQA,EAAKE,GAK3B,OAJAF,EAAI,GAAK,EAAME,EAAE,GACjBF,EAAI,GAAK,EAAME,EAAE,GACjBF,EAAI,GAAK,EAAME,EAAE,GACjBF,EAAI,GAAK,EAAME,EAAE,GACVF,EAUF,SAAS,GAAUA,EAAKE,GAC7B,IAAI0C,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACNwD,EAAIxD,EAAE,GACNyD,EAAIzD,EAAE,GACNoI,EAAM1F,EAAIA,EAAIC,EAAIA,EAAIa,EAAIA,EAAIC,EAAIA,EAUtC,OARI2E,EAAM,IACRA,EAAM,EAAI1I,KAAK8H,KAAKY,IAGtBtI,EAAI,GAAK4C,EAAI0F,EACbtI,EAAI,GAAK6C,EAAIyF,EACbtI,EAAI,GAAK0D,EAAI4E,EACbtI,EAAI,GAAK2D,EAAI2E,EACNtI,EAUF,SAAS,GAAIE,EAAGiC,GACrB,OAAOjC,EAAE,GAAKiC,EAAE,GAAKjC,EAAE,GAAKiC,EAAE,GAAKjC,EAAE,GAAKiC,EAAE,GAAKjC,EAAE,GAAKiC,EAAE,GAYrD,SAAS,GAAMnC,EAAK0T,EAAG/Q,EAAGgB,GAC/B,IAAIgQ,EAAIhR,EAAE,GAAKgB,EAAE,GAAKhB,EAAE,GAAKgB,EAAE,GAC3BiQ,EAAIjR,EAAE,GAAKgB,EAAE,GAAKhB,EAAE,GAAKgB,EAAE,GAC3BkQ,EAAIlR,EAAE,GAAKgB,EAAE,GAAKhB,EAAE,GAAKgB,EAAE,GAC3BmQ,EAAInR,EAAE,GAAKgB,EAAE,GAAKhB,EAAE,GAAKgB,EAAE,GAC3BoQ,EAAIpR,EAAE,GAAKgB,EAAE,GAAKhB,EAAE,GAAKgB,EAAE,GAC3BqQ,EAAIrR,EAAE,GAAKgB,EAAE,GAAKhB,EAAE,GAAKgB,EAAE,GAC3BsQ,EAAIP,EAAE,GACNQ,EAAIR,EAAE,GACNS,EAAIT,EAAE,GACNU,EAAIV,EAAE,GAKV,OAJA1T,EAAI,GAAKkU,EAAIF,EAAIG,EAAIJ,EAAIK,EAAIN,EAC7B9T,EAAI,IAAOiU,EAAID,EAAKG,EAAIN,EAAIO,EAAIR,EAChC5T,EAAI,GAAKiU,EAAIF,EAAIG,EAAIL,EAAIO,EAAIT,EAC7B3T,EAAI,IAAOiU,EAAIH,EAAKI,EAAIN,EAAIO,EAAIR,EACzB3T,EAYF,SAAS,GAAKA,EAAKE,EAAGiC,EAAGkG,GAC9B,IAAIkB,EAAKrJ,EAAE,GACPsJ,EAAKtJ,EAAE,GACPuJ,EAAKvJ,EAAE,GACPwJ,EAAKxJ,EAAE,GAKX,OAJAF,EAAI,GAAKuJ,EAAKlB,GAAKlG,EAAE,GAAKoH,GAC1BvJ,EAAI,GAAKwJ,EAAKnB,GAAKlG,EAAE,GAAKqH,GAC1BxJ,EAAI,GAAKyJ,EAAKpB,GAAKlG,EAAE,GAAKsH,GAC1BzJ,EAAI,GAAK0J,EAAKrB,GAAKlG,EAAE,GAAKuH,GACnB1J,EAUF,SAAS,GAAOA,EAAKiG,GAK1B,IAAIoO,EAAIC,EAAIC,EAAIC,EACZC,EAAIC,EALRzO,EAAQA,GAAS,EAOjB,GAGEwO,GAFAJ,EAAyB,EAApB,IAAwB,GAEnBA,GADVC,EAAyB,EAApB,IAAwB,GACTA,QACbG,GAAM,GAEf,GAGEC,GAFAH,EAAyB,EAApB,IAAwB,GAEnBA,GADVC,EAAyB,EAApB,IAAwB,GACTA,QACbE,GAAM,GAEf,IAAI5D,EAAIlR,KAAK8H,MAAM,EAAI+M,GAAMC,GAK7B,OAJA1U,EAAI,GAAKiG,EAAQoO,EACjBrU,EAAI,GAAKiG,EAAQqO,EACjBtU,EAAI,GAAKiG,EAAQsO,EAAKzD,EACtB9Q,EAAI,GAAKiG,EAAQuO,EAAK1D,EACf9Q,EAWF,SAAS,GAAcA,EAAKE,EAAGwR,GACpC,IAAI9O,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACNwD,EAAIxD,EAAE,GACNyD,EAAIzD,EAAE,GAKV,OAJAF,EAAI,GAAK0R,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,GAAKhO,EAAIgO,EAAE,IAAM/N,EAClD3D,EAAI,GAAK0R,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,GAAKhO,EAAIgO,EAAE,IAAM/N,EAClD3D,EAAI,GAAK0R,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,IAAMhO,EAAIgO,EAAE,IAAM/N,EACnD3D,EAAI,GAAK0R,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,IAAMhO,EAAIgO,EAAE,IAAM/N,EAC5C3D,EAWF,SAAS,GAAcA,EAAKE,EAAGuD,GACpC,IAAIb,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACNwD,EAAIxD,EAAE,GACN2R,EAAKpO,EAAE,GACPqO,EAAKrO,EAAE,GACPsO,EAAKtO,EAAE,GACPuO,EAAKvO,EAAE,GAEPkR,EAAK3C,EAAKpP,EAAIkP,EAAKpO,EAAIqO,EAAKlP,EAC5B+R,EAAK5C,EAAKnP,EAAIkP,EAAKnP,EAAIiP,EAAKnO,EAC5BmR,EAAK7C,EAAKtO,EAAImO,EAAKhP,EAAIiP,EAAKlP,EAC5BkS,GAAMjD,EAAKjP,EAAIkP,EAAKjP,EAAIkP,EAAKrO,EAMjC,OAJA1D,EAAI,GAAK2U,EAAK3C,EAAK8C,GAAMjD,EAAK+C,GAAM7C,EAAK8C,GAAM/C,EAC/C9R,EAAI,GAAK4U,EAAK5C,EAAK8C,GAAMhD,EAAK+C,GAAMhD,EAAK8C,GAAM5C,EAC/C/R,EAAI,GAAK6U,EAAK7C,EAAK8C,GAAM/C,EAAK4C,GAAM7C,EAAK8C,GAAM/C,EAC/C7R,EAAI,GAAKE,EAAE,GACJF,EASF,SAAS,GAAKA,GAKnB,OAJAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAAS,GAAIE,GAClB,MAAO,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAU7D,SAAS,GAAYA,EAAGiC,GAC7B,OAAOjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,GAUhE,SAAS,GAAOjC,EAAGiC,GACxB,IAAIgE,EAAKjG,EAAE,GACPkG,EAAKlG,EAAE,GACPmG,EAAKnG,EAAE,GACPoG,EAAKpG,EAAE,GACP0G,EAAKzE,EAAE,GACP0E,EAAK1E,EAAE,GACP2E,EAAK3E,EAAE,GACP4E,EAAK5E,EAAE,GACX,OAAOvC,KAAKyH,IAAIlB,EAAKS,IAAO,EAAmBhH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIlB,GAAKvG,KAAKyH,IAAIT,KAAQhH,KAAKyH,IAAIjB,EAAKS,IAAO,EAAmBjH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIjB,GAAKxG,KAAKyH,IAAIR,KAAQjH,KAAKyH,IAAIhB,EAAKS,IAAO,EAAmBlH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIhB,GAAKzG,KAAKyH,IAAIP,KAAQlH,KAAKyH,IAAIf,EAAKS,IAAO,EAAmBnH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIf,GAAK1G,KAAKyH,IAAIN,IAO9U,IAAI,GAAM,GAMN,GAAM,GAMN,GAAM,GAMN,GAAO,GAMP,GAAU,GAMV,GAAM,GAMN,GAAS,GAcT,GAAU,WACnB,IAAI+L,EAAM,KACV,OAAO,SAAU5S,EAAGkT,EAAQC,EAAQC,EAAOC,EAAIC,GAC7C,IAAIjM,EAAGkM,EAgBP,IAdKL,IACHA,EAAS,GAGNC,IACHA,EAAS,GAITI,EADEH,EACE1T,KAAKuQ,IAAImD,EAAQF,EAASC,EAAQnT,EAAEuH,QAEpCvH,EAAEuH,OAGHF,EAAI8L,EAAQ9L,EAAIkM,EAAGlM,GAAK6L,EAC3BN,EAAI,GAAK5S,EAAEqH,GACXuL,EAAI,GAAK5S,EAAEqH,EAAI,GACfuL,EAAI,GAAK5S,EAAEqH,EAAI,GACfuL,EAAI,GAAK5S,EAAEqH,EAAI,GACfgM,EAAGT,EAAKA,EAAKU,GACbtT,EAAEqH,GAAKuL,EAAI,GACX5S,EAAEqH,EAAI,GAAKuL,EAAI,GACf5S,EAAEqH,EAAI,GAAKuL,EAAI,GACf5S,EAAEqH,EAAI,GAAKuL,EAAI,GAGjB,OAAO5S,GA/BU,GCvmBd,SAAS,KACd,IAAIF,EAAM,IAAI,EAAoB,GASlC,OAPI,GAAuBP,eACzBO,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGXA,EAAI,GAAK,EACFA,EASF,SAAS,GAASA,GAKvB,OAJAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAYF,SAAS+U,GAAa/U,EAAKoI,EAAMrF,GACtCA,GAAY,GACZ,IAAIC,EAAIpD,KAAKqD,IAAIF,GAKjB,OAJA/C,EAAI,GAAKgD,EAAIoF,EAAK,GAClBpI,EAAI,GAAKgD,EAAIoF,EAAK,GAClBpI,EAAI,GAAKgD,EAAIoF,EAAK,GAClBpI,EAAI,GAAKJ,KAAKuD,IAAIJ,GACX/C,EAgBF,SAASgV,GAAaC,EAAUxR,GACrC,IAAIV,EAAwB,EAAlBnD,KAAKgT,KAAKnP,EAAE,IAClBT,EAAIpD,KAAKqD,IAAIF,EAAM,GAavB,OAXIC,EAAI,GACNiS,EAAS,GAAKxR,EAAE,GAAKT,EACrBiS,EAAS,GAAKxR,EAAE,GAAKT,EACrBiS,EAAS,GAAKxR,EAAE,GAAKT,IAGrBiS,EAAS,GAAK,EACdA,EAAS,GAAK,EACdA,EAAS,GAAK,GAGTlS,EAUF,SAASmS,GAAShV,EAAGiC,GAC1B,IAAIgT,EAAa,GAAIjV,EAAGiC,GACxB,OAAOvC,KAAKgT,KAAK,EAAIuC,EAAaA,EAAa,GAW1C,SAAS,GAASnV,EAAKE,EAAGiC,GAC/B,IAAIoH,EAAKrJ,EAAE,GACPsJ,EAAKtJ,EAAE,GACPuJ,EAAKvJ,EAAE,GACPwJ,EAAKxJ,EAAE,GACPiJ,EAAKhH,EAAE,GACPiH,EAAKjH,EAAE,GACPkH,EAAKlH,EAAE,GACPmH,EAAKnH,EAAE,GAKX,OAJAnC,EAAI,GAAKuJ,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,EAC5CpJ,EAAI,GAAKwJ,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,EAC5CrJ,EAAI,GAAKyJ,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,EAC5CnJ,EAAI,GAAK0J,EAAKJ,EAAKC,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EACrCrJ,EAWF,SAAS,GAAQA,EAAKE,EAAG6C,GAC9BA,GAAO,GACP,IAAIwG,EAAKrJ,EAAE,GACPsJ,EAAKtJ,EAAE,GACPuJ,EAAKvJ,EAAE,GACPwJ,EAAKxJ,EAAE,GACPiJ,EAAKvJ,KAAKqD,IAAIF,GACduG,EAAK1J,KAAKuD,IAAIJ,GAKlB,OAJA/C,EAAI,GAAKuJ,EAAKD,EAAKI,EAAKP,EACxBnJ,EAAI,GAAKwJ,EAAKF,EAAKG,EAAKN,EACxBnJ,EAAI,GAAKyJ,EAAKH,EAAKE,EAAKL,EACxBnJ,EAAI,GAAK0J,EAAKJ,EAAKC,EAAKJ,EACjBnJ,EAWF,SAAS,GAAQA,EAAKE,EAAG6C,GAC9BA,GAAO,GACP,IAAIwG,EAAKrJ,EAAE,GACPsJ,EAAKtJ,EAAE,GACPuJ,EAAKvJ,EAAE,GACPwJ,EAAKxJ,EAAE,GACPkJ,EAAKxJ,KAAKqD,IAAIF,GACduG,EAAK1J,KAAKuD,IAAIJ,GAKlB,OAJA/C,EAAI,GAAKuJ,EAAKD,EAAKG,EAAKL,EACxBpJ,EAAI,GAAKwJ,EAAKF,EAAKI,EAAKN,EACxBpJ,EAAI,GAAKyJ,EAAKH,EAAKC,EAAKH,EACxBpJ,EAAI,GAAK0J,EAAKJ,EAAKE,EAAKJ,EACjBpJ,EAWF,SAAS,GAAQA,EAAKE,EAAG6C,GAC9BA,GAAO,GACP,IAAIwG,EAAKrJ,EAAE,GACPsJ,EAAKtJ,EAAE,GACPuJ,EAAKvJ,EAAE,GACPwJ,EAAKxJ,EAAE,GACPmJ,EAAKzJ,KAAKqD,IAAIF,GACduG,EAAK1J,KAAKuD,IAAIJ,GAKlB,OAJA/C,EAAI,GAAKuJ,EAAKD,EAAKE,EAAKH,EACxBrJ,EAAI,GAAKwJ,EAAKF,EAAKC,EAAKF,EACxBrJ,EAAI,GAAKyJ,EAAKH,EAAKI,EAAKL,EACxBrJ,EAAI,GAAK0J,EAAKJ,EAAKG,EAAKJ,EACjBrJ,EAYF,SAASoV,GAAWpV,EAAKE,GAC9B,IAAI0C,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACNwD,EAAIxD,EAAE,GAKV,OAJAF,EAAI,GAAK4C,EACT5C,EAAI,GAAK6C,EACT7C,EAAI,GAAK0D,EACT1D,EAAI,GAAKJ,KAAK8H,KAAK9H,KAAKyH,IAAI,EAAMzE,EAAIA,EAAIC,EAAIA,EAAIa,EAAIA,IAC/C1D,EAUF,SAASqV,GAAIrV,EAAKE,GACvB,IAAI0C,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACNwD,EAAIxD,EAAE,GACNyD,EAAIzD,EAAE,GACNqR,EAAI3R,KAAK8H,KAAK9E,EAAIA,EAAIC,EAAIA,EAAIa,EAAIA,GAClC4R,EAAK1V,KAAKyV,IAAI1R,GACdX,EAAIuO,EAAI,EAAI+D,EAAK1V,KAAKqD,IAAIsO,GAAKA,EAAI,EAKvC,OAJAvR,EAAI,GAAK4C,EAAII,EACbhD,EAAI,GAAK6C,EAAIG,EACbhD,EAAI,GAAK0D,EAAIV,EACbhD,EAAI,GAAKsV,EAAK1V,KAAKuD,IAAIoO,GAChBvR,EAUF,SAASuV,GAAGvV,EAAKE,GACtB,IAAI0C,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACNwD,EAAIxD,EAAE,GACNyD,EAAIzD,EAAE,GACNqR,EAAI3R,KAAK8H,KAAK9E,EAAIA,EAAIC,EAAIA,EAAIa,EAAIA,GAClC2E,EAAIkJ,EAAI,EAAI3R,KAAK4V,MAAMjE,EAAG5N,GAAK4N,EAAI,EAKvC,OAJAvR,EAAI,GAAK4C,EAAIyF,EACbrI,EAAI,GAAK6C,EAAIwF,EACbrI,EAAI,GAAK0D,EAAI2E,EACbrI,EAAI,GAAK,GAAMJ,KAAK6V,IAAI7S,EAAIA,EAAIC,EAAIA,EAAIa,EAAIA,EAAIC,EAAIA,GAC7C3D,EAWF,SAAS0V,GAAI1V,EAAKE,EAAGiC,GAI1B,OAHAoT,GAAGvV,EAAKE,GACR,GAAMF,EAAKA,EAAKmC,GAChBkT,GAAIrV,EAAKA,GACFA,EAYF,SAAS2V,GAAM3V,EAAKE,EAAGiC,EAAGkG,GAG/B,IAQIuN,EAAOC,EAAOC,EAAOC,EAAQC,EAR7BzM,EAAKrJ,EAAE,GACPsJ,EAAKtJ,EAAE,GACPuJ,EAAKvJ,EAAE,GACPwJ,EAAKxJ,EAAE,GACPiJ,EAAKhH,EAAE,GACPiH,EAAKjH,EAAE,GACPkH,EAAKlH,EAAE,GACPmH,EAAKnH,EAAE,GAgCX,OA7BA0T,EAAQtM,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,GAE/B,IACVuM,GAASA,EACT1M,GAAMA,EACNC,GAAMA,EACNC,GAAMA,EACNC,GAAMA,GAIJ,EAAMuM,EAAQ,GAEhBD,EAAQhW,KAAKgT,KAAKiD,GAClBC,EAAQlW,KAAKqD,IAAI2S,GACjBG,EAASnW,KAAKqD,KAAK,EAAMoF,GAAKuN,GAASE,EACvCE,EAASpW,KAAKqD,IAAIoF,EAAIuN,GAASE,IAI/BC,EAAS,EAAM1N,EACf2N,EAAS3N,GAIXrI,EAAI,GAAK+V,EAASxM,EAAKyM,EAAS7M,EAChCnJ,EAAI,GAAK+V,EAASvM,EAAKwM,EAAS5M,EAChCpJ,EAAI,GAAK+V,EAAStM,EAAKuM,EAAS3M,EAChCrJ,EAAI,GAAK+V,EAASrM,EAAKsM,EAAS1M,EACzBtJ,EASF,SAAS,GAAOA,GAGrB,IAAIiW,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAexW,KAAK8H,KAAK,EAAIuO,GAC7BI,EAASzW,KAAK8H,KAAKuO,GAKvB,OAJAjW,EAAI,GAAKoW,EAAexW,KAAKqD,IAAI,EAAMrD,KAAKE,GAAKoW,GACjDlW,EAAI,GAAKoW,EAAexW,KAAKuD,IAAI,EAAMvD,KAAKE,GAAKoW,GACjDlW,EAAI,GAAKqW,EAASzW,KAAKqD,IAAI,EAAMrD,KAAKE,GAAKqW,GAC3CnW,EAAI,GAAKqW,EAASzW,KAAKuD,IAAI,EAAMvD,KAAKE,GAAKqW,GACpCnW,EAUF,SAAS,GAAOA,EAAKE,GAC1B,IAAIiG,EAAKjG,EAAE,GACPkG,EAAKlG,EAAE,GACPmG,EAAKnG,EAAE,GACPoG,EAAKpG,EAAE,GACPoW,EAAMnQ,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EACzCiQ,EAASD,EAAM,EAAMA,EAAM,EAM/B,OAJAtW,EAAI,IAAMmG,EAAKoQ,EACfvW,EAAI,IAAMoG,EAAKmQ,EACfvW,EAAI,IAAMqG,EAAKkQ,EACfvW,EAAI,GAAKsG,EAAKiQ,EACPvW,EAWF,SAASwW,GAAUxW,EAAKE,GAK7B,OAJAF,EAAI,IAAME,EAAE,GACZF,EAAI,IAAME,EAAE,GACZF,EAAI,IAAME,EAAE,GACZF,EAAI,GAAKE,EAAE,GACJF,EAcF,SAASyW,GAASzW,EAAK0R,GAG5B,IACIgF,EADAC,EAASjF,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAG7B,GAAIiF,EAAS,EAEXD,EAAQ9W,KAAK8H,KAAKiP,EAAS,GAE3B3W,EAAI,GAAK,GAAM0W,EACfA,EAAQ,GAAMA,EAEd1W,EAAI,IAAM0R,EAAE,GAAKA,EAAE,IAAMgF,EACzB1W,EAAI,IAAM0R,EAAE,GAAKA,EAAE,IAAMgF,EACzB1W,EAAI,IAAM0R,EAAE,GAAKA,EAAE,IAAMgF,MACpB,CAEL,IAAInP,EAAI,EACJmK,EAAE,GAAKA,EAAE,KAAInK,EAAI,GACjBmK,EAAE,GAAKA,EAAM,EAAJnK,EAAQA,KAAIA,EAAI,GAC7B,IAAIqP,GAAKrP,EAAI,GAAK,EACdsP,GAAKtP,EAAI,GAAK,EAClBmP,EAAQ9W,KAAK8H,KAAKgK,EAAM,EAAJnK,EAAQA,GAAKmK,EAAM,EAAJkF,EAAQA,GAAKlF,EAAM,EAAJmF,EAAQA,GAAK,GAC/D7W,EAAIuH,GAAK,GAAMmP,EACfA,EAAQ,GAAMA,EACd1W,EAAI,IAAM0R,EAAM,EAAJkF,EAAQC,GAAKnF,EAAM,EAAJmF,EAAQD,IAAMF,EACzC1W,EAAI4W,IAAMlF,EAAM,EAAJkF,EAAQrP,GAAKmK,EAAM,EAAJnK,EAAQqP,IAAMF,EACzC1W,EAAI6W,IAAMnF,EAAM,EAAJmF,EAAQtP,GAAKmK,EAAM,EAAJnK,EAAQsP,IAAMH,EAG3C,OAAO1W,EAaF,SAAS8W,GAAU9W,EAAK4C,EAAGC,EAAGa,GACnC,IAAIqT,EAAY,GAAMnX,KAAKE,GAAK,IAChC8C,GAAKmU,EACLlU,GAAKkU,EACLrT,GAAKqT,EACL,IAAI/L,EAAKpL,KAAKqD,IAAIL,GACdoU,EAAKpX,KAAKuD,IAAIP,GACdqI,EAAKrL,KAAKqD,IAAIJ,GACdoU,EAAKrX,KAAKuD,IAAIN,GACdqI,EAAKtL,KAAKqD,IAAIS,GACdwT,EAAKtX,KAAKuD,IAAIO,GAKlB,OAJA1D,EAAI,GAAKgL,EAAKiM,EAAKC,EAAKF,EAAK/L,EAAKC,EAClClL,EAAI,GAAKgX,EAAK/L,EAAKiM,EAAKlM,EAAKiM,EAAK/L,EAClClL,EAAI,GAAKgX,EAAKC,EAAK/L,EAAKF,EAAKC,EAAKiM,EAClClX,EAAI,GAAKgX,EAAKC,EAAKC,EAAKlM,EAAKC,EAAKC,EAC3BlL,EASF,SAAS,GAAIE,GAClB,MAAO,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAU7D,IA4JDiX,GACAC,GACAC,GAuCAC,GACAC,GAoBAC,GA1NK,GAAQ,GAYR,GAAa,GAUb,GAAO,GAaP,GAAM,GAWN,GAAM,GAMN,GAAM,GAWN,GAAQ,GAUR,GAAM,GAYN,GAAO,GAQP,GAAS,GAMT,GAAM,GASN,GAAgB,GAMhB,GAAS,GAUT,GAAY,GASZ,GAAc,GASd,GAAS,GAaTC,IACLN,GAAU,KACVC,GAAY,GAAgB,EAAG,EAAG,GAClCC,GAAY,GAAgB,EAAG,EAAG,GAC/B,SAAUrX,EAAKE,EAAGiC,GACvB,IAAImU,EAAM,GAASpW,EAAGiC,GAEtB,OAAImU,GAAO,SACT,GAAWa,GAASC,GAAWlX,GAC3B,GAASiX,IAAW,MAAU,GAAWA,GAASE,GAAWnX,GACjE,GAAeiX,GAASA,IACxBpC,GAAa/U,EAAKmX,GAASvX,KAAKE,IACzBE,GACEsW,EAAM,SACftW,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,IAEP,GAAWmX,GAASjX,EAAGiC,GACvBnC,EAAI,GAAKmX,GAAQ,GACjBnX,EAAI,GAAKmX,GAAQ,GACjBnX,EAAI,GAAKmX,GAAQ,GACjBnX,EAAI,GAAK,EAAIsW,EACN,GAAUtW,EAAKA,MAgBjB0X,IACLJ,GAAQ,KACRC,GAAQ,KACL,SAAUvX,EAAKE,EAAGiC,EAAGe,EAAG4N,EAAGzI,GAIhC,OAHAsN,GAAM2B,GAAOpX,EAAG4Q,EAAGzI,GACnBsN,GAAM4B,GAAOpV,EAAGe,EAAGmF,GACnBsN,GAAM3V,EAAKsX,GAAOC,GAAO,EAAIlP,GAAK,EAAIA,IAC/BrI,IAcA2X,IACLH,GAAO,IACJ,SAAUxX,EAAK4X,EAAMzL,EAAOoC,GAUjC,OATAiJ,GAAK,GAAKrL,EAAM,GAChBqL,GAAK,GAAKrL,EAAM,GAChBqL,GAAK,GAAKrL,EAAM,GAChBqL,GAAK,GAAKjJ,EAAG,GACbiJ,GAAK,GAAKjJ,EAAG,GACbiJ,GAAK,GAAKjJ,EAAG,GACbiJ,GAAK,IAAMI,EAAK,GAChBJ,GAAK,IAAMI,EAAK,GAChBJ,GAAK,IAAMI,EAAK,GACT,GAAU5X,EAAKyW,GAASzW,EAAKwX,OCtrBjC,SAAS,KACd,IAAIxX,EAAM,IAAI,EAAoB,GAOlC,OALI,GAAuBP,eACzBO,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,EASF,SAAS,GAAME,GACpB,IAAIF,EAAM,IAAI,EAAoB,GAGlC,OAFAA,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACJF,EAUF,SAAS,GAAW4C,EAAGC,GAC5B,IAAI7C,EAAM,IAAI,EAAoB,GAGlC,OAFAA,EAAI,GAAK4C,EACT5C,EAAI,GAAK6C,EACF7C,EAUF,SAAS,GAAKA,EAAKE,GAGxB,OAFAF,EAAI,GAAKE,EAAE,GACXF,EAAI,GAAKE,EAAE,GACJF,EAWF,SAAS,GAAIA,EAAK4C,EAAGC,GAG1B,OAFA7C,EAAI,GAAK4C,EACT5C,EAAI,GAAK6C,EACF7C,EAWF,SAAS,GAAIA,EAAKE,EAAGiC,GAG1B,OAFAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GACXnC,EAWF,SAAS,GAASA,EAAKE,EAAGiC,GAG/B,OAFAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GACXnC,EAWF,SAAS,GAASA,EAAKE,EAAGiC,GAG/B,OAFAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GACXnC,EAWF,SAAS,GAAOA,EAAKE,EAAGiC,GAG7B,OAFAnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAClBnC,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GACXnC,EAUF,SAAS,GAAKA,EAAKE,GAGxB,OAFAF,EAAI,GAAKJ,KAAKqQ,KAAK/P,EAAE,IACrBF,EAAI,GAAKJ,KAAKqQ,KAAK/P,EAAE,IACdF,EAUF,SAAS,GAAMA,EAAKE,GAGzB,OAFAF,EAAI,GAAKJ,KAAKsQ,MAAMhQ,EAAE,IACtBF,EAAI,GAAKJ,KAAKsQ,MAAMhQ,EAAE,IACfF,EAWF,SAAS,GAAIA,EAAKE,EAAGiC,GAG1B,OAFAnC,EAAI,GAAKJ,KAAKuQ,IAAIjQ,EAAE,GAAIiC,EAAE,IAC1BnC,EAAI,GAAKJ,KAAKuQ,IAAIjQ,EAAE,GAAIiC,EAAE,IACnBnC,EAWF,SAAS,GAAIA,EAAKE,EAAGiC,GAG1B,OAFAnC,EAAI,GAAKJ,KAAK0H,IAAIpH,EAAE,GAAIiC,EAAE,IAC1BnC,EAAI,GAAKJ,KAAK0H,IAAIpH,EAAE,GAAIiC,EAAE,IACnBnC,EAUF,SAAS,GAAMA,EAAKE,GAGzB,OAFAF,EAAI,GAAKJ,KAAKwQ,MAAMlQ,EAAE,IACtBF,EAAI,GAAKJ,KAAKwQ,MAAMlQ,EAAE,IACfF,EAWF,SAAS,GAAMA,EAAKE,EAAGiC,GAG5B,OAFAnC,EAAI,GAAKE,EAAE,GAAKiC,EAChBnC,EAAI,GAAKE,EAAE,GAAKiC,EACTnC,EAYF,SAAS,GAAYA,EAAKE,EAAGiC,EAAG8D,GAGrC,OAFAjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EACvBjG,EAAI,GAAKE,EAAE,GAAKiC,EAAE,GAAK8D,EAChBjG,EAUF,SAAS,GAASE,EAAGiC,GAC1B,IAAIS,EAAIT,EAAE,GAAKjC,EAAE,GACb2C,EAAIV,EAAE,GAAKjC,EAAE,GACjB,OAAON,KAAKgG,MAAMhD,EAAGC,GAUhB,SAAS,GAAgB3C,EAAGiC,GACjC,IAAIS,EAAIT,EAAE,GAAKjC,EAAE,GACb2C,EAAIV,EAAE,GAAKjC,EAAE,GACjB,OAAO0C,EAAIA,EAAIC,EAAIA,EASd,SAAS,GAAO3C,GACrB,IAAI0C,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACV,OAAON,KAAKgG,MAAMhD,EAAGC,GAShB,SAAS,GAAc3C,GAC5B,IAAI0C,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACV,OAAO0C,EAAIA,EAAIC,EAAIA,EAUd,SAAS,GAAO7C,EAAKE,GAG1B,OAFAF,EAAI,IAAME,EAAE,GACZF,EAAI,IAAME,EAAE,GACLF,EAUF,SAAS,GAAQA,EAAKE,GAG3B,OAFAF,EAAI,GAAK,EAAME,EAAE,GACjBF,EAAI,GAAK,EAAME,EAAE,GACVF,EAUF,SAAS,GAAUA,EAAKE,GAC7B,IAAI0C,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GACNoI,EAAM1F,EAAIA,EAAIC,EAAIA,EAStB,OAPIyF,EAAM,IAERA,EAAM,EAAI1I,KAAK8H,KAAKY,IAGtBtI,EAAI,GAAKE,EAAE,GAAKoI,EAChBtI,EAAI,GAAKE,EAAE,GAAKoI,EACTtI,EAUF,SAAS,GAAIE,EAAGiC,GACrB,OAAOjC,EAAE,GAAKiC,EAAE,GAAKjC,EAAE,GAAKiC,EAAE,GAYzB,SAAS,GAAMnC,EAAKE,EAAGiC,GAC5B,IAAIuB,EAAIxD,EAAE,GAAKiC,EAAE,GAAKjC,EAAE,GAAKiC,EAAE,GAG/B,OAFAnC,EAAI,GAAKA,EAAI,GAAK,EAClBA,EAAI,GAAK0D,EACF1D,EAYF,SAAS,GAAKA,EAAKE,EAAGiC,EAAGkG,GAC9B,IAAIkB,EAAKrJ,EAAE,GACPsJ,EAAKtJ,EAAE,GAGX,OAFAF,EAAI,GAAKuJ,EAAKlB,GAAKlG,EAAE,GAAKoH,GAC1BvJ,EAAI,GAAKwJ,EAAKnB,GAAKlG,EAAE,GAAKqH,GACnBxJ,EAUF,SAAS,GAAOA,EAAKiG,GAC1BA,EAAQA,GAAS,EACjB,IAAIsL,EAAwB,EAApB,IAA0B3R,KAAKE,GAGvC,OAFAE,EAAI,GAAKJ,KAAKuD,IAAIoO,GAAKtL,EACvBjG,EAAI,GAAKJ,KAAKqD,IAAIsO,GAAKtL,EAChBjG,EAWF,SAAS6X,GAAc7X,EAAKE,EAAGwR,GACpC,IAAI9O,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GAGV,OAFAF,EAAI,GAAK0R,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EAC3B7C,EAAI,GAAK0R,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EACpB7C,EAWF,SAAS8X,GAAe9X,EAAKE,EAAGwR,GACrC,IAAI9O,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GAGV,OAFAF,EAAI,GAAK0R,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,GACjC1R,EAAI,GAAK0R,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,GAC1B1R,EAYF,SAAS,GAAcA,EAAKE,EAAGwR,GACpC,IAAI9O,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GAGV,OAFAF,EAAI,GAAK0R,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,GACjC1R,EAAI,GAAK0R,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,GAC1B1R,EAaF,SAAS,GAAcA,EAAKE,EAAGwR,GACpC,IAAI9O,EAAI1C,EAAE,GACN2C,EAAI3C,EAAE,GAGV,OAFAF,EAAI,GAAK0R,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,IACjC1R,EAAI,GAAK0R,EAAE,GAAK9O,EAAI8O,EAAE,GAAK7O,EAAI6O,EAAE,IAC1B1R,EAWF,SAAS,GAAOA,EAAKE,EAAGiC,EAAGY,GAEhC,IAAIgV,EAAK7X,EAAE,GAAKiC,EAAE,GACd6V,EAAK9X,EAAE,GAAKiC,EAAE,GACd8V,EAAOrY,KAAKqD,IAAIF,GAChBmV,EAAOtY,KAAKuD,IAAIJ,GAIpB,OAFA/C,EAAI,GAAK+X,EAAKG,EAAOF,EAAKC,EAAO9V,EAAE,GACnCnC,EAAI,GAAK+X,EAAKE,EAAOD,EAAKE,EAAO/V,EAAE,GAC5BnC,EASF,SAAS,GAAME,EAAGiC,GACvB,IAAIsM,EAAKvO,EAAE,GACPyO,EAAKzO,EAAE,GACP0D,EAAKzB,EAAE,GACP0B,EAAK1B,EAAE,GAEXuQ,EAAM9S,KAAK8H,KAAK+G,EAAKA,EAAKE,EAAKA,GAAM/O,KAAK8H,KAAK9D,EAAKA,EAAKC,EAAKA,GAE9D8O,EAASD,IAAQjE,EAAK7K,EAAK+K,EAAK9K,GAAM6O,EAEtC,OAAO9S,KAAKgT,KAAKhT,KAAKuQ,IAAIvQ,KAAK0H,IAAIqL,GAAS,GAAI,IAS3C,SAAS,GAAK3S,GAGnB,OAFAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAAS,GAAIE,GAClB,MAAO,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAUjC,SAAS,GAAYA,EAAGiC,GAC7B,OAAOjC,EAAE,KAAOiC,EAAE,IAAMjC,EAAE,KAAOiC,EAAE,GAU9B,SAAS,GAAOjC,EAAGiC,GACxB,IAAIgE,EAAKjG,EAAE,GACPkG,EAAKlG,EAAE,GACP0G,EAAKzE,EAAE,GACP0E,EAAK1E,EAAE,GACX,OAAOvC,KAAKyH,IAAIlB,EAAKS,IAAO,EAAmBhH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIlB,GAAKvG,KAAKyH,IAAIT,KAAQhH,KAAKyH,IAAIjB,EAAKS,IAAO,EAAmBjH,KAAK0H,IAAI,EAAK1H,KAAKyH,IAAIjB,GAAKxG,KAAKyH,IAAIR,IAOpK,IAAI,GAAM,GAMN,GAAM,GAMN,GAAM,GAMN,GAAM,GAMN,GAAO,GAMP,GAAU,GAMV,GAAS,GAcT,GAAU,WACnB,IAAIiM,EAAM,KACV,OAAO,SAAU5S,EAAGkT,EAAQC,EAAQC,EAAOC,EAAIC,GAC7C,IAAIjM,EAAGkM,EAgBP,IAdKL,IACHA,EAAS,GAGNC,IACHA,EAAS,GAITI,EADEH,EACE1T,KAAKuQ,IAAImD,EAAQF,EAASC,EAAQnT,EAAEuH,QAEpCvH,EAAEuH,OAGHF,EAAI8L,EAAQ9L,EAAIkM,EAAGlM,GAAK6L,EAC3BN,EAAI,GAAK5S,EAAEqH,GACXuL,EAAI,GAAK5S,EAAEqH,EAAI,GACfgM,EAAGT,EAAKA,EAAKU,GACbtT,EAAEqH,GAAKuL,EAAI,GACX5S,EAAEqH,EAAI,GAAKuL,EAAI,GAGjB,OAAO5S,GA3BU,GCjjBjBiY,IAJyBvY,KAAK8H,KAAK,GACV9H,KAAK8H,KAAK,IAGhB9H,KAAK8H,KAAK,GAAO,GAAO,GAC3C0Q,IAAmB,EAAMxY,KAAK8H,KAAK,IAAQ,GAI3C2Q,GAAY,SAAmBzV,GACjC,OAAuB,EAAhBhD,KAAKsQ,MAAMtN,IAQhB0V,GAAqB,IAAIC,aAAajd,SAASC,GAAsB3Y,GAIpC,IAHA,IACI2S,EAAI,IAAIiG,WADI,KAGPlR,EAAI,EAAGA,EAAImR,IAAenR,IACjCiL,EAAEjL,GAAKA,EAGT,IAAK,IAAIoR,EAAK,EAAGA,EAAKD,IAAmBC,IAAM,CAC7C,IAAIpH,EAAIoH,KAAQ9Y,KAAY,IAAM8Y,IAC9BC,EAAMpG,EAAEmG,GACZnG,EAAEmG,GAAMnG,EAAEjB,GACViB,EAAEjB,GAAKqH,EAGT,IAAK,IAAIC,EAAM,IAAKA,EAdJ,IAcqBA,IACnCrG,EAAEqG,GAAOrG,EAAEqG,EAAM,KAGnB,OAAOrG,EC5cT,IAAMsG,GD0SC,WACL,IAAIjZ,EAAS2H,UAAUC,OAAS,QAAsBsR,IAAjBvR,UAAU,GAAmBA,UAAU,GAAK5H,KAAKC,OAClFmZ,EAAOR,GAAsB3Y,GAE7BoZ,EAAa,IAAIV,aAAaS,GAAME,KAAI,SAAUvW,GACpD,OAAO2V,GAAM3V,EAAI,GAAK,MAEpBwW,EAAa,IAAIZ,aAAaS,GAAME,KAAI,SAAUvW,GACpD,OAAO2V,GAAM3V,EAAI,GAAK,EAAI,MAExByW,EAAa,IAAIb,aAAaS,GAAME,KAAI,SAAUvW,GACpD,OAAO2V,GAAM3V,EAAI,GAAK,EAAI,MAExB0W,EAAa,IAAId,aAAaS,GAAME,KAAI,SAAUvW,GACpD,OAAO2V,GAAM3V,EAAI,GAAK,EAAI,MAE5B,OAAO,SAAiBC,EAAGC,EAAGa,EAAGC,GAC/B,IAAI2V,EAAIC,EAAIC,EAAIC,EAAIC,EAGhB1W,GAAKJ,EAAIC,EAAIa,EAAIC,GAAKwU,GAEtB5Q,EAAI8Q,GAAUzV,EAAII,GAClB4T,EAAIyB,GAAUxV,EAAIG,GAClB6T,EAAIwB,GAAU3U,EAAIV,GAClByQ,EAAI4E,GAAU1U,EAAIX,GAClBqF,GAAKd,EAAIqP,EAAIC,EAAIpD,GAAK2E,GAOtB5J,EAAK5L,GALA2E,EAAIc,GAOTqG,EAAK7L,GALA+T,EAAIvO,GAMTuG,EAAKlL,GALAmT,EAAIxO,GAMTsR,EAAKhW,GALA8P,EAAIpL,GAWTuR,EAAQ,EACRC,EAAQ,EACRC,EAAQ,EACRC,EAAQ,EACRvL,EAAKE,EAAIkL,IAAaC,IACtBrL,EAAKI,EAAIgL,IAAaE,IACtBtL,EAAKmL,EAAIC,IAAaG,IACtBrL,EAAKE,EAAIiL,IAAaC,IACtBpL,EAAKiL,EAAIE,IAAaE,IACtBnL,EAAK+K,EAAIG,IAAaC,IAS1B,IAAIC,EAAKJ,GAAS,EAAI,EAAI,EACtBK,EAAKJ,GAAS,EAAI,EAAI,EACtBK,EAAKJ,GAAS,EAAI,EAAI,EACtBK,EAAKJ,GAAS,EAAI,EAAI,EAEtBK,EAAKR,GAAS,EAAI,EAAI,EACtBS,EAAKR,GAAS,EAAI,EAAI,EACtBS,EAAKR,GAAS,EAAI,EAAI,EACtBS,EAAKR,GAAS,EAAI,EAAI,EAEtBS,EAAKZ,GAAS,EAAI,EAAI,EACtBa,EAAKZ,GAAS,EAAI,EAAI,EACtBa,EAAKZ,GAAS,EAAI,EAAI,EACtBa,EAAKZ,GAAS,EAAI,EAAI,EAEtBtL,EAAKD,EAAKwL,EAAK5B,GAEfzJ,EAAKD,EAAKuL,EAAK7B,GACfvJ,EAAKD,EAAKsL,EAAK9B,GACfwC,EAAKjB,EAAKQ,EAAK/B,GACfxU,EAAK4K,EAAK4L,EAAK,EAAMhC,GAErBvU,EAAK6K,EAAK2L,EAAK,EAAMjC,GACrBtU,EAAK8K,EAAK0L,EAAK,EAAMlC,GACrB7F,EAAKoH,EAAKY,EAAK,EAAMnC,GACrByC,EAAKrM,EAAKgM,EAAK,EAAMpC,GAErB0C,EAAKpM,EAAK+L,EAAK,EAAMrC,GACrB2C,EAAKnM,EAAK8L,EAAK,EAAMtC,GACrB4C,EAAKrB,EAAKgB,EAAK,EAAMvC,GACrB6C,EAAKzM,EAAK,EAAM,EAAM4J,GAEtB8C,EAAKxM,EAAK,EAAM,EAAM0J,GACtB+C,GAAKvM,EAAK,EAAM,EAAMwJ,GACtBgD,GAAKzB,EAAK,EAAM,EAAMvB,GAEtBiD,GAAS,IAAJ9T,EACL+T,GAAS,IAAJ1E,EACL2E,GAAS,IAAJ1E,EACL2E,GAAS,IAAJ/H,EAELgI,GAAK,GAAMjN,EAAKA,EAAKE,EAAKA,EAAKE,EAAKA,EAAK+K,EAAKA,EAClD,GAAI8B,GAAK,EAAGnC,EAAK,MAAS,CACxB,IAAIoC,GAAML,GAAKrC,EAAKsC,GAAKtC,EAAKuC,GAAKvC,EAAKwC,MAExClC,GADAmC,IAAMA,IACIA,IAAMxC,EAAWyC,IAAOlN,EAAK2K,EAAWuC,IAAOhN,EAAK0K,EAAWsC,IAAO9M,EAAKyK,EAAWqC,IAAO/B,GAEzG,IAAIgC,GAAK,GAAMlN,EAAKA,EAAKE,EAAKA,EAAKE,EAAKA,EAAK+L,EAAKA,EAClD,GAAIe,GAAK,EAAGpC,EAAK,MAAS,CACxB,IAAIqC,GAAMP,GAAKrB,EAAKhB,EAAKsC,GAAKrB,EAAKjB,EAAKuC,GAAKrB,EAAKlB,EAAKwC,GAAKrB,KAE5DZ,GADAoC,IAAMA,IACIA,IAAM1C,EAAW2C,IAAOnN,EAAK0K,EAAWyC,IAAOjN,EAAKyK,EAAWwC,IAAO/M,EAAKwK,EAAWuC,IAAOhB,GAEzG,IAAIiB,GAAK,GAAMjY,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKyO,EAAKA,EAClD,GAAIsJ,GAAK,EAAGrC,EAAK,MAAS,CACxB,IAAIsC,GAAMT,GAAKjB,EAAKpB,EAAKsC,GAAKjB,EAAKrB,EAAKuC,GAAKjB,EAAKtB,EAAKwC,GAAKjB,KAE5Df,GADAqC,IAAMA,IACIA,IAAM5C,EAAW6C,IAAOlY,EAAKuV,EAAW2C,IAAOjY,EAAKuV,EAAW0C,IAAOhY,EAAKuV,EAAWyC,IAAOvJ,GAEzG,IAAIwJ,GAAK,GAAMlB,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAClD,GAAIe,GAAK,EAAGtC,EAAK,MAAS,CACxB,IAAIuC,GAAMX,GAAKb,EAAKxB,EAAKsC,GAAKb,EAAKzB,EAAKuC,GAAKb,EAAK1B,EAAKwC,GAAKb,KAE5DlB,GADAsC,IAAMA,IACIA,IAAM9C,EAAW+C,IAAOnB,EAAK1B,EAAW6C,IAAOlB,EAAK1B,EAAW4C,IAAOjB,EAAK1B,EAAW2C,IAAOhB,GAEzG,IAAIiB,GAAK,GAAMhB,EAAKA,EAAKC,EAAKA,EAAKC,GAAKA,GAAKC,GAAKA,GAClD,GAAIa,GAAK,EAAGvC,EAAK,MAAS,CACxB,IAAIwC,GAAMb,GAAK,EAAIrC,EAAKsC,GAAK,EAAItC,EAAKuC,GAAK,EAAIvC,EAAKwC,GAAK,KAEzD9B,GADAuC,IAAMA,IACIA,IAAMhD,EAAWiD,IAAOjB,EAAK9B,EAAW+C,IAAOhB,EAAK9B,EAAW8C,IAAOf,GAAK9B,EAAW6C,IAAOd,IAGzG,OAAO,IAAQ9B,EAAKC,EAAKC,EAAKC,EAAKC,IC/azByC,GAYd,SAASC,GAAYC,EAAWjJ,GAG9B,IAFA,IAAMkJ,EAAS,IAAI/D,aAAa8D,EAAIjJ,GAC9BmJ,EAAyB,GACtBhV,EAAI,EAAGA,EAAI+U,EAAO7U,OAAQF,GAAK6L,EACtCmJ,EAAOC,KAAKF,EAAOG,SAASlV,EAAGA,EAAI6L,IAErC,OAAOmJ,EAGF,IAAMG,GAAb,WAqBE,WAAYC,GAAiB,KAnBtBC,cAAwB,GAmBF,KAjBtBC,aAAqBC,EAAK9b,SAAS8b,EAAK/c,UAiBlB,KAdtBgd,QAAkB,GAcI,KAbtBC,QAAkB,GAaI,KAVtBC,aAAyB,GAUH,KATtBC,YAAsB,GASA,KARtBC,aAAuB,GAQD,KAPtBC,SAAmB,GAOG,KALtBC,aAAyB,GAKH,KAJtBC,YAAsB,GAIA,KAHtBC,aAAuB,GAGD,KAFtBC,gBAA0B,GAEJ,KA4CrBC,MAAQX,EAAK/c,SA5CQ,KAoGrB2d,aAAuB,EApGF,KAsGrBC,cAAgBC,EAAK7d,SAtGA,KAuGrB8d,WAAaD,EAAK7d,SAvGG,KAwGrB+d,UAAYF,EAAK7d,SAxGI,KAyGrBge,aAAeH,EAAK7d,SAzGC,KA0JrBie,QAAUJ,EAAK7d,SA1JM,KA2JrBke,SAAWL,EAAK7d,SA3JK,KA4JrBme,QAAUC,EAAKpe,SA5JM,KA6JrBqe,SAAWD,EAAKpe,SA7JK,KAwNrBse,QAAUvB,EAAK/c,SAxNM,KAiQrBue,kBAAoBxB,EAAK9b,SAAS8b,EAAK/c,UAhQ7C,IAAMsc,EAAKkC,KAAKlC,EAAIM,EAAMlV,OAE1B8W,KAAK3B,cAAgBR,GAAYC,EAAG,IACpCkC,KAAKxB,QAAUX,GAAYC,EAAG,GAC9BkC,KAAKvB,QAAUZ,GAAYC,EAAG,GAC9BkC,KAAKrB,YAAcd,GAAYC,EAAG,GAClCkC,KAAKpB,aAAef,GAAYC,EAAG,GACnCkC,KAAKnB,SAAWhB,GAAYC,EAAG,GAE/BkC,KAAKhB,aAAenB,GAAYC,EAAG,GACnCkC,KAAKjB,YAAclB,GAAYC,EAAG,GAClCkC,KAAKf,gBAAkBpB,GAAYC,EAAG,GAEtC,IAAK,IAAI9U,EAAI,EAAGA,EAAIoV,EAAMlV,SAAUF,EAAG,CACrCiX,EAAKxd,SAASud,KAAK3B,cAAcrV,IAEjCqW,EAAK7c,IAAIwd,KAAKxB,QAAQxV,GAAIoV,EAAMpV,GAAGyP,GAAI2F,EAAMpV,GAAG0P,GAAI0F,EAAMpV,GAAG2P,IAC7DuH,EAAK1d,IACHwd,KAAKvB,QAAQzV,GACboV,EAAMpV,GAAG4B,GACTwT,EAAMpV,GAAG6B,GACTuT,EAAMpV,GAAG8B,GACTsT,EAAMpV,GAAG+B,IAGX,IAAMoV,EAAId,EAAKvN,YACbuN,EAAK7d,SACLwe,KAAKxB,QAAQxV,GACbgX,KAAKvB,QAAQzV,IACZ,KAEHmX,EAAE,IAAM,GAAK9e,KAAKC,SAClB+d,EAAKxd,KAAKme,KAAKrB,YAAY3V,GAAImX,GAC/Bd,EAAKxd,KAAKme,KAAKpB,aAAa5V,GAAImX,GAEhC5B,EAAK9b,SAASud,KAAKjB,YAAY/V,IAC/BuV,EAAK9b,SAASud,KAAKhB,aAAahW,IAEhCgX,KAAKtB,aAAaT,MAAM,GACxB+B,KAAKlB,aAAab,MAAM,IA7D9B,2BAkESmC,aAAP,SAAoBC,GAClB,IAAK,IAAIrX,EAAI,EAAGA,EAAIgX,KAAKrB,YAAYzV,SAAUF,EAC7CqW,EAAKvN,YACHkO,KAAKpB,aAAa5V,GAClBgX,KAAKrB,YAAY3V,GACjBgX,KAAKnB,SAAS7V,GACdqX,GAIJ,IAAK,IAAIrX,EAAI,EAAGA,EAAIgX,KAAKjB,YAAY7V,SAAUF,EAC7CkX,EAAKpO,YACHkO,KAAKhB,aAAahW,GAClBgX,KAAKjB,YAAY/V,GACjBgX,KAAKf,gBAAgBjW,GACrBqX,GAEF9B,EAAKpM,UAAU6N,KAAKhB,aAAahW,GAAIgX,KAAKhB,aAAahW,KAnF7D,EAuFSsX,cAAP,SAAqBD,GAEnB,IADA,IAAME,EAAiBlf,KAAKyV,KA3GV,GA2G+BuJ,GAAMA,EAC9CrX,EAAI,EAAGA,EAAIgX,KAAKrB,YAAYzV,SAAUF,EAC7CqW,EAAK9X,SAASyY,KAAKnB,SAAS7V,GAAIgX,KAAKpB,aAAa5V,GAAIgX,KAAKrB,YAAY3V,IACvEqW,EAAK3X,MAAMsY,KAAKnB,SAAS7V,GAAIgX,KAAKnB,SAAS7V,GAAIuX,GAC/ClB,EAAKxd,KAAKme,KAAKrB,YAAY3V,GAAIgX,KAAKpB,aAAa5V,IAInD,IADA,IAAMwX,EAAiBnf,KAAKyV,KAjHV,GAiH+BuJ,GAAMA,EAC9CrX,EAAI,EAAGA,EAAIgX,KAAKjB,YAAY7V,SAAUF,EAC7CkX,EAAK3Y,SACHyY,KAAKf,gBAAgBjW,GACrBgX,KAAKhB,aAAahW,GAClBgX,KAAKjB,YAAY/V,IAEnBkX,EAAKxY,MACHsY,KAAKf,gBAAgBjW,GACrBgX,KAAKf,gBAAgBjW,GACrBwX,GAEFjC,EAAK1c,KAAKme,KAAKjB,YAAY/V,GAAIgX,KAAKhB,aAAahW,KA3GvD,EA+GSyX,iBAAP,WACE,IAAK,IAAIzX,EAAI,EAAGA,EAAIgX,KAAK3B,cAAcnV,SAAUF,EAC/CiX,EAAK3V,wBACH0V,KAAK3B,cAAcrV,GACnBgX,KAAKjB,YAAY/V,GACjBgX,KAAKrB,YAAY3V,KApHzB,EA+HS0X,QAAP,SAAe3Q,EAAc4Q,EAAiBxM,GAC5C6L,KAAKb,aAAe,EAEpB,IADA,IAAMyB,EAAIhB,EAAK3a,SAAS+a,KAAKL,QAASK,KAAK1B,cAClCtV,EAAI,EAAGA,EAAIgX,KAAKrB,YAAYzV,SAAUF,EAAG,CAEhD,IAAM6X,EAAOxB,EAAK9X,SAChByY,KAAKZ,cACLY,KAAKrB,YAAY3V,GACjB+G,GAEIjG,EAAIuV,EAAKtH,IAAI8I,EAAMF,GACnBR,EAAId,EAAKvN,YAAYkO,KAAKV,WAAYvP,EAAQ4Q,EAAW7W,GAEzDgX,EAASd,KAAKvB,QAAQzV,GAGtBuJ,EAAI8M,EAAK9X,SAASyY,KAAKT,UAAWS,KAAKrB,YAAY3V,GAAImX,GACvDzY,EAAQrG,KAAKuQ,IAAI,GAAKkP,EAAO,GAAK3M,GAAQ,EAAIkL,EAAK1K,OAAOpC,KAChE,KAAI7K,EAAQ,KAAQ2X,EAAKrN,cAAcgO,KAAKnB,SAAS7V,IAAM,KAA3D,CAIAgX,KAAKtB,aAAa1V,GAAKgX,KAAKlB,aAAa9V,IAAM,EAG/CqW,EAAKvN,YAAYkO,KAAKnB,SAAS7V,GAAIgX,KAAKnB,SAAS7V,GAAIuJ,EAAG7K,GAExD,IAAMqZ,EAAW1B,EAAKjM,cAAc4M,KAAKP,QAASqB,EAAgBF,GAClEvB,EAAKvN,YACHkO,KAAKnB,SAAS7V,GACdgX,KAAKnB,SAAS7V,GACd+X,GACC,GAAKrZ,GAIR2X,EAAKlN,UAAU0O,EAAMA,GACrBxB,EAAKjN,MAAM4N,KAAKR,aAAcmB,EAAWG,GACzCzB,EAAKvN,YACHkO,KAAKf,gBAAgBjW,GACrBgX,KAAKf,gBAAgBjW,GACrBgX,KAAKR,aACL9X,MAzKR,EAmLSsZ,yBAAP,SAAgCX,GAU9B,IATA,IAAMY,EAAKjB,KAAKD,kBACVmB,EAAKlB,KAAK1B,aACV6C,EAAKvB,EAAK3a,SAAS+a,KAAKL,QAASsB,GACjCG,EAAKxB,EAAK3a,SAAS+a,KAAKH,SAAUqB,GAElCG,EAAQ,EAAIhgB,KAAK0H,IAAI,IAAMsX,GAC3BiB,EAAKD,EAAQnB,EAAKqB,SAASN,EAAIC,GAE/BM,EA5MY,GA4MWnB,EACpBrX,EAAI,EAAGA,EAAIgX,KAAKpB,aAAa1V,SAAUF,EAAG,CACjD,IAAMyY,EAAKpC,EAAKjM,cAAc4M,KAAKP,QAASO,KAAKxB,QAAQxV,GAAImY,GACvDO,EAAKrC,EAAKjM,cAAc4M,KAAKN,SAAUM,KAAKxB,QAAQxV,GAAIoY,GACxDO,EAAKtC,EAAKkC,SAASE,EAAIC,GAC7BrC,EAAKhN,KACH2N,KAAKpB,aAAa5V,GAClBgX,KAAKpB,aAAa5V,GAClB0Y,EACAF,EACEngB,KAAK0H,IACH,IACA,GAAK,EAAI,KAAQsW,EAAK3K,QAAQgN,EAAI1B,KAAKpB,aAAa5V,OAGtDgX,KAAKtB,aAAa1V,GAAK,EACzBgX,KAAKtB,aAAa1V,GAAK3H,KAAKuQ,IAAI,EAAGoO,KAAKtB,aAAa1V,GAAKqX,IAE1DL,KAAKtB,aAAa1V,GAAK,GACtBqW,EAAKkC,SAASvB,KAAKpB,aAAa5V,GAAI0Y,GAAM,IAAMC,GAC/CtC,EAAKnW,OAAO8W,KAAKnB,SAAS7V,IAAM,IAAOqY,EAAQM,KAEjDtC,EAAKxd,KAAKme,KAAKpB,aAAa5V,GAAI0Y,GAChCrC,EAAKxd,KAAKme,KAAKrB,YAAY3V,GAAI0Y,GAC/BrC,EAAK7c,IAAIwd,KAAKnB,SAAS7V,GAAI,EAAG,EAAG,GACjCgX,KAAKtB,aAAa1V,GAAK,GAK3B,IADA,IAAM4Y,EAxOY,GAwOWvB,EACpBrX,EAAI,EAAGA,EAAIgX,KAAKjB,YAAY7V,SAAUF,EAC7CuV,EAAKlM,KAAK2N,KAAKhB,aAAahW,GAAIgX,KAAKhB,aAAahW,GAAIkY,EAAIU,GAC1DrD,EAAKpM,UAAU6N,KAAKhB,aAAahW,GAAIgX,KAAKhB,aAAahW,IACnDgX,KAAKlB,aAAa9V,GAAK,IACzBgX,KAAKlB,aAAa9V,GAAK3H,KAAKuQ,IAAI,EAAGoO,KAAKlB,aAAa9V,GAAKqX,KAG1DL,KAAKlB,aAAa9V,GAAK,GACtBkX,EAAKqB,SAASvB,KAAKhB,aAAahW,GAAIkY,GAAM,IAAOI,GAChDpB,EAAKvL,OAAOqL,KAAKf,gBAAgBjW,IAAM,IAAOqY,EAAQC,KAExD/C,EAAK1c,KAAKme,KAAKhB,aAAahW,GAAIkY,GAChC3C,EAAK1c,KAAKme,KAAKjB,YAAY/V,GAAIkY,GAC/B3C,EAAK/b,IAAIwd,KAAKf,gBAAgBjW,GAAI,EAAG,EAAG,EAAG,GAC3CgX,KAAKlB,aAAa9V,GAAK,IAxO/B,EA+OU6Y,eAAR,SAAuB/X,GAWrB,IAVA,IAAMgY,EAAK,KAAQhY,EAGbiY,EAAK,KAAUjY,EACfyC,EAhQU,KAkQVqU,EAAIvf,KAAKuD,IAjQD,KAiQiBkF,GAEzBkY,EAAKpC,EAAK3a,SAAS+a,KAAKL,QAASK,KAAK1B,cAEnCtV,EAAI,EAAGA,EAAIgX,KAAKrB,YAAYzV,SAAUF,EAAG,OAC3BgX,KAAKxB,QAAQxV,GAA3ByP,EADyC,KACrCC,EADqC,KACjCC,EADiC,KAE1CsJ,EAzQM,GA2QTrB,EAAIrG,GAAMuH,EAAKvV,EAAIkM,EAbb,EAasBlM,EAAImM,EAZ1B,EAYmCnM,EAAIoM,EAAIoJ,GAChD/B,KAAKb,aACL,KACJ,GAAI8C,EAAI,EAAG,CACT,IAAMC,EAAS7C,EAAKjM,cAClB4M,KAAKP,QACLO,KAAKvB,QAAQzV,GACbgZ,GAEF3C,EAAKvN,YAAYkO,KAAKnB,SAAS7V,GAAIgX,KAAKnB,SAAS7V,GAAIkZ,GAASD,GAE9D,IAAM5K,EAAQkH,EAAKnV,IAAI4W,KAAKF,QAASE,KAAK1B,aAAc0B,KAAKvB,QAAQzV,IACrEkX,EAAKpO,YACHkO,KAAKf,gBAAgBjW,GACrBgX,KAAKf,gBAAgBjW,GACrBqO,EACA,MAAS4K,GAEXjC,KAAKtB,aAAa1V,IAAM,EACxBgX,KAAKlB,aAAa9V,IAAM,KAjRhC,EAwRSmZ,OAAP,SAAcrY,EAAWuW,GACvBL,KAAKb,aAAe9d,KAAK0H,IAAI,EAAGiX,KAAKb,aAAe,KAAQkB,GAC5DL,KAAK6B,eAAe/X,GACpBkW,KAAKI,aAAaC,GAClBL,KAAKgB,yBAAyBX,GAC9BL,KAAKM,cAAcD,GACnBL,KAAKS,mBACLlC,EAAK1c,KAAKme,KAAKD,kBAAmBC,KAAK1B,eA/R3C,KCzBa8D,GAWTC,KAAKC,MACT,kzgJ,s0BCGA,IAAMC,GAAKlD,EAAK7d,SACVghB,GAAKnD,EAAK7d,SACVihB,GAASpD,EAAK7d,SACpB,SAASkhB,GAAW/gB,EAAQiC,EAAQe,GAKhC,OAJA0a,EAAKhW,IAAIkZ,GAAI3e,EAAGjC,GAChB0d,EAAKhW,IAAImZ,GAAI7d,EAAGhD,GAChB0d,EAAKjN,MAAMqQ,GAAQF,GAAIC,IACvBnD,EAAKlN,UAAUsQ,GAAQA,IAChBA,GCvBJ,ICOME,GAAb,6BA2NE,WAAoBC,GAA2B,KAzNxCC,cAAwB,EAyNgB,KAxExCC,MAAQzhB,KAAKE,GAAK,EAwEsB,KAvExCwhB,IAAM,EAuEkC,KAtExCxB,SAAW,IAsE6B,KApEvCzR,IAAMuP,EAAKvd,WAAW,EAAG,GAAI,GAoEU,KAnEvCiO,OAASsP,EAAKvd,WAAW,EAAG,EAAG,GAmEQ,KAlEvCkhB,GAAK3D,EAAKvd,YAAY,GAAI,GAAI,GAkES,KAjEvCmhB,GAAK5D,EAAKvd,WAAW,EAAG,EAAG,GAiEY,KAhEvCuX,KAAO4G,EAAKxd,SAASwd,EAAKze,UAgEa,KA/DvC0hB,KAAOjD,EAAKxd,SAASwd,EAAKze,UA+Da,KA9DvC2hB,SAAWlD,EAAKxd,SAASwd,EAAKze,UA8DS,KA7DvC4hB,YAAcnD,EAAKxd,SAASwd,EAAKze,UA6DM,KAKvC6hB,eAAiB,EALsB,KA8BxCC,eAAiBjE,EAAK7d,SA9BkB,KA+BxC+hB,iBAAmBlE,EAAK7d,SA/BgB,KAgCxCgiB,iBAAmBnE,EAAK7d,SAhCgB,KAiCxCiiB,eAAiBpE,EAAK7d,SAjCkB,KAkCxCkiB,eAAiBrE,EAAK7d,SAlCkB,KAmCxCmiB,SAAWtE,EAAK7d,SAnCwB,KAA3BohB,KAClB5C,KAAK4D,gBACL5D,KAAK6D,eA7NT,SAIUC,WAAR,SAAmBC,EAAcC,GAC/B,IAAMpB,EAAK5C,KAAK4C,GACVqB,EAASrB,EAAGsB,aAAaH,GAC/B,IAAKE,EACH,MAAM,IAAIE,MAAM,gCAIlB,OAFAvB,EAAGwB,aAAaH,EAAQD,GACxBpB,EAAGyB,cAAcJ,GACVA,GAZX,EAeUK,YAAR,SAAoBC,GAClB,IAAM3B,EAAK5C,KAAK4C,GACV4B,EAAKxE,KAAK8D,WAAWlB,EAAG6B,cAAeF,EAAKG,MAC5CC,EAAK3E,KAAK8D,WAAWlB,EAAGgC,gBAAiBL,EAAKM,MAC9CC,EAAOlC,EAAGmC,gBAChB,IAAKD,EACH,MAAM,IAAIX,MAAM,iCAalB,OAXAvB,EAAGoC,aAAaF,EAAMN,GACtB5B,EAAGoC,aAAaF,EAAMH,GACtB/B,EAAGqC,YAAYH,GAEVlC,EAAGsC,oBAAoBJ,EAAMlC,EAAGuC,cACnCC,QAAQC,MAAM,cAAe,CAC3BP,KAAMlC,EAAG0C,kBAAkBR,GAC3BD,KAAMjC,EAAG2C,iBAAiBZ,GAC1BD,KAAM9B,EAAG2C,iBAAiBf,KAGvBM,GAlCX,EAuDUlB,cAAR,WACE,IAAM4B,EAAWxF,KAAKyF,UAAYzF,KAAKsE,YAAY,CACjDI,KDhEyB,m9BCiEzBG,KDjCyB,qOCoCrBjC,EAAK5C,KAAK4C,GAEhB5C,KAAK0F,UAAY9C,EAAG+C,kBAAkBH,EAAS,aAC/CxF,KAAK4F,QAAUhD,EAAG+C,kBAAkBH,EAAS,WAC7CxF,KAAK6F,OAASjD,EAAG+C,kBAAkBH,EAAS,UAC5CxF,KAAK8F,QAAUlD,EAAG+C,kBAAkBH,EAAS,WAE7CxF,KAAK+F,SAAWnD,EAAGoD,mBAAmBR,EAAS,YAC/CxF,KAAKiG,UAAYrD,EAAGoD,mBAAmBR,EAAS,aAChDxF,KAAKkG,MAAQtD,EAAGoD,mBAAmBR,EAAS,SAE5CxF,KAAKmG,KAAOvD,EAAGoD,mBAAmBR,EAAS,QAE3CxF,KAAKoG,gBAAkBxD,EAAGoD,mBAAmBR,EAAS,mBACtDxF,KAAKqG,kBAAoBzD,EAAGoD,mBAAmBR,EAAS,qBACxDxF,KAAKsG,kBAAoB1D,EAAGoD,mBAAmBR,EAAS,qBAExDxF,KAAKuG,gBAAkB3D,EAAGoD,mBAAmBR,EAAS,mBACtDxF,KAAKwG,gBAAkB5D,EAAGoD,mBAAmBR,EAAS,mBACtDxF,KAAKyG,UAAY7D,EAAGoD,mBAAmBR,EAAS,cAhFpD,EAwFU3B,aAAR,WACE,IAAMjB,EAAK5C,KAAK4C,GADK,EF5DlB,WACH,IAAM8D,EAAmB,GACnBC,EAAmB,GAEjBC,EAA6CxE,GAA7CwE,OAAQ5D,EAAqCZ,GAArCY,GAAIC,EAAiCb,GAAjCa,GAAI4D,EAA6BzE,GAA7ByE,MAAOrI,EAAsB4D,GAAtB5D,QAASsI,EAAa1E,GAAb0E,SAElC1I,EAAQgE,GAAUhE,MAAMzD,KAAI,SAACoM,EAAQjS,GAKvC,IAJA,IAIA,EAJMkS,EAAQL,EAAQzd,OAD4B,EAE7BsV,EAAQ1J,GAAtB2D,EAF2C,KAEvCC,EAFuC,KAEnCC,EAFmC,OAG7BmO,EAAShS,GAAvBlK,EAH2C,KAGvCC,EAHuC,KAGnCC,EAHmC,KAI5CC,EAAK1J,KAAKgG,MAAMuD,EAAIC,EAAIC,GAC9B,KAAmCic,KAAnC,aACI,IADuC,IACvC,EADuC,UAA/BE,EAA+B,KACvC,KADuC,QACvC,aAA6B,CAOzB,IAPyB,IAOzB,EAPOC,EAAkB,UACFxE,GACnBmE,EAAMK,EAAK,IACXL,EAAMK,EAAK,IACXL,EAAMK,EAAK,KAHPC,EADiB,KACbC,EADa,KACTC,EADS,OAKLT,EAAOK,GAAnBjU,EALiB,KAKdsU,EALc,KAKX1jB,EALW,KAMnB2jB,EAAUb,EAAQxd,OAAS,GACjC,KAAwBge,KAAxB,aAA8B,KAAnBM,EAAmB,UACLX,EAAMW,GAApBC,EADmB,KACfC,EADe,KACXC,EADW,KAE1BjB,EAAQzI,KACJwJ,EAAIC,EAAIC,EAAI,EACZR,EAAIC,EAAIC,EAAI,EACZrU,EAAI,IAAKsU,EAAI,IAAK1jB,EAAI,IAAKqjB,IAAaL,EAAO1d,OAAS,EAAI,EAAI,EAChEuP,EAAIC,EAAIC,EAAI,GAGpB,IAAK,IAAI3P,EAAI,EAAGA,EAAIke,EAAKhe,SAAUF,EAC/B2d,EAAQ1I,KAAKsJ,EAASA,EAAUve,EAAI,EAAGue,EAAUve,GAI7D,MAAO,CACHyP,KAAIC,KAAIC,KACR/N,KAAIC,KAAIC,KAAIC,KACZic,QACAY,IAAKjB,EAAQzd,WAIrB,MAAO,CACHwd,UACAC,UACAvI,QACA4E,GAAI3D,EAAKvd,WAAWkhB,EAAG,GAAIA,EAAG,GAAIA,EAAG,IACrCC,GAAI5D,EAAKvd,WAAWmhB,EAAG,GAAIA,EAAG,GAAIA,EAAG,KEgBG4E,GAApCnB,EAFa,EAEbA,QAASC,EAFI,EAEJA,QAASvI,EAFL,EAEKA,MAAO4E,EAFZ,EAEYA,GAAIC,EAFhB,EAEgBA,GACrCjD,KAAK8H,SAAW1J,EAChB4B,KAAK+H,aAAepB,EAAQzd,OAE5BmW,EAAKxd,KAAKme,KAAKgD,GAAIA,GACnB3D,EAAKxd,KAAKme,KAAKiD,GAAIA,GAEnB5D,EAAK/X,IAAI0Y,KAAKjQ,OAAQiQ,KAAKgD,GAAIhD,KAAKiD,IACpC5D,EAAK3X,MAAMsY,KAAKjQ,OAAQiQ,KAAKjQ,OAAQ,IAErC,IAAMiY,EAAWpF,EAAGqF,eACpB,IAAKD,EACH,MAAM,IAAI7D,MAAM,sCAElBnE,KAAKkI,WAAaF,EAClBpF,EAAGuF,WAAWvF,EAAGwF,aAAcJ,GAC/BpF,EAAGyF,WAAWzF,EAAGwF,aAAc,IAAIlnB,aAAawlB,GAAU9D,EAAG0F,aAE7D,IAAMC,EAAW3F,EAAGqF,eACpB,IAAKM,EACH,MAAM,IAAIpE,MAAM,oCAElBnE,KAAKwI,WAAaD,EAClB3F,EAAGuF,WAAWvF,EAAG6F,qBAAsBF,GACvC3F,EAAGyF,WACDzF,EAAG6F,qBACH,IAAIC,YAAY/B,GAChB/D,EAAG0F,aAGLtI,KAAK2I,UAAY,IAAIxK,GAAaC,IAxHtC,EA2HUwK,cAAR,WACE,IAAMhG,EAAK5C,KAAK4C,GAEhBA,EAAGuF,WAAWvF,EAAGwF,aAAcpI,KAAKkI,YAChClI,KAAK0F,WAAa,IACpB9C,EAAGiG,wBAAwB7I,KAAK0F,WAChC9C,EAAGkG,oBAAoB9I,KAAK0F,UAAW,EAAG9C,EAAGmG,OAAO,EAAO,GAAI,IAE7D/I,KAAK4F,SAAW,IAClBhD,EAAGiG,wBAAwB7I,KAAK4F,SAChChD,EAAGkG,oBAAoB9I,KAAK4F,QAAS,EAAGhD,EAAGmG,OAAO,EAAO,GAAI,KAE3D/I,KAAK6F,QAAU,IACjBjD,EAAGiG,wBAAwB7I,KAAK6F,QAChCjD,EAAGkG,oBAAoB9I,KAAK6F,OAAQ,EAAGjD,EAAGmG,OAAO,EAAO,GAAI,KAE1D/I,KAAK8F,SAAW,IAClBlD,EAAGiG,wBAAwB7I,KAAK8F,SAChClD,EAAGkG,oBAAoB9I,KAAK8F,QAAS,EAAGlD,EAAGmG,OAAO,EAAO,GAAI,KAG/DnG,EAAGuF,WAAWvF,EAAG6F,qBAAsBzI,KAAKwI,aAhJhD,EAgKUQ,aAAR,WAEE,IAAMlZ,EAAMkQ,KAAKlQ,IACXC,EAASiQ,KAAKjQ,OACd+S,EAAQ9C,KAAK8C,MACbC,EAAM/C,KAAK+C,IACXxB,EAAWvB,KAAKuB,SAGhByB,EAAKhD,KAAKgD,GACVC,EAAKjD,KAAKiD,GAChBlT,EAAO,GAAK,IAAOiT,EAAG,GAAKC,EAAG,IAC9BlT,EAAO,GAAK,IAAOiT,EAAG,GAAKC,EAAG,IAC9BlT,EAAO,GAAK,IAAOiT,EAAG,GAAKC,EAAG,IAG9BnT,EAAI,GAAKzO,KAAKuD,IAAIke,GAASzhB,KAAKuD,IAAIme,GAAOxB,EAAWxR,EAAO,GAC7DD,EAAI,GAAKzO,KAAKqD,IAAIqe,GAAOxB,EAAWxR,EAAO,GAC3CD,EAAI,GAAKzO,KAAKqD,IAAIoe,GAASzhB,KAAKuD,IAAIme,GAAOxB,EAAWxR,EAAO,GAG7DkQ,EAAKpQ,OAAOoQ,EAAKxd,SAASud,KAAK3G,MAAOvJ,EAAKC,EAAQ,CAAC,EAAG,EAAG,IAC1DkQ,EAAKvR,YACHuR,EAAKxd,SAASud,KAAKkD,MACnB7hB,KAAKE,GAAK,EACVye,KAAK4C,GAAGqG,mBAAqBjJ,KAAK4C,GAAGsG,oBACrC,GACA,MAEFjJ,EAAK7W,IAAI4W,KAAKmD,SAAUnD,KAAKkD,KAAMlD,KAAK3G,MACxC4G,EAAKnd,OAAOkd,KAAKoD,YAAapD,KAAKmD,WA9LvC,EAiMSgG,UAAP,SAAiB9kB,EAAWC,GAC1B8gB,QAAQlO,IAAI,SAAU7S,EAAGC,EAAG0b,KAAK4C,IACjC,IAAMwG,EAAOlJ,EAAKpe,WACf,EAAIuC,EAAIglB,OAAOC,iBAAoBtJ,KAAK4C,GAAGqG,mBAAqB,EACjE,EAAK,EAAI3kB,EAAI+kB,OAAOC,iBAAoBtJ,KAAK4C,GAAGsG,oBAChD,EACA,GAEFhJ,EAAKhN,cAAckW,EAAMA,EAAMpJ,KAAKoD,aACpC,IAAMmG,EAAQlK,EAAKvd,WACjBsnB,EAAK,GAAKA,EAAK,GACfA,EAAK,GAAKA,EAAK,GACfA,EAAK,GAAKA,EAAK,IAEjB/J,EAAKlN,UAAUoX,EAAOA,GACtB,IAAMvZ,EAAKqP,EAAKvd,WAAW,EAAG,EAAG,GACjCud,EAAKvN,YAAY9B,EAAIA,EAAIuZ,GAAQlK,EAAKtH,IAAIwR,EAAOvZ,IACjDqP,EAAKlN,UAAUnC,EAAIA,GACnBuO,EAAKnF,QACH4G,KAAK2I,UAAUrK,aACfiL,EACAlK,EAAKjN,MAAMiN,EAAK7d,SAAU+nB,EAAOvZ,GACjCA,IAvNN,EAiOSwZ,QAAP,SAAeC,GACb,IAAMpJ,GAAMoJ,EAAYzJ,KAAKqD,gBAAkB,GAC/CrD,KAAKqD,eAAiBoG,EACtBzJ,KAAK6C,cAAgB,IAAM,EAAIxhB,KAAKuD,IAAgB,KAAZ6kB,IACxCzJ,KAAK2I,UAAUxG,OAAOsH,EAAY,GAAIpoB,KAAKuQ,IAAI,GAAKyO,KArOxD,EAwOSqJ,WAAP,SAAkBrlB,EAAWC,EAAW6P,GACtC,IAAMwV,EAAUzJ,EAAKpe,WAClB,EAAIuC,EAAIglB,OAAOC,iBAAoBtJ,KAAK4C,GAAGqG,mBAAqB,EACjE,EAAK,EAAI3kB,EAAI+kB,OAAOC,iBAAoBtJ,KAAK4C,GAAGsG,oBAChD,EACA,GAEFhJ,EAAKhN,cAAcyW,EAASA,EAAS3J,KAAKoD,aAC1C,IAAMwG,EAAMvK,EAAKvd,WACf6nB,EAAQ,GAAKA,EAAQ,GAAK3J,KAAKlQ,IAAI,GACnC6Z,EAAQ,GAAKA,EAAQ,GAAK3J,KAAKlQ,IAAI,GACnC6Z,EAAQ,GAAKA,EAAQ,GAAK3J,KAAKlQ,IAAI,IAErCuP,EAAKlN,UAAUyX,EAAKA,GACpB5J,KAAK2I,UAAUjI,QAAQV,KAAKlQ,IAAK8Z,EAAKzV,IAtP1C,EAgQS0V,KAAP,WAEE,IAAMjH,EAAK5C,KAAK4C,GAChBA,EAAGkH,SAAS,EAAG,EAAGlH,EAAGqG,mBAAoBrG,EAAGsG,qBAC5CtG,EAAGmH,WAAW,EAAG,EAAG,EAAG,GACvBnH,EAAGoH,WAAW,GACdpH,EAAGqH,MAAMrH,EAAGsH,iBAAmBtH,EAAGuH,kBAGlCnK,KAAKgJ,eAGLpG,EAAGwH,QAAQxH,EAAGyH,OACdzH,EAAG0H,OAAO1H,EAAG2H,YACb3H,EAAG4H,WAAU,GACb5H,EAAG0H,OAAO1H,EAAG6H,WACb7H,EAAG8H,WAAW1K,KAAKyF,WAEnBzF,KAAK4I,gBACLhG,EAAG+H,iBAAiB3K,KAAKiG,WAAW,EAAOjG,KAAKmD,UAChDP,EAAGgI,UAAU5K,KAAKkG,MAAOlG,KAAK6C,eAC9BD,EAAGiI,WAAW7K,KAAKmG,KAAMnG,KAAKlQ,KAC9B8S,EAAGiI,WAAW7K,KAAKoG,gBAAiBpG,KAAKsD,gBACzCV,EAAGiI,WAAW7K,KAAKqG,kBAAmBrG,KAAKuD,kBAC3CX,EAAGiI,WAAW7K,KAAKsG,kBAAmBtG,KAAKwD,kBAC3CZ,EAAGiI,WAAW7K,KAAKuG,gBAAiBvG,KAAKyD,gBACzCb,EAAGiI,WAAW7K,KAAKwG,gBAAiBxG,KAAK0D,gBACzCd,EAAGiI,WAAW7K,KAAKyG,UAAWzG,KAAK2D,UAInC,IAFA,IAAMvF,EAAQ4B,KAAK8H,SACbgD,EAAS9K,KAAK2I,UAAUtK,cACrBrV,EAAI,EAAGA,EAAIoV,EAAMlV,SAAUF,EAAG,OACdoV,EAAMpV,GAArBge,EAD6B,EAC7BA,MAAOY,EADsB,EACtBA,IACfhF,EAAG+H,iBAAiB3K,KAAK+F,UAAU,EAAO+E,EAAO9hB,IACjD4Z,EAAGmI,aAAanI,EAAGoI,UAAWpD,EAAMZ,EAAOpE,EAAGqI,eAAgB,EAAIjE,KAlSxE,KCCMkE,GAAY,SAACC,GAKjB,IAJA,IAAIC,EAAKD,EAAIla,OACT5M,EAAI,EACJC,EAAI,EAED8mB,IAAOC,MAAMD,EAAGE,cAAgBD,MAAMD,EAAGG,YAC9ClnB,GAAK+mB,EAAGE,WAAaF,EAAGI,WACxBlnB,GAAK8mB,EAAGG,UAAYH,EAAGK,UACvBL,EAAKA,EAAGM,aAKV,MAAO,CAAErnB,EAHTA,EAAI8mB,EAAIQ,QAAUtnB,EAAIglB,OAAOuC,QAGdtnB,EAFfA,EAAI6mB,EAAIU,QAAUvnB,EAAI+kB,OAAOyC,UAwB/B,SAASC,GAAMC,EAAepa,EAAa7I,GACzC,OAAO1H,KAAKuQ,IAAIvQ,KAAK0H,IAAIijB,EAAOpa,GAAM7I,GAGjC,IAAMkjB,GAAb,YAuDE,WAAYC,GAAkC,aAC5C,cAAMA,IAAN,MANMC,UAAmC,KAKG,EAJtCC,eAAwC,KAIF,EAHtCC,qBAAoD,KAGd,EAFtCC,IAAc,EAEwB,EAoBtCC,MAAQ,SAAC9C,GAEf,GADWwC,EAAqBrJ,GAChC,CAGA,IAAM4J,EAAWP,EAAqBO,SAClCA,IACFA,EAAShD,QAAQC,GACjB+C,EAAS3C,QAEX,EAAKyC,IAAMG,sBAAsB,EAAKF,SA9BM,EAiCtCG,WAAa,WAAM,MACnBP,EAAY,EAAKA,UACjBQ,EAASV,EAAqBU,OACpC,GAAKR,GAAcQ,EAAnB,CAGIA,EAAOC,YACTD,EAAOC,WAAWC,YAAYF,GAEhC,IAAMG,EAASX,EAAUY,wBACzBJ,EAAO1lB,MAAQ5F,KAAKqQ,KAAKob,EAAO7lB,MAAQoiB,OAAOC,kBAC/CqD,EAAOzlB,OAAS7F,KAAKqQ,KAAKob,EAAO5lB,OAASmiB,OAAOC,kBACjD6C,EAAUa,YAAYL,GACtBV,SAAA,UAAAA,EAAsBO,gBAAtB,SAAgC3C,SA9CY,EAiDtCoD,iBAAmB,SAACC,GAC1B,IAAMC,EAAID,EAAQ,GACb,EAAKf,WAAcgB,GAOpBA,EAAEC,eACC,EAAKd,MACR,EAAKA,IAAMG,sBAAsB,EAAKF,QARpC,EAAKD,MACPe,qBAAqB,EAAKf,KAC1B,EAAKA,IAAM,IAtD6B,EAoEtCgB,SAAWC,EAAKzrB,WAAW,EAAG,GApEQ,EAqEtC0rB,iBAAmB,SAACnpB,EAAWC,GAChC2nB,EAAqBO,WAG1B,EAAKc,SAAS,GAAKjpB,EACnB,EAAKipB,SAAS,GAAKhpB,EACnB2nB,EAAqBO,SAAS9C,WAAWrlB,EAAGC,EAAG,KAC/CmpB,SAASC,KAAKC,iBAAiB,YAAa,EAAKC,iBAAkB,CACjEC,SAAS,IAEXJ,SAASC,KAAKC,iBAAiB,YAAa,EAAKG,iBAAkB,CACjED,SAAS,IAEXJ,SAASC,KAAKC,iBAAiB,UAAW,EAAKI,gBAC/CN,SAASC,KAAKC,iBAAiB,WAAY,EAAKI,kBAnFJ,EAsFtCC,eAAiB,EAtFqB,EAmGtCF,iBAAmB,SAACG,GAC1B,IAAMzB,EAAWP,EAAqBO,SACtC,GAAKA,IAGLyB,EAAGC,iBACuB,IAAtBD,EAAGE,QAAQjlB,QAAf,CAEO,GAAI+kB,EAAGE,QAAQjlB,OAAS,GAAK,EAAKgjB,MAAMkC,WAAY,CACzD,IAAM3Z,EAAOpT,KAAKgG,MAChB4mB,EAAGE,QAAQ,GAAGE,MAAQJ,EAAGE,QAAQ,GAAGE,MACpCJ,EAAGE,QAAQ,GAAGG,MAAQL,EAAGE,QAAQ,GAAGG,OAEhCC,EAAK,EAAKP,eAAiBvZ,EAOjC,OANA,EAAKuZ,eAAiBvZ,OACtB+X,EAASjL,SAAWwK,GAClBS,EAASjL,SAAgB,GAALgN,EApNP,IACA,MA0NjB,IAAMC,EAAQP,EAAGE,QAAQ,GACnBrZ,EAASoW,GAAUsD,GACzB,EAAKC,YAAYD,EAAME,SAAU5Z,aAAhB,EAAgBA,EAAQzQ,IAAKmqB,EAAM7C,QAAS6C,EAAMG,SAAU7Z,aAAhB,EAAgBA,EAAQxQ,IAAKkqB,EAAM3C,WA5HpD,EA+HtC+B,iBAAmB,SAACK,GAE1B,GADiBhC,EAAqBO,SACtC,CAGAyB,EAAGC,iBACH,IAAMpZ,EAASoW,GAAU+C,GACzB,EAAKQ,YAAYR,EAAGS,SAAU5Z,aAAb,EAAaA,EAAQzQ,IAAK4pB,EAAGtC,QAASsC,EAAGU,SAAU7Z,aAAb,EAAaA,EAAQxQ,IAAK2pB,EAAGpC,WAtIxC,EAyItCkC,eAAiB,WACvBN,SAASC,KAAKkB,oBAAoB,YAAa,EAAKhB,kBACpDH,SAASC,KAAKkB,oBAAoB,YAAa,EAAKd,kBACpDL,SAASC,KAAKkB,oBAAoB,UAAW,EAAKb,gBAClDN,SAASC,KAAKkB,oBAAoB,WAAY,EAAKb,iBA7IP,EAgJtCc,kBAAoB,SAACZ,GAE3B,GADiBhC,EAAqBO,SACtC,CAGAyB,EAAGC,iBACH,IAAMM,EAAQP,EAAGE,QAAQ,GACzB,GAAKK,EAGL,GAA0B,IAAtBP,EAAGE,QAAQjlB,OAAc,CAC3B,IAAM4L,EAASoW,GAAUsD,GACzB,EAAKhB,iBAAiBgB,EAAME,SAAU5Z,aAAhB,EAAgBA,EAAQzQ,IAAKmqB,EAAM7C,QAAS6C,EAAMG,SAAU7Z,aAAhB,EAAgBA,EAAQxQ,IAAKkqB,EAAM3C,cAErG,EAAKmC,eAAiB3sB,KAAKgG,MACzB4mB,EAAGE,QAAQ,GAAGE,MAAQJ,EAAGE,QAAQ,GAAGE,MACpCJ,EAAGE,QAAQ,GAAGG,MAAQL,EAAGE,QAAQ,GAAGG,SAhKI,EAqKtCQ,aAAe,SAACb,GACtB,IAAMzB,EAAWP,EAAqBO,SACtC,GAAKA,GAGD,EAAKN,MAAMkC,WAAY,CACzBH,EAAGc,kBACHd,EAAGC,iBAFsB,IAGjBc,EAAWf,EAAXe,OACRxC,EAASjL,SAAWwK,GAClBS,EAASjL,SAAoB,GAATyN,EAhRP,IACA,OAkGjB/C,EAAqBgD,YAFuB,EAvDhD,mBASgBA,UAAd,WACE,IAAIjP,KAAK4C,KAAM5C,KAAKkP,SAApB,CAIA,IAAMvC,EAASc,SAAS0B,cAAc,UACtCxC,EAAO1lB,MAAQ0lB,EAAOzlB,OAAS,IAC/BkoB,OAAOC,OAAO1C,EAAO2C,MAAO,CAC1B3hB,KAAM,EACNG,IAAK,EACL7G,MAAO,OACPC,OAAQ,OACRqoB,OAAQ,EACRC,QAAS,EACT,iBAAkB,OAClBC,SAAU,aAGZ,IACEzP,KAAK4C,GAAK+J,EAAO+C,WAAW,QAAS,CACnCC,oBAAoB,EACpBC,OAAO,EACPC,WAAW,IAEb,MAAOC,GAEP,MADA9P,KAAKkP,UAAW,EACVY,EAER,IAAMlN,EAAK5C,KAAK4C,GAChB,IAAKA,EAEH,MADA5C,KAAKkP,UAAW,EACV,IAAI/K,MAAM,+BAGlBnE,KAAK2M,OAASA,EAGd3M,KAAKwM,SAAW,IAAI7J,GAAYC,KA9CpC,2BA4DSmN,qBAAP,WACE,GAAI/P,KAAKmM,UAAW,CAClBnM,KAAK+N,iBACL/N,KAAKmM,UAAUyC,oBAAoB,aAAc5O,KAAK6O,mBACtD7O,KAAKmM,UAAUyC,oBAAoB,QAAS5O,KAAK8O,cACjD,IAAMnC,EAASV,EAAqBU,OAChCA,GAAUA,EAAOC,YACnBD,EAAOC,WAAWC,YAAYF,GAG9B3M,KAAKsM,KACPe,qBAAqBrN,KAAKsM,MAvEhC,EA+IUmC,YAAR,SAAoBuB,EAAcC,GAEhC,GADiBhE,EAAqBO,SACtC,CAGAP,EAAqBO,SAAS9C,WAAWsG,EAAMC,EAAM,IALP,IAMtC3C,EAAatN,KAAbsN,SACRA,EAAS,GAAK0C,EACd1C,EAAS,GAAK2C,IAvJlB,EA6OSC,OAAP,WAAgB,WACd,IAAKjE,EAAqBrJ,GACxB,OAAO5C,KAAKkM,MAAMiE,aAEpB,GAAIlE,EAAqBO,SAAU,CACjC,IAAMA,EAAWP,EAAqBO,SAEtCA,EAASzJ,IAAM/C,KAAKkM,MAAMnJ,IAC1ByJ,EAAS1J,MAAQ9C,KAAKkM,MAAMpJ,MAC5B0J,EAASjL,SAAWvB,KAAKkM,MAAM3K,SAC/BlC,EAAKlN,UAAUqa,EAASlJ,eAAgBtD,KAAKkM,MAAM5I,gBACnDjE,EAAKxd,KAAK2qB,EAASjJ,iBAAkBvD,KAAKkM,MAAM3I,kBAChDlE,EAAKxd,KAAK2qB,EAAShJ,iBAAkBxD,KAAKkM,MAAM1I,kBAChDnE,EAAKxd,KAAK2qB,EAAS/I,eAAgBzD,KAAKkM,MAAMzI,gBAC9CpE,EAAKxd,KAAK2qB,EAAS9I,eAAgB1D,KAAKkM,MAAMxI,gBAC9CrE,EAAKxd,KAAK2qB,EAAS7I,SAAU3D,KAAKkM,MAAMvI,UAEpC3D,KAAKkM,MAAMkE,WACb5D,EAASrD,UAAUnJ,KAAKkM,MAAMkE,UAAU,GAAIpQ,KAAKkM,MAAMkE,UAAU,IAGrE,IAAMziB,EAAOqS,KAAKkM,MAAMve,KAExB,OACE,uBACE2hB,MAAO,CACLe,OAAQ,OACRZ,SAAU,WACVxoB,MAAO,OACPC,OAAQ,OACRsoB,QAAS,EACTD,OAAQ,EACRzhB,IAAK,EACLH,KAAMA,GAER2iB,YAAa,SAACrC,GACZ,GAAIhC,EAAqBO,SAAU,CACjC,IAAM1X,EAASoW,GAAU+C,GACzB,EAAKT,iBAAiBS,EAAGS,SAAU5Z,aAAb,EAAaA,EAAQzQ,IAAK4pB,EAAGtC,QAASsC,EAAGU,SAAU7Z,aAAb,EAAaA,EAAQxQ,IAAK2pB,EAAGpC,WAG7F0E,YAAa,SAACtC,GACZ,GAAI,EAAK/B,MAAMsE,aAAevE,EAAqBO,SAAU,CAC3D,IAAM1X,EAASoW,GAAU+C,GACzBhC,EAAqBO,SAASrD,UAAU8E,EAAGS,SAAU5Z,aAAb,EAAaA,EAAQzQ,IAAK4pB,EAAGtC,QAASsC,EAAGU,SAAU7Z,aAAb,EAAaA,EAAQxQ,IAAK2pB,EAAGpC,WAG/G4E,IAAK,SAACtE,GACA,EAAKC,iBACP,EAAKA,eAAesE,aACpB,EAAKtE,eAAiB,MAEpB,EAAKC,uBACP,EAAKA,qBAAqBqE,aAC1B,EAAKrE,qBAAuB,MAEzBF,SAGmC,IAA7B9C,OAAM,gBACf,EAAK+C,eAAiB,IAAIuE,eAAe,EAAKjE,YAC9C,EAAKN,eAAewE,QAAQzE,IAE5B,EAAKO,kBAGuC,IAAnCrD,OAAM,sBACf,EAAKgD,qBAAuB,IAAIwE,qBAC9B,EAAK5D,kBAEP,EAAKZ,qBAAqBuE,QAAQzE,IAElC,EAAKc,iBAAiB,CACpB,CACEG,gBAAgB,KAIjB,EAAKjB,YACR,EAAKA,UAAYA,EACjBA,EAAUwB,iBAAiB,aAAc,EAAKkB,kBAAmB,CAC/DhB,SAAS,IAEP,EAAK3B,MAAMkC,YACbjC,EAAUwB,iBAAiB,QAAS,EAAKmB,aAAc,CACrDjB,SAAS,IAGb,EAAKnB,mBArUjB,GAA0CoE,aAA7B7E,GAKGU,OAAmC,KALtCV,GAMGrJ,GAAmC,KANtCqJ,GAOGiD,UAAoB,EAPvBjD,GAQGO,SAA+B,K,iBCCzCuE,IADSC,wBApDM,SAAA9E,GAAU,IAAD,EACU4E,UAAMG,UAAS,GAA9CC,EADqB,KACRC,EADQ,OAEJL,UAAMG,SAAS,IAAhCtjB,EAFqB,KAEfyjB,EAFe,OAGIN,UAAMG,SAAS,MAAxC1P,EAHqB,KAGX8P,EAHW,KAItBC,EAAyB,WACzBjI,OAAOkI,WAAa,KACtBH,EAAQ,GACRC,EAAgC,IAApBhI,OAAOkI,aACVlI,OAAOkI,WAAa,KAC7BH,EAAQ,GACRC,EAAYhI,OAAOkI,aAEflI,OAAOkI,WAAa,KACtBF,EAAYhI,OAAOkI,WAAa,KAEhCF,EAAY,OAclB,OATAP,UAAMU,WAAU,WAId,OAHAF,IACAjI,OAAOsE,iBAAiB,SAAU2D,GAClCH,GAAe,GACR,WACL9H,OAAOuF,oBAAoB,SAAU0C,MAEtC,CAAC3jB,EAAM4T,IAGR,wBAACwP,GAAD,CAASU,GAAG,sBACTP,GACC,wBAAC,GAAD,CACEvjB,KAAMA,EACNoV,IAAK,EACLD,MAAOzhB,KAAKE,GAAK,EACjBggB,SAAUA,EACV+B,eAAgB,CAAC,GAAK,GAAK,IAC3BE,iBAAkB,CAAC,EAAG,EAAG,GACzBD,iBAAkB,CAAC,EAAG,EAAG,GACzBI,SAAU,CAAC,GAAK,GAAK,IACrBF,eAAgB,CAAC,EAAG,GAAK,GACzBC,eAAgB,CAAC,GAAK,GAAK,GAC3ByM,aAAc,6DACd/B,YAAY,EACZoC,aAAa,QAQPkB,KAAOld,IAAV,wEAAGkd,CAAH,6HAIU,qBAAEC,MAAiBC,OAAOC,Y,qBC5DjD,IAAIC,EAAI,EAAQ,QAEZC,EAAS1wB,KAAKgG,MACdyB,EAAMzH,KAAKyH,IACXK,EAAO9H,KAAK8H,KAQhB2oB,EAAE,CAAE7gB,OAAQ,OAAQ+gB,MAAM,EAAMC,SAJlBF,GAAUA,EAAOtjB,IAAUyjB,OAASzjB,KAID,CAC/CpH,MAAO,SAAe8qB,EAAQC,GAM5B,IALA,IAIInd,EAAKT,EAJL6d,EAAM,EACNrpB,EAAI,EACJspB,EAAOrpB,UAAUC,OACjBqpB,EAAO,EAEJvpB,EAAIspB,GAELC,GADJtd,EAAMnM,EAAIG,UAAUD,QAGlBqpB,EAAMA,GADN7d,EAAM+d,EAAOtd,GACKT,EAAM,EACxB+d,EAAOtd,GAGPod,GAFSpd,EAAM,GACfT,EAAMS,EAAMsd,GACC/d,EACDS,EAEhB,OAAOsd,IAAS9jB,IAAWA,IAAW8jB,EAAOppB,EAAKkpB","file":"14-09b8e21b8b8ac515f6e7.js","sourcesContent":["import \"core-js/modules/es.math.hypot.js\";\n\n/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import \"core-js/modules/es.math.hypot.js\";\nimport * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import \"core-js/modules/es.math.hypot.js\";\nimport * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import \"core-js/modules/es.math.hypot.js\";\nimport * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import \"core-js/modules/es.math.hypot.js\";\nimport * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import \"core-js/modules/es.math.hypot.js\";\nimport * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n Copyright (c) 2022 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n// these #__PURE__ comments help uglifyjs with dead code removal\n// \nvar F2 = /*#__PURE__*/0.5 * (Math.sqrt(3.0) - 1.0);\nvar G2 = /*#__PURE__*/(3.0 - Math.sqrt(3.0)) / 6.0;\nvar F3 = 1.0 / 3.0;\nvar G3 = 1.0 / 6.0;\nvar F4 = /*#__PURE__*/(Math.sqrt(5.0) - 1.0) / 4.0;\nvar G4 = /*#__PURE__*/(5.0 - Math.sqrt(5.0)) / 20.0; // I'm really not sure why this | 0 (basically a coercion to int)\n// is making this faster but I get ~5 million ops/sec more on the\n// benchmarks across the board or a ~10% speedup.\n\nvar fastFloor = function fastFloor(x) {\n  return Math.floor(x) | 0;\n};\n\nvar grad2 = /*#__PURE__*/new Float64Array([1, 1, -1, 1, 1, -1, -1, -1, 1, 0, -1, 0, 1, 0, -1, 0, 0, 1, 0, -1, 0, 1, 0, -1]); // double seems to be faster than single or int's\n// probably because most operations are in double precision\n\nvar grad3 = /*#__PURE__*/new Float64Array([1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0, 1, 0, 1, -1, 0, 1, 1, 0, -1, -1, 0, -1, 0, 1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1]); // double is a bit quicker here as well\n\nvar grad4 = /*#__PURE__*/new Float64Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1, -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1, 1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1, -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]);\n/**\n * Creates a 2D noise function\n * @param random the random function that will be used to build the permutation table\n * @returns {NoiseFunction2D}\n */\n\nexport function createNoise2D() {\n  var random = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Math.random;\n  var perm = buildPermutationTable(random); // precalculating this yields a little ~3% performance improvement.\n\n  var permGrad2x = new Float64Array(perm).map(function (v) {\n    return grad2[v % 12 * 2];\n  });\n  var permGrad2y = new Float64Array(perm).map(function (v) {\n    return grad2[v % 12 * 2 + 1];\n  });\n  return function noise2D(x, y) {\n    // if(!isFinite(x) || !isFinite(y)) return 0;\n    var n0 = 0; // Noise contributions from the three corners\n\n    var n1 = 0;\n    var n2 = 0; // Skew the input space to determine which simplex cell we're in\n\n    var s = (x + y) * F2; // Hairy factor for 2D\n\n    var i = fastFloor(x + s);\n    var j = fastFloor(y + s);\n    var t = (i + j) * G2;\n    var X0 = i - t; // Unskew the cell origin back to (x,y) space\n\n    var Y0 = j - t;\n    var x0 = x - X0; // The x,y distances from the cell origin\n\n    var y0 = y - Y0; // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n    if (x0 > y0) {\n      i1 = 1;\n      j1 = 0;\n    } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n    else {\n        i1 = 0;\n        j1 = 1;\n      } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n\n\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n    var y2 = y0 - 1.0 + 2.0 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n    var ii = i & 255;\n    var jj = j & 255; // Calculate the contribution from the three corners\n\n    var t0 = 0.5 - x0 * x0 - y0 * y0;\n\n    if (t0 >= 0) {\n      var gi0 = ii + perm[jj];\n      var g0x = permGrad2x[gi0];\n      var g0y = permGrad2y[gi0];\n      t0 *= t0; // n0 = t0 * t0 * (grad2[gi0] * x0 + grad2[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n\n      n0 = t0 * t0 * (g0x * x0 + g0y * y0);\n    }\n\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\n\n    if (t1 >= 0) {\n      var gi1 = ii + i1 + perm[jj + j1];\n      var g1x = permGrad2x[gi1];\n      var g1y = permGrad2y[gi1];\n      t1 *= t1; // n1 = t1 * t1 * (grad2[gi1] * x1 + grad2[gi1 + 1] * y1);\n\n      n1 = t1 * t1 * (g1x * x1 + g1y * y1);\n    }\n\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\n\n    if (t2 >= 0) {\n      var gi2 = ii + 1 + perm[jj + 1];\n      var g2x = permGrad2x[gi2];\n      var g2y = permGrad2y[gi2];\n      t2 *= t2; // n2 = t2 * t2 * (grad2[gi2] * x2 + grad2[gi2 + 1] * y2);\n\n      n2 = t2 * t2 * (g2x * x2 + g2y * y2);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n\n\n    return 70.0 * (n0 + n1 + n2);\n  };\n}\n/**\n * Creates a 3D noise function\n * @param random the random function that will be used to build the permutation table\n * @returns {NoiseFunction3D}\n */\n\nexport function createNoise3D() {\n  var random = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Math.random;\n  var perm = buildPermutationTable(random); // precalculating these seems to yield a speedup of over 15%\n\n  var permGrad3x = new Float64Array(perm).map(function (v) {\n    return grad3[v % 12 * 3];\n  });\n  var permGrad3y = new Float64Array(perm).map(function (v) {\n    return grad3[v % 12 * 3 + 1];\n  });\n  var permGrad3z = new Float64Array(perm).map(function (v) {\n    return grad3[v % 12 * 3 + 2];\n  });\n  return function noise3D(x, y, z) {\n    var n0, n1, n2, n3; // Noise contributions from the four corners\n    // Skew the input space to determine which simplex cell we're in\n\n    var s = (x + y + z) * F3; // Very nice and simple skew factor for 3D\n\n    var i = fastFloor(x + s);\n    var j = fastFloor(y + s);\n    var k = fastFloor(z + s);\n    var t = (i + j + k) * G3;\n    var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\n    var Y0 = j - t;\n    var Z0 = k - t;\n    var x0 = x - X0; // The x,y,z distances from the cell origin\n\n    var y0 = y - Y0;\n    var z0 = z - Z0; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n\n    var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n    var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } // X Y Z order\n      else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // X Z Y order\n        else {\n            i1 = 0;\n            j1 = 0;\n            k1 = 1;\n            i2 = 1;\n            j2 = 0;\n            k2 = 1;\n          } // Z X Y order\n\n    } else {\n      // x0<y0\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } // Z Y X order\n      else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Y Z X order\n        else {\n            i1 = 0;\n            j1 = 1;\n            k1 = 0;\n            i2 = 1;\n            j2 = 1;\n            k2 = 0;\n          } // Y X Z order\n\n    } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n\n\n    var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n    var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\n    var y2 = y0 - j2 + 2.0 * G3;\n    var z2 = z0 - k2 + 2.0 * G3;\n    var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\n    var y3 = y0 - 1.0 + 3.0 * G3;\n    var z3 = z0 - 1.0 + 3.0 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n    var ii = i & 255;\n    var jj = j & 255;\n    var kk = k & 255; // Calculate the contribution from the four corners\n\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n    if (t0 < 0) n0 = 0.0;else {\n      var gi0 = ii + perm[jj + perm[kk]];\n      t0 *= t0;\n      n0 = t0 * t0 * (permGrad3x[gi0] * x0 + permGrad3y[gi0] * y0 + permGrad3z[gi0] * z0);\n    }\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n    if (t1 < 0) n1 = 0.0;else {\n      var gi1 = ii + i1 + perm[jj + j1 + perm[kk + k1]];\n      t1 *= t1;\n      n1 = t1 * t1 * (permGrad3x[gi1] * x1 + permGrad3y[gi1] * y1 + permGrad3z[gi1] * z1);\n    }\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n    if (t2 < 0) n2 = 0.0;else {\n      var gi2 = ii + i2 + perm[jj + j2 + perm[kk + k2]];\n      t2 *= t2;\n      n2 = t2 * t2 * (permGrad3x[gi2] * x2 + permGrad3y[gi2] * y2 + permGrad3z[gi2] * z2);\n    }\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n    if (t3 < 0) n3 = 0.0;else {\n      var gi3 = ii + 1 + perm[jj + 1 + perm[kk + 1]];\n      t3 *= t3;\n      n3 = t3 * t3 * (permGrad3x[gi3] * x3 + permGrad3y[gi3] * y3 + permGrad3z[gi3] * z3);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to stay just inside [-1,1]\n\n    return 32.0 * (n0 + n1 + n2 + n3);\n  };\n}\n/**\n * Creates a 4D noise function\n * @param random the random function that will be used to build the permutation table\n * @returns {NoiseFunction3D}\n */\n\nexport function createNoise4D() {\n  var random = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Math.random;\n  var perm = buildPermutationTable(random); // precalculating these leads to a ~10% speedup\n\n  var permGrad4x = new Float64Array(perm).map(function (v) {\n    return grad4[v % 32 * 4];\n  });\n  var permGrad4y = new Float64Array(perm).map(function (v) {\n    return grad4[v % 32 * 4 + 1];\n  });\n  var permGrad4z = new Float64Array(perm).map(function (v) {\n    return grad4[v % 32 * 4 + 2];\n  });\n  var permGrad4w = new Float64Array(perm).map(function (v) {\n    return grad4[v % 32 * 4 + 3];\n  });\n  return function noise4D(x, y, z, w) {\n    var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n    // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\n    var s = (x + y + z + w) * F4; // Factor for 4D skewing\n\n    var i = fastFloor(x + s);\n    var j = fastFloor(y + s);\n    var k = fastFloor(z + s);\n    var l = fastFloor(w + s);\n    var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n\n    var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\n    var Y0 = j - t;\n    var Z0 = k - t;\n    var W0 = l - t;\n    var x0 = x - X0; // The x,y,z,w distances from the cell origin\n\n    var y0 = y - Y0;\n    var z0 = z - Z0;\n    var w0 = w - W0; // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n    // To find out which of the 24 possible simplices we're in, we need to\n    // determine the magnitude ordering of x0, y0, z0 and w0.\n    // Six pair-wise comparisons are performed between each possible pair\n    // of the four coordinates, and the results are used to rank the numbers.\n\n    var rankx = 0;\n    var ranky = 0;\n    var rankz = 0;\n    var rankw = 0;\n    if (x0 > y0) rankx++;else ranky++;\n    if (x0 > z0) rankx++;else rankz++;\n    if (x0 > w0) rankx++;else rankw++;\n    if (y0 > z0) ranky++;else rankz++;\n    if (y0 > w0) ranky++;else rankw++;\n    if (z0 > w0) rankz++;else rankw++; // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n    // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n    // impossible. Only the 24 indices which have non-zero entries make any sense.\n    // We use a thresholding to set the coordinates in turn from the largest magnitude.\n    // Rank 3 denotes the largest coordinate.\n    // Rank 2 denotes the second largest coordinate.\n    // Rank 1 denotes the second smallest coordinate.\n    // The integer offsets for the second simplex corner\n\n    var i1 = rankx >= 3 ? 1 : 0;\n    var j1 = ranky >= 3 ? 1 : 0;\n    var k1 = rankz >= 3 ? 1 : 0;\n    var l1 = rankw >= 3 ? 1 : 0; // The integer offsets for the third simplex corner\n\n    var i2 = rankx >= 2 ? 1 : 0;\n    var j2 = ranky >= 2 ? 1 : 0;\n    var k2 = rankz >= 2 ? 1 : 0;\n    var l2 = rankw >= 2 ? 1 : 0; // The integer offsets for the fourth simplex corner\n\n    var i3 = rankx >= 1 ? 1 : 0;\n    var j3 = ranky >= 1 ? 1 : 0;\n    var k3 = rankz >= 1 ? 1 : 0;\n    var l3 = rankw >= 1 ? 1 : 0; // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n\n    var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\n    var y1 = y0 - j1 + G4;\n    var z1 = z0 - k1 + G4;\n    var w1 = w0 - l1 + G4;\n    var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\n    var y2 = y0 - j2 + 2.0 * G4;\n    var z2 = z0 - k2 + 2.0 * G4;\n    var w2 = w0 - l2 + 2.0 * G4;\n    var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\n    var y3 = y0 - j3 + 3.0 * G4;\n    var z3 = z0 - k3 + 3.0 * G4;\n    var w3 = w0 - l3 + 3.0 * G4;\n    var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\n    var y4 = y0 - 1.0 + 4.0 * G4;\n    var z4 = z0 - 1.0 + 4.0 * G4;\n    var w4 = w0 - 1.0 + 4.0 * G4; // Work out the hashed gradient indices of the five simplex corners\n\n    var ii = i & 255;\n    var jj = j & 255;\n    var kk = k & 255;\n    var ll = l & 255; // Calculate the contribution from the five corners\n\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n    if (t0 < 0) n0 = 0.0;else {\n      var gi0 = ii + perm[jj + perm[kk + perm[ll]]];\n      t0 *= t0;\n      n0 = t0 * t0 * (permGrad4x[gi0] * x0 + permGrad4y[gi0] * y0 + permGrad4z[gi0] * z0 + permGrad4w[gi0] * w0);\n    }\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n    if (t1 < 0) n1 = 0.0;else {\n      var gi1 = ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]];\n      t1 *= t1;\n      n1 = t1 * t1 * (permGrad4x[gi1] * x1 + permGrad4y[gi1] * y1 + permGrad4z[gi1] * z1 + permGrad4w[gi1] * w1);\n    }\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n    if (t2 < 0) n2 = 0.0;else {\n      var gi2 = ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]];\n      t2 *= t2;\n      n2 = t2 * t2 * (permGrad4x[gi2] * x2 + permGrad4y[gi2] * y2 + permGrad4z[gi2] * z2 + permGrad4w[gi2] * w2);\n    }\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n    if (t3 < 0) n3 = 0.0;else {\n      var gi3 = ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]];\n      t3 *= t3;\n      n3 = t3 * t3 * (permGrad4x[gi3] * x3 + permGrad4y[gi3] * y3 + permGrad4z[gi3] * z3 + permGrad4w[gi3] * w3);\n    }\n    var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n    if (t4 < 0) n4 = 0.0;else {\n      var gi4 = ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]];\n      t4 *= t4;\n      n4 = t4 * t4 * (permGrad4x[gi4] * x4 + permGrad4y[gi4] * y4 + permGrad4z[gi4] * z4 + permGrad4w[gi4] * w4);\n    } // Sum up and scale the result to cover the range [-1,1]\n\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n  };\n}\n/**\n * Builds a random permutation table.\n * This is exported only for (internal) testing purposes.\n * Do not rely on this export.\n * @private\n */\n\nexport function buildPermutationTable(random) {\n  var tableSize = 512;\n  var p = new Uint8Array(tableSize);\n\n  for (var i = 0; i < tableSize / 2; i++) {\n    p[i] = i;\n  }\n\n  for (var _i = 0; _i < tableSize / 2 - 1; _i++) {\n    var r = _i + ~~(random() * (256 - _i));\n    var aux = p[_i];\n    p[_i] = p[r];\n    p[r] = aux;\n  }\n\n  for (var _i2 = 256; _i2 < tableSize; _i2++) {\n    p[_i2] = p[_i2 - 256];\n  }\n\n  return p;\n}","import { FoxBox } from './fox-geometry'\nimport { mat4, vec3, quat, vec4, mat3 } from 'gl-matrix'\nimport { createNoise4D } from 'simplex-noise'\n\nconst noise = createNoise4D()\n\nconst K_POS_DAMPING = 0.8\nconst K_ROT_DAMPING = 0.4\n\nconst K_POS_RECOVER = 0.1\nconst K_ROT_RECOVER = 0.1\n\nconst NOISE_MAG = 4\nconst NOISE_SCALE = 0.008\nconst WAVE_FREQ = 0.012\n\nfunction allocBuffer(N: number, stride: number): any {\n  const buffer = new Float64Array(N * stride)\n  const result: Float64Array[] = []\n  for (let i = 0; i < buffer.length; i += stride) {\n    result.push(buffer.subarray(i, i + stride))\n  }\n  return result\n}\n\nexport class FoxAnimation {\n  public N: number\n  public boxTransforms: mat4[] = []\n\n  public animRotation: quat = quat.identity(quat.create())\n\n  // box parameters\n  public centers: vec3[] = []\n  public weights: vec4[] = []\n\n  // box physics stuff\n  public restPosition: number[] = []\n  public curPosition: vec3[] = []\n  public nextPosition: vec3[] = []\n  public velocity: vec3[] = []\n\n  public restRotation: number[] = []\n  public curRotation: quat[] = []\n  public nextRotation: quat[] = []\n  public angularVelocity: quat[] = []\n\n  constructor(boxes: FoxBox[]) {\n    const N = (this.N = boxes.length)\n\n    this.boxTransforms = allocBuffer(N, 16)\n    this.centers = allocBuffer(N, 3)\n    this.weights = allocBuffer(N, 4)\n    this.curPosition = allocBuffer(N, 3)\n    this.nextPosition = allocBuffer(N, 3)\n    this.velocity = allocBuffer(N, 3)\n\n    this.nextRotation = allocBuffer(N, 4)\n    this.curRotation = allocBuffer(N, 4)\n    this.angularVelocity = allocBuffer(N, 4)\n\n    for (let i = 0; i < boxes.length; ++i) {\n      mat4.identity(this.boxTransforms[i])\n\n      vec3.set(this.centers[i], boxes[i].cx, boxes[i].cy, boxes[i].cz)\n      vec4.set(\n        this.weights[i],\n        boxes[i].bx,\n        boxes[i].by,\n        boxes[i].bz,\n        boxes[i].bw\n      )\n\n      const P = vec3.scaleAndAdd(\n        vec3.create(),\n        this.centers[i],\n        this.weights[i] as vec3,\n        -150\n      )\n      P[1] += 40 * Math.random()\n      vec3.copy(this.curPosition[i], P)\n      vec3.copy(this.nextPosition[i], P)\n\n      quat.identity(this.curRotation[i])\n      quat.identity(this.nextRotation[i])\n\n      this.restPosition.push(-1)\n      this.restRotation.push(-1)\n    }\n  }\n\n  private _qTmp = quat.create()\n  public preintegrate(dt: number) {\n    for (let i = 0; i < this.curPosition.length; ++i) {\n      vec3.scaleAndAdd(\n        this.nextPosition[i],\n        this.curPosition[i],\n        this.velocity[i],\n        dt\n      )\n    }\n\n    for (let i = 0; i < this.curRotation.length; ++i) {\n      vec4.scaleAndAdd(\n        this.nextRotation[i],\n        this.curRotation[i],\n        this.angularVelocity[i],\n        dt\n      )\n      quat.normalize(this.nextRotation[i], this.nextRotation[i])\n    }\n  }\n\n  public postintegrate(dt: number) {\n    const VELOCITY_SCALE = Math.exp(-K_POS_DAMPING * dt) / dt\n    for (let i = 0; i < this.curPosition.length; ++i) {\n      vec3.subtract(this.velocity[i], this.nextPosition[i], this.curPosition[i])\n      vec3.scale(this.velocity[i], this.velocity[i], VELOCITY_SCALE)\n      vec3.copy(this.curPosition[i], this.nextPosition[i])\n    }\n\n    const ROTATION_SCALE = Math.exp(-K_ROT_DAMPING * dt) / dt\n    for (let i = 0; i < this.curRotation.length; ++i) {\n      vec4.subtract(\n        this.angularVelocity[i],\n        this.nextRotation[i],\n        this.curRotation[i]\n      )\n      vec4.scale(\n        this.angularVelocity[i],\n        this.angularVelocity[i],\n        ROTATION_SCALE\n      )\n      quat.copy(this.curRotation[i], this.nextRotation[i])\n    }\n  }\n\n  public updateTransforms() {\n    for (let i = 0; i < this.boxTransforms.length; ++i) {\n      mat4.fromRotationTranslation(\n        this.boxTransforms[i],\n        this.curRotation[i],\n        this.curPosition[i]\n      )\n    }\n  }\n\n  private _lastExplode: number = 1\n\n  private _displacement = vec3.create()\n  private _linePoint = vec3.create()\n  private _velocity = vec3.create()\n  private _angVelocity = vec3.create()\n  public explode(center: vec3, direction: vec3, mag: number) {\n    this._lastExplode = 1\n    const M = mat3.fromQuat(this._tmpMat, this.animRotation)\n    for (let i = 0; i < this.curPosition.length; ++i) {\n      // calculate closest point\n      const disp = vec3.subtract(\n        this._displacement,\n        this.curPosition[i],\n        center\n      )\n      const t = vec3.dot(disp, direction)\n      const P = vec3.scaleAndAdd(this._linePoint, center, direction, t)\n\n      const weight = this.weights[i]\n\n      // calculate ditance and force magnitude\n      const d = vec3.subtract(this._velocity, this.curPosition[i], P)\n      const scale = Math.min(10, (weight[3] * mag) / (1 + vec3.sqrLen(d)))\n      if (scale < 0.01 || vec3.squaredLength(this.velocity[i]) > 100) {\n        continue\n      }\n\n      this.restPosition[i] = this.restRotation[i] = -1\n\n      // update linear velocity\n      vec3.scaleAndAdd(this.velocity[i], this.velocity[i], d, scale)\n\n      const extForce = vec3.transformMat3(this._tmpPos, weight as vec3, M)\n      vec3.scaleAndAdd(\n        this.velocity[i],\n        this.velocity[i],\n        extForce,\n        -10 * scale\n      )\n\n      // update angular velocity\n      vec3.normalize(disp, disp)\n      vec3.cross(this._angVelocity, direction, weight as vec3)\n      vec3.scaleAndAdd(\n        this.angularVelocity[i] as vec3,\n        this.angularVelocity[i] as vec3,\n        this._angVelocity,\n        scale\n      )\n      // vec3.scaleAndAdd(this.angularVelocity[i] as vec3, this.angularVelocity[i] as vec3, weight as vec3, scale)\n    }\n  }\n\n  private _tmpPos = vec3.create()\n  private _tmpPos2 = vec3.create()\n  private _tmpMat = mat3.create()\n  private _tmpMat2 = mat3.create()\n  public applyPositionConstraints(dt: number) {\n    const R0 = this._prevAnimRotation\n    const R1 = this.animRotation\n    const M0 = mat3.fromQuat(this._tmpMat, R0)\n    const M1 = mat3.fromQuat(this._tmpMat2, R1)\n\n    const invDT = 1 / Math.max(0.01, dt)\n    const DR = invDT * vec4.distance(R0, R1)\n\n    const tpos = K_POS_RECOVER * dt\n    for (let i = 0; i < this.nextPosition.length; ++i) {\n      const C0 = vec3.transformMat3(this._tmpPos, this.centers[i], M0)\n      const C1 = vec3.transformMat3(this._tmpPos2, this.centers[i], M1)\n      const DC = vec3.distance(C0, C1)\n      vec3.lerp(\n        this.nextPosition[i],\n        this.nextPosition[i],\n        C1,\n        tpos *\n          Math.max(\n            0.25,\n            1 / (1 + 0.001 * vec3.sqrDist(C1, this.nextPosition[i]))\n          )\n      )\n      if (this.restPosition[i] < 0) {\n        this.restPosition[i] = Math.min(0, this.restPosition[i] + dt)\n      } else if (\n        this.restPosition[i] > 0 ||\n        (vec3.distance(this.nextPosition[i], C1) < 1.5 + DC &&\n          vec3.length(this.velocity[i]) < 0.01 + invDT * DC)\n      ) {\n        vec3.copy(this.nextPosition[i], C1)\n        vec3.copy(this.curPosition[i], C1)\n        vec3.set(this.velocity[i], 0, 0, 0)\n        this.restPosition[i] = 1\n      }\n    }\n\n    const trot = K_ROT_RECOVER * dt\n    for (let i = 0; i < this.curRotation.length; ++i) {\n      quat.lerp(this.nextRotation[i], this.nextRotation[i], R1, trot)\n      quat.normalize(this.nextRotation[i], this.nextRotation[i])\n      if (this.restRotation[i] < 0) {\n        this.restRotation[i] = Math.min(0, this.restRotation[i] + dt)\n      }\n      if (\n        this.restRotation[i] > 0 ||\n        (vec4.distance(this.nextRotation[i], R1) < 0.01 + DR &&\n          vec4.sqrLen(this.angularVelocity[i]) < 0.01 + invDT * DR)\n      ) {\n        quat.copy(this.nextRotation[i], R1)\n        quat.copy(this.curRotation[i], R1)\n        quat.set(this.angularVelocity[i], 0, 0, 0, 0)\n        this.restRotation[i] = 1\n      }\n    }\n  }\n\n  private _tmpRot = quat.create()\n\n  private applyWaveForce(t: number) {\n    const tx = 0.001 * t // 0.1 * t\n    const ty = 0 // 0.01 * t\n    const tz = 0 // 0.02 * t\n    const tw = 0.00001 * t // 0.5 * t\n    const S = NOISE_SCALE\n\n    const M = Math.cos(WAVE_FREQ * t)\n\n    const MR = mat3.fromQuat(this._tmpMat, this.animRotation)\n\n    for (let i = 0; i < this.curPosition.length; ++i) {\n      const [cx, cy, cz] = this.centers[i]\n      const n =\n        NOISE_MAG *\n        (M * noise(tx + S * cx, ty + S * cy, tz + S * cz, tw) -\n          this._lastExplode -\n          0.05)\n      if (n > 0) {\n        const rotDir = vec3.transformMat3(\n          this._tmpPos,\n          this.weights[i] as vec3,\n          MR\n        )\n        vec3.scaleAndAdd(this.velocity[i], this.velocity[i], rotDir, -n)\n\n        const omega = quat.mul(this._tmpRot, this.animRotation, this.weights[i])\n        vec4.scaleAndAdd(\n          this.angularVelocity[i],\n          this.angularVelocity[i],\n          omega,\n          0.0025 * n\n        )\n        this.restPosition[i] = -1\n        this.restRotation[i] = -1\n      }\n    }\n  }\n\n  private _prevAnimRotation = quat.identity(quat.create())\n\n  public update(t: number, dt: number) {\n    this._lastExplode = Math.max(0, this._lastExplode - 0.003 * dt)\n    this.applyWaveForce(t)\n    this.preintegrate(dt)\n    this.applyPositionConstraints(dt)\n    this.postintegrate(dt)\n    this.updateTransforms()\n    quat.copy(this._prevAnimRotation, this.animRotation)\n  }\n}\n","export const FOX_BOXES:{\n    diameter:number\n    lo: number[]\n    hi: number[]\n    gridLo: number[]\n    gridHi: number[]\n    boundary: number[][]\n    colors: number[][]\n    verts:number[][]\n    centers: number[][]\n    boxes: [number, number[][]][][]\n} = JSON.parse(\n'{\"diameter\":24,\"lo\":[-122.117996,-93.589897,-48.3596],\"hi\":[122.117996,116.560997,150.722],\"gridLo\":[-6,-4,-3],\"gridHi\":[6,5,7],\"boundary\":[[1,-1.0228501601261542e-8,-8.182801281009233e-8],[0.8504238128662109,0.5260981917381287,-1.4851688945327624e-7],[0.9753293991088867,0.22075463831424713,0],[0.9318280220031738,-0.029862413182854652,0.3616693913936615],[0.6086949110031128,0.1307537704706192,-0.7825560569763184],[0.7692264318466187,-0.4090452790260315,0.49088966846466064],[0.6057133674621582,-0.0806102603673935,-0.791589081287384],[0.928680419921875,-0.1129331886768341,0.35326868295669556],[0.5919687151908875,-0.10947707295417786,-0.7984910011291504],[0.958467423915863,0.28251686692237854,0.03904382511973381],[3.578383100943938e-8,0.00819921214133501,-0.9999663829803467],[0.9070162773132324,0.021739618852734566,0.42053404450416565],[0.1539635807275772,0.3540334701538086,-0.9224724769592285],[0.691635251045227,-0.3628727197647095,0.6244710087776184],[0.784731924533844,0.010816571302711964,-0.619740903377533],[0.8598924279212952,-0.5087252259254456,0.04223278537392616],[0.37431079149246216,6.907908556286202e-8,-0.9273033142089844],[0.1287173330783844,0.029887380078434944,0.991230845451355],[-0.020404832437634468,0.9970798492431641,-0.07358956336975098],[0.40505528450012207,0.24923235177993774,-0.8796666860580444],[0.17178530991077423,-0.08574546873569489,0.9813957214355469],[0.6653342843055725,0.039334554225206375,0.74550861120224],[0.46152201294898987,0.36289262771606445,-0.8095099925994873],[0.12342957407236099,-0.2401389181613922,0.9628595113754272],[0.559287965297699,0.345054030418396,-0.7537471055984497],[0.6184812784194946,0.058198366314172745,-0.7836413979530334],[0.7976707816123962,0.487419068813324,0.35516759753227234],[0.5121573805809021,0.09600565582513809,0.8535090684890747],[0.6188085079193115,-0.11088787019252777,-0.777675986289978],[0.6283224821090698,-0.13398867845535278,-0.7663275003433228],[0.8813585042953491,0.05751384049654007,0.4689342975616455],[0.8742813467979431,0.19956395030021667,0.4425000846385956],[0.9681146144866943,-0.024797307327389717,0.249277263879776],[0.47877171635627747,-0.4782499074935913,-0.7362436056137085],[0.8734856247901917,-0.059241488575935364,0.48323217034339905],[0.8539445400238037,-0.00919655803591013,0.5202827453613281],[0.18029572069644928,-0.03767537325620651,-0.9828906655311584],[0.842650830745697,-0.05346041917800903,0.5357999205589294],[0.7632421255111694,-0.08555842190980911,0.6404227018356323],[0.2080230414867401,0.5657850503921509,-0.7978807687759399],[-0.09287610650062561,0.43706464767456055,-0.8946220278739929],[0.4301705062389374,-0.6620780229568481,0.6136823296546936],[0.46222370862960815,-0.6380462050437927,0.6158297657966614],[0.021654121577739716,0.4250352680683136,-0.9049177169799805],[0.3062419593334198,-0.7296712398529053,0.6113883852958679],[0.16853012144565582,-0.9582940340042114,-0.23080337047576904],[-0.192888081073761,6.6745324822647945e-9,-0.9812207818031311],[-0.10028168559074402,0.5626676082611084,0.8205782771110535],[-0.3619228005409241,0.931859016418457,-0.025508828461170197],[-0.10588056594133377,0.8907723426818848,-0.44194334745407104],[0.18446508049964905,-0.055371034890413284,0.9812780618667603],[-0.27150487899780273,0.7506008744239807,0.6023980975151062],[0.37552425265312195,0.541515588760376,-0.752158522605896],[0.29006507992744446,0.47813302278518677,-0.8290060758590698],[0.6695849299430847,0.5103926062583923,0.539588212966919],[0.7860305309295654,0.4910293221473694,0.3755612075328827],[0.40285488963127136,-0.009069381281733513,0.9152189493179321],[0.48654937744140625,0.5294649600982666,-0.6949363350868225],[0.3734573721885681,0.34247031807899475,-0.8621158003807068],[0.615329384803772,0.45650190114974976,0.6426318883895874],[0.686672568321228,0.49250203371047974,0.5347172617912292],[0.7976697087287903,0.4874206483364105,0.35516777634620667],[0.7944169044494629,0.47826308012008667,0.3743877708911896],[0.6283327341079712,-0.13398811221122742,-0.766319215297699],[0.43592602014541626,-0.1162395179271698,-0.8924443125724792],[0.6849081516265869,0.04826570302248001,0.7270290851593018],[0.7501806020736694,0.10661425441503525,0.6525813937187195],[0.7976812124252319,0.48740747570991516,0.3551599681377411],[0.2148367464542389,-0.8510902523994446,-0.47905173897743225],[0.2119349241256714,-0.820659875869751,-0.53066086769104],[0.32612982392311096,-0.451395720243454,-0.8305909037590027],[0.6815271377563477,-0.09007009118795395,0.7262287139892578],[0.7267503142356873,-0.09161580353975296,0.6807646155357361],[0,0,0],[0.4296804368495941,-0.13970164954662323,-0.8921088576316833],[0.16000711917877197,-0.8071871995925903,-0.5681958794593811],[0.6737505793571472,-0.15837571024894714,0.7217875719070435],[0.6821427941322327,-0.2986332178115845,0.6674574017524719],[0.3366634249687195,-0.7477033734321594,0.5723612308502197],[0.3897724151611328,0.3912390470504761,-0.833672285079956],[0.24118272960186005,0.31700995564460754,-0.917243480682373],[0.6438280940055847,-0.7000151872634888,0.30897262692451477],[0.37137049436569214,-0.7565067410469055,0.5383135676383972],[0.28994810581207275,-0.7387804985046387,0.6083859801292419],[-0.029022594913840294,0.21302327513694763,-0.9766159653663635],[0.10623830556869507,-0.9039110541343689,0.4143165647983551],[-0.5242925882339478,-0.691795289516449,-0.49652451276779175],[0.045820824801921844,0.727557897567749,0.6845144033432007],[0.2860824465751648,0.7249541282653809,0.6265767216682434],[-0.07101839780807495,0.9968384504318237,0.03562932834029198],[0.15933385491371155,0.9871649742126465,-0.010862834751605988],[0.7517606019973755,0.5348491072654724,-0.38573625683784485],[0.8840624690055847,0.21576282382011414,-0.41458413004875183],[0.018008733168244362,0.6169819831848145,0.7867712378501892],[0.3793635964393616,0.6295909881591797,0.6780106425285339],[0.6842378973960876,0.5092427134513855,0.522006094455719],[0,0,0],[0,0,0],[0.718989372253418,0.07999280840158463,-0.6904023885726929],[0.8652060031890869,-0.1826101392507553,-0.4669818580150604],[0.3657165467739105,0.5571408271789551,0.7455504536628723],[0.6216648817062378,0.46267110109329224,0.6320350170135498],[0,0,0],[0,0,0],[0,0,0],[0.25862187147140503,-0.21363435685634613,-0.9420589804649353],[0.5028197765350342,-0.7806774377822876,-0.37109968066215515],[0.0036175164859741926,0.012109405361115932,0.999920129776001],[0.5712440609931946,0.10384996980428696,0.8141838908195496],[0,0,0],[0,0,0],[0,0,0],[0.25603532791137695,-0.7564913034439087,-0.6018030047416687],[0.1741376668214798,-0.6343281865119934,-0.7531957030296326],[0.033627405762672424,0.00992205087095499,0.9993851780891418],[0.7223114371299744,-0.06096583604812622,0.6888754367828369],[0,0,0],[0,0,0],[0.3972948491573334,0,-0.9176909923553467],[0.5539597272872925,-0.32300037145614624,-0.7673326730728149],[0.056240759789943695,-0.1909746378660202,0.9799824953079224],[0.5774157643318176,-0.3515545725822449,0.7368856072425842],[0.6043931245803833,-0.3460192084312439,0.7176207900047302],[0,0,0],[0,0,0],[0.13135556876659393,0.22701804339885712,-0.9649914503097534],[0.434695839881897,-0.43956470489501953,0.7860168218612671],[0.5646017789840698,-0.7522140741348267,0.3397040069103241],[0.5768170356750488,-0.7642378211021423,0.2884834408760071],[-0.47263607382774353,-0.6383809447288513,-0.6075235605239868],[-0.510698676109314,-0.521359384059906,-0.6836456060409546],[0.051212504506111145,-0.9781743884086609,0.20137567818164825],[0.24527010321617126,-0.939034640789032,0.24094931781291962],[-0.26060721278190613,-0.9281308054924011,-0.26581403613090515],[0,0.7304578423500061,0.6829577684402466],[-5.0502226400794825e-8,0.8134666085243225,0.5816116333007812],[7.581520549138077e-7,0.9962686896324158,0.08630593121051788],[6.75359956403554e-7,0.9962690472602844,0.08630179613828659],[0,0.9999812841415405,-0.006120717152953148],[0.19600951671600342,0.9691318273544312,-0.14954538643360138],[0.5475984811782837,0.5951905250549316,-0.5881191492080688],[0.058225084096193314,0.4855789244174957,-0.8722516298294067],[0,0.6179631352424622,0.7862070798873901],[0,0.6889469623565674,0.7248117327690125],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0.6118707060813904,-0.6830028295516968,-0.39890027046203613],[0.6896105408668518,-0.5374903678894043,-0.4853260815143585],[0.3415726125240326,-0.11777069419622421,-0.9324474334716797],[7.766939802422712e-8,0.617996871471405,0.7861805558204651],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0.4677516222000122,-0.37623345851898193,-0.7997854948043823],[0.4580691158771515,-0.7272529602050781,-0.5111514925956726],[0.13695773482322693,-0.8290615081787109,-0.5421251058578491],[0,0.012373906560242176,0.9999234676361084],[4.753531968049174e-8,0.22587385773658752,0.9741565585136414],[0,0,0],[0,0,0],[0,0,0],[0.5975387692451477,-0.37761804461479187,-0.7073556780815125],[0.2294560819864273,-0.5082189440727234,-0.8300984501838684],[8.755198450671742e-7,0.012386549264192581,0.9999232888221741],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0.32224398851394653,-0.4693700075149536,-0.822101354598999],[0.1531381756067276,-0.5010979175567627,-0.8517332673072815],[0,-0.19334284961223602,0.9811312556266785],[-0.0000011492429621284828,-0.48097100853919983,0.8767365217208862],[0,0,0],[0,0,0],[-0.006786562502384186,-0.6001333594322205,-0.7998711466789246],[0.01698807068169117,-0.5352197885513306,-0.8445420265197754],[0,-0.5094355940818787,0.8605087995529175],[-0.0000012202144716866314,-0.9803447723388672,0.19729198515415192],[0,0,0],[-0.005824109073728323,-0.5999711751937866,-0.8000004291534424],[-0.5568259954452515,-0.6208491325378418,-0.551807165145874],[8.859131526151032e-7,-0.9803468585014343,0.1972816437482834],[0,-0.980341911315918,0.1973060667514801],[0,-0.7136216163635254,-0.7005313634872437],[0,0.7304578423500061,0.6829578280448914],[1.2248696634742373e-7,0.8134666085243225,0.5816116333007812],[-0.0000017363280448989826,0.9962686896324158,0.08630591630935669],[-6.734330213475914e-7,0.9962690472602844,0.08630181103944778],[0,0.9999812841415405,-0.006120717152953148],[-0.19600948691368103,0.9691318273544312,-0.14954537153244019],[-0.5475984811782837,0.5951905250549316,-0.5881191492080688],[-0.058225084096193314,0.4855789244174957,-0.8722516298294067],[0,0.6179631352424622,0.7862070798873901],[-5.132795308782079e-7,0.6889469623565674,0.7248117923736572],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[-0.6118705868721008,-0.6830028295516968,-0.3989003300666809],[-0.6896105408668518,-0.5374903678894043,-0.4853260815143585],[-0.3415726125240326,-0.117770716547966,-0.9324474334716797],[-9.328940109298856e-8,0.617996871471405,0.7861805558204651],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[-0.46775156259536743,-0.3762334883213043,-0.7997854948043823],[-0.4580690860748291,-0.7272529602050781,-0.5111514925956726],[-0.13695773482322693,-0.8290615081787109,-0.5421250462532043],[0,0.01237390749156475,0.9999234676361084],[4.1781046888900164e-7,0.22587385773658752,0.9741565585136414],[0,0,0],[0,0,0],[0,0,0],[-0.5975387692451477,-0.37761804461479187,-0.7073556780815125],[-0.2294560968875885,-0.5082190036773682,-0.8300983905792236],[-0.0000012726986824418418,0.012386549264192581,0.9999232888221741],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[-0.32224398851394653,-0.4693700075149536,-0.822101354598999],[-0.1531381756067276,-0.5010979175567627,-0.8517332673072815],[0,-0.19334284961223602,0.9811312556266785],[6.375142902470543e-7,-0.4809710383415222,0.8767364621162415],[0,0,0],[0,0,0],[0.0067865620367228985,-0.6001333594322205,-0.7998712062835693],[-0.01698807254433632,-0.5352198481559753,-0.8445419669151306],[-7.513564810324169e-7,-0.5094356536865234,0.8605087399482727],[0,-0.9803447723388672,0.19729198515415192],[0,0,0],[0.00582482386380434,-0.5999711751937866,-0.8000004291534424],[0.5568259954452515,-0.6208491325378418,-0.551807165145874],[-8.87011765371426e-7,-0.9803468585014343,0.19728167355060577],[-0.000009180573215417098,-0.980341911315918,0.1973060667514801],[0,-0.7136216163635254,-0.7005313634872437],[-0.045820824801921844,0.727557897567749,0.6845144033432007],[-0.2860824763774872,0.7249540686607361,0.6265767216682434],[0.07101936638355255,0.996838390827179,0.035629309713840485],[-0.15933384001255035,0.9871649742126465,-0.010862831957638264],[-0.7517606019973755,0.5348491072654724,-0.38573622703552246],[-0.8840624690055847,0.21576280891895294,-0.41458413004875183],[-0.018008733168244362,0.6169819831848145,0.7867712378501892],[-0.37936311960220337,0.6295911073684692,0.6780107617378235],[-0.6842378973960876,0.5092427134513855,0.522006094455719],[0,0,0],[0,0,0],[-0.7189893126487732,0.07999280840158463,-0.6904023885726929],[-0.8652060627937317,-0.1826101392507553,-0.46698182821273804],[-0.36571651697158813,0.5571408271789551,0.7455504536628723],[-0.621664822101593,0.4626711308956146,0.6320350170135498],[0,0,0],[0,0,0],[0,0,0],[-0.25862187147140503,-0.21363435685634613,-0.9420589804649353],[-0.5028197765350342,-0.7806774377822876,-0.37109968066215515],[-0.0036175164859741926,0.012109405361115932,0.999920129776001],[-0.5712443590164185,0.10384996235370636,0.8141836524009705],[0,0,0],[0,0,0],[0,0,0],[-0.25603532791137695,-0.7564913034439087,-0.6018029451370239],[-0.174137681722641,-0.6343281865119934,-0.7531957030296326],[-0.03362578898668289,0.009922051802277565,0.9993852376937866],[-0.7223113775253296,-0.06096583604812622,0.6888754963874817],[0,0,0],[0,0,0],[-0.39729487895965576,7.514982414136284e-9,-0.9176909923553467],[-0.5539597868919373,-0.32300034165382385,-0.7673326134681702],[-0.056240759789943695,-0.1909746378660202,0.9799824953079224],[-0.5774155259132385,-0.35155466198921204,0.7368857860565186],[-0.6043931245803833,-0.3460192084312439,0.7176207900047302],[0,0,0],[0,0,0],[-0.13135559856891632,0.2270180881023407,-0.9649914503097534],[-0.43469467759132385,-0.439564973115921,0.7860172986984253],[-0.5646011829376221,-0.7522144317626953,0.3397041857242584],[-0.5768170356750488,-0.7642378211021423,0.2884834408760071],[0.4726351499557495,-0.63838130235672,-0.6075239181518555],[0.510698676109314,-0.521359384059906,-0.6836456060409546],[-0.05121250078082085,-0.9781743884086609,0.20137566328048706],[-0.2452538162469864,-0.9390385746955872,0.24095036089420319],[0.26060721278190613,-0.9281308054924011,-0.26581403613090515],[0.10028168559074402,0.5626676082611084,0.8205782771110535],[0.3619228005409241,0.931859016418457,-0.025508830323815346],[0.10588056594133377,0.8907723426818848,-0.44194334745407104],[-0.18446508049964905,-0.05537102743983269,0.9812780618667603],[0.27150487899780273,0.7506008744239807,0.6023980975151062],[-0.37552422285079956,0.5415156483650208,-0.7521584630012512],[-0.29006507992744446,0.47813302278518677,-0.8290060758590698],[-0.6695849299430847,0.5103926062583923,0.539588212966919],[-0.7860305309295654,0.4910293221473694,0.3755612075328827],[-0.40285488963127136,-0.00906938873231411,0.9152189493179321],[-0.48654940724372864,0.5294649600982666,-0.6949363946914673],[-0.3734573721885681,0.34247031807899475,-0.8621158003807068],[-0.615329384803772,0.45650190114974976,0.6426318883895874],[-0.686672568321228,0.49250203371047974,0.5347172617912292],[-0.7976697087287903,0.4874206483364105,0.35516780614852905],[-0.7944168448448181,0.47826310992240906,0.37438780069351196],[-0.6283327341079712,-0.13398811221122742,-0.766319215297699],[-0.4359259605407715,-0.1162395030260086,-0.892444372177124],[-0.6849080920219421,0.0482657253742218,0.7270291447639465],[-0.7501806020736694,0.10661424696445465,0.6525813937187195],[-0.7976812124252319,0.48740747570991516,0.3551599681377411],[-0.2148367464542389,-0.8510902523994446,-0.47905173897743225],[-0.2119349241256714,-0.820659875869751,-0.53066086769104],[-0.32612982392311096,-0.451395720243454,-0.8305909037590027],[-0.6815271377563477,-0.09007009118795395,0.7262287139892578],[-0.726750373840332,-0.09161581844091415,0.6807646155357361],[0,0,0],[-0.4296804368495941,-0.13970164954662323,-0.8921088576316833],[-0.16000711917877197,-0.8071871399879456,-0.5681959390640259],[-0.6737505793571472,-0.15837572515010834,0.7217875719070435],[-0.6821427941322327,-0.2986332178115845,0.6674574017524719],[-0.33666345477104187,-0.7477033734321594,0.5723612308502197],[-0.3897723853588104,0.3912390470504761,-0.833672285079956],[-0.24118269979953766,0.31700995564460754,-0.917243480682373],[-0.6438280940055847,-0.7000151872634888,0.30897265672683716],[-0.3713705241680145,-0.7565067410469055,0.5383135676383972],[-0.28994810581207275,-0.7387804985046387,0.6083859205245972],[0.029022516682744026,0.2130233198404312,-0.9766159653663635],[-0.10623829811811447,-0.9039110541343689,0.4143165349960327],[0.5242925882339478,-0.691795289516449,-0.49652451276779175],[-0.1287173330783844,0.029887378215789795,0.991230845451355],[0.02040487341582775,0.9970798492431641,-0.07358957082033157],[-0.40505528450012207,0.24923236668109894,-0.8796666860580444],[-0.17178530991077423,-0.08574546873569489,0.9813957214355469],[-0.6653342247009277,0.03933454677462578,0.74550861120224],[-0.46152207255363464,0.36289262771606445,-0.8095099329948425],[-0.1234295591711998,-0.2401389181613922,0.9628595113754272],[-0.5592880249023438,0.34505409002304077,-0.7537470459938049],[-0.6184812784194946,0.058198366314172745,-0.7836413979530334],[-0.7976707816123962,0.487419068813324,0.35516759753227234],[-0.5121573209762573,0.0960056409239769,0.8535090684890747],[-0.6188084483146667,-0.11088787764310837,-0.777675986289978],[-0.6283224821090698,-0.13398867845535278,-0.7663275003433228],[-0.8813585042953491,0.057513847947120667,0.4689342975616455],[-0.8742813467979431,0.19956395030021667,0.4425000846385956],[-0.9681146144866943,-0.024797270074486732,0.249277263879776],[-0.47877174615859985,-0.4782499074935913,-0.7362436056137085],[-0.8734856247901917,-0.059241484850645065,0.48323217034339905],[-0.8539445400238037,-0.009196560829877853,0.5202827453613281],[-0.18029579520225525,-0.037675391882658005,-0.9828906059265137],[-0.842650830745697,-0.05346041917800903,0.5357999801635742],[-0.7632421255111694,-0.0855584368109703,0.6404227018356323],[-0.20802299678325653,0.5657850503921509,-0.7978807687759399],[0.09287610650062561,0.43706461787223816,-0.8946220278739929],[-0.4301705062389374,-0.6620780229568481,0.6136823296546936],[-0.4622236490249634,-0.6380462050437927,0.6158297657966614],[-0.021654125303030014,0.4250352382659912,-0.9049177765846252],[-0.3062419593334198,-0.7296712398529053,0.6113883852958679],[-0.16853021085262299,-0.9582939743995667,-0.23080343008041382],[0.1928880661725998,2.447328384391767e-8,-0.9812207818031311],[-0.8504238128662109,0.5260981917381287,-1.4851688945327624e-7],[-0.9753293991088867,0.22075465321540833,0],[-0.9318280220031738,-0.02986246347427368,0.36166948080062866],[-0.6086949110031128,0.1307537853717804,-0.7825560569763184],[-0.7692264914512634,-0.4090452194213867,0.49088963866233826],[-0.6057133674621582,-0.08061026781797409,-0.791589081287384],[-0.928680419921875,-0.11293315142393112,0.35326865315437317],[-0.5919687151908875,-0.10947707295417786,-0.7984909415245056],[-0.958467423915863,0.2825167775154114,0.039044059813022614],[3.2375847780485856e-8,0.008199185132980347,-0.9999663829803467],[-0.9070162773132324,0.021739643067121506,0.42053401470184326],[-0.15396356582641602,0.3540334701538086,-0.9224724769592285],[-0.691635251045227,-0.3628727197647095,0.6244710087776184],[-0.7847319841384888,0.010816599242389202,-0.6197408437728882],[-0.8598924279212952,-0.5087252855300903,0.04223283752799034],[-0.37431085109710693,6.907909977371673e-8,-0.9273033142089844],[-1,-1.0228501601261542e-8,-8.182801281009233e-8]],\"colors\":[[119,57,0],[36,51,67],[228,116,36],[192,172,157],[214,194,178],[228,119,25],[205,98,0],[0,0,0],[247,132,25],[225,119,25],[255,255,255]],\"verts\":[[-120,-37.7892,35.8291],[-120,-36.6286,36.716],[-122.118,-36.8894,35.025],[-120,-46.2467,33.8367],[-120,-35.3009,36.4838],[-120,-31.5318,36.1684],[-120,-37.6315,34.5894],[-96,-72,39.2838],[-114.171,-72,30.5661],[-109.284,-93.5899,27.8243],[-96,-88.2215,35.4622],[-96,-88.482,25.9453],[-96,-72,27.3853],[-96,-48,44.9379],[-119.603,-48,33.614],[-96,-48,29.4823],[-96,-47.9854,44.9413],[-96,-43.9824,48],[-105.866,-34.8883,48],[-104.932,-24,46.862],[-117.023,-24,37.7757],[-103.544,-24,48],[-96,-46.0406,29.6535],[-96,-24,35.3589],[-96,-24,48],[-96,-33.6734,55.877],[-96,-24,54.1857],[-103.28,-22.7608,48],[-100.745,0,48],[-107.535,0,42.8975],[-96,0,41.5714],[-96,0,48],[-96,-17.3006,53.0144],[-96,0,51.5664],[-96,19.4792,43.5412],[-101.217,15.9822,46.3082],[-96,17.5257,45.9055],[-107.071,24,48],[-106.895,23.3557,48],[-104.062,24,46.6121],[-96,24,42.9923],[-99.0095,15.587,48],[-96,16.3467,48],[-96,14.4528,36.6911],[-96,23.8717,37.8459],[-96,9.16753,43.9445],[-107.229,24,48],[-96,24,37.7854],[-107.391,24,48.1478],[-96,15.0482,50.3069],[-96,48,41.4178],[-100.555,48,42.0944],[-96,45.9969,40.2972],[-110.131,35.2227,48],[-106.881,31.9455,46.9133],[-108.663,43.2332,46.3154],[-111.558,40.4547,48],[-108.784,30.2823,48],[-96,33.0554,41.8927],[-96,40.5511,40.9646],[-113.615,48,48],[-113.372,47.108,48],[-109.864,48,46.2699],[-112.571,39.117,48],[-96.7162,48,28.5453],[-96,48,27.8948],[-96,41.1182,31.8106],[-96,41.0395,29.7579],[-109.944,29.2427,48],[-99.3192,48,34.0931],[-114.045,48,48],[-113.485,38.6049,49.1215],[-110.843,28.4821,49.1762],[-114.456,48,48.3878],[-96,59.7655,48],[-102.349,58.0794,48],[-111.025,52.6046,46.2259],[-111.442,57.482,48],[-114.099,49.7733,48],[-96,54.7409,26.1534],[-114.699,48.8655,48],[-96,56.3735,27.7442],[-96,48.4013,27.6664],[-108.602,72,48],[-96,72,31.6987],[-96,49.6932,29.7516],[-96,72,48],[-96,62.0865,49.2985],[-96,72,52.8843],[-112.684,72,53.2808],[-115.284,48.6815,48.6841],[-96,92.2861,48],[-96,77.4494,33.0777],[-106.383,83.339,48],[-96,85.1202,57.6299],[-114.025,87.6733,58.9818],[-96,96,63.2865],[-109.35,96,63.3046],[-96,96,51.7353],[-109.35,96,63.3046],[-96,112.76,72],[-99.9447,112.749,72],[-96,115.636,72],[-96,113.044,68.878],[-97.1045,115.197,72],[-96,112.76,72],[-96,114.525,72.918],[-97.8045,116.561,73.9788],[-96,115.257,73.6248],[-96,116.15,72.6201],[-72,-79.2139,24],[-82.248,-83.1941,24],[-72,-79.2536,22.5504],[-76.6606,-72,24],[-72,-72,23.1842],[-72,-72,24],[-77.8321,-72,48],[-74.1939,-79.409,48],[-72,-78.5569,48],[-72,-72,48],[-72,-72,50.798],[-72,-78.5224,49.2614],[-72,-62.6628,24],[-91.6412,-48,48],[-95.9656,-48,44.9544],[-87.9439,-51.408,48],[-90.4079,-48,28.5034],[-72,-54.4498,24.7176],[-72,-48,26.3872],[-72,-48,48],[-72,-58.1816,54.0535],[-72,-48,61.8332],[-72,-24,32.5997],[-72,-24,48],[-72,-34.6943,72],[-75.8053,-31.1868,72],[-74.2728,-24,72],[-72,-24,72],[-72,-30.7182,75.0381],[-72,-24,73.8635],[-81.5177,0,24],[-72,0,2.6242],[-72,-15.5759,24],[-72,0,24],[-88.9823,0,40.7646],[-72,-22.1847,33.0696],[-72,0,48],[-72.933,0,68.9023],[-72,-13.342,72],[-72,0,69.6672],[-75.0543,24,0],[-72,24,-5.52097],[-72,7.41659,-7.55404],[-76.0976,8.6179,0],[-72,1.91218,0],[-72,24,0],[-88.3315,24,24],[-89.1159,12.4346,24],[-72,24,24],[-89.2561,24,39.9642],[-74.1182,24,44.2164],[-72,22.405,48],[-72,24,45.1663],[-95.9152,24,37.7083],[-72,0.699737,69.5449],[-72,10.7513,68.7036],[-73.4266,48,0],[-72,48,-2.57866],[-72,48,0],[-87.4647,36.7804,24],[-80.0463,48,11.9658],[-91.7119,48,24],[-87.8363,48,20.4799],[-90.3725,45.8621,24],[-87.7728,48,18.9946],[-91.5988,44.7631,24],[-72,48,24],[-72,48,37.8523],[-72.1133,35.4918,30.8714],[-72,36.3606,31.3406],[-72,35.462,30.9393],[-72,24.6267,44.0529],[-72,65.2415,0],[-72,63.8365,-1.41315],[-72.9833,64.3942,0],[-72.6699,59.1559,0],[-72,60.1691,-1.08677],[-72,62.2821,-1.88711],[-73.6152,61.7746,0],[-73.4456,62.0312,0],[-72,62.3938,-1.77823],[-73.4535,61.0338,0],[-72,61.8481,-1.78354],[-72,61.3496,-1.49988],[-73.0807,60.4387,0],[-72,61.3442,-1.64038],[-73.2539,60.2834,0],[-73.2544,61.2966,0],[-72,61.9366,-1.64082],[-72,61.3496,-1.49988],[-72.6699,59.1559,0],[-72,72,7.9374],[-72,66.2729,1.03736],[-74.9388,72,9.34433],[-86.3925,72,19.2706],[-94.1569,55.32,24],[-92.9562,57.137,24],[-93.0121,50.0754,24],[-90.0486,72,24],[-91.6028,51.9364,24],[-72,72,24],[-72,66.1387,48],[-72,66.1387,48],[-72,72,48],[-72,72,51.2791],[-80.2914,72,52.5109],[-72,85.3321,24],[-80.1235,82.1041,24],[-89.6834,73.8666,24],[-72,96,36.8528],[-87.254,96,44.1557],[-91.6899,96,48],[-72,96,48],[-72,77.2326,54.2065],[-72,81.7207,55.8299],[-72,87.4502,58.8087],[-79.5788,96,63.2642],[-72,96,67.0639],[-72,105.252,48],[-88.614,98.6504,48],[-94.4385,112.764,72],[-72,97.9182,68.9159],[-87.719,109.275,72],[-72,110.688,54.5486],[-95.1765,115.963,72],[-95.1765,115.963,72],[-53.4261,-72,24],[-53.1359,-72,19.882],[-55.1176,-72,48],[-55.8606,-72,58.5411],[-48,-69.8926,24],[-48,-70.0252,19.1556],[-68.5108,-55.6723,24],[-48,-62.8589,19.7817],[-51.9841,-48.3324,24],[-48,-53.5369,22.1947],[-52.1872,-48,24],[-48,-48,14.5961],[-48,-69.8926,24],[-48,-48,24],[-48,-69.2356,48],[-52.2385,-48,24.1153],[-48,-48,48],[-48,-68.3778,63.1656],[-48,-67.5893,63.7681],[-58.3556,-48,71.4429],[-48,-68.8233,63.0607],[-56.7632,-48,72],[-48,-53.3163,72],[-48,-48,72],[-48,-48,75.0662],[-56.1484,-24,0],[-48,-24,-10.1115],[-48,-34.6899,0],[-48,-24,0],[-48,-43.2961,8.14058],[-56.1883,-24,0.049491],[-66.8524,-24,24],[-48,-24,24],[-70.6104,-24,32.4399],[-48,-24,48],[-59.1073,-46.5779,72],[-48,-24,72],[-67.7668,-30.197,78.4178],[-48,-29.302,85.8503],[-66.7206,-24,78.1921],[-48,-24,85.3165],[-52.5592,0,-24],[-48,0,-28.3655],[-48,-6.14545,-24],[-48,0,-24],[-63.6937,0,-13.3385],[-48,-18.8826,-14.9521],[-56.2384,-23.882,0],[-66.3727,0,-10.014],[-70.8316,0,0],[-48,0,0],[-48,0,24],[-48,0,48],[-69.1549,0,72],[-48,0,72],[-48,-3.48636,82.3449],[-51.7359,0,80.8291],[-56.1688,0,79.7916],[-48,-14.3653,84.3465],[-48,0,81.709],[-62.6689,0,77.3179],[-54.8995,24,-24],[-48,24,-30.4683],[-48,6.07826,-32.6832],[-57.2328,6.29981,-24],[-48,24,-24],[-69.4985,24,-10.0427],[-69.1676,6.5862,-12.7757],[-61.1724,24,-18.1191],[-48,24,0],[-48,24,24],[-65.6813,24,48],[-48,24,48],[-48,13.2617,72],[-48,24,54.048],[-55.1404,24,52.7271],[-59.9372,11.9408,72],[-68.4355,3.37312,72],[-67.6996,9.98131,72],[-68.4355,3.37312,72],[-61.1809,8.8142,76.9968],[-48,8.36691,80.183],[-51.6825,48,-24],[-50.1532,48,-25.4835],[-52.3729,43.1654,-24],[-48,48,-27.5021],[-48,48,-24],[-69.9546,48,-6.27598],[-48,48,0],[-48,48,24],[-70.4821,48,37.6268],[-52.4428,48,48],[-57.3493,48,47.0365],[-52.6089,30.3641,42.5561],[-48,33.9187,44.5518],[-48,45.1567,48],[-48,27.6177,48],[-48,27.692,47.8759],[-53.9638,26.9578,48],[-48,48,48],[-48,48,48.8724],[-48,60.0894,-24],[-48,54.5679,-26.6624],[-50.6063,55.537,-24],[-48,52.6897,-26.9225],[-65.2383,68.0988,0],[-70.2365,62.8362,-3.9475],[-71.633,65.5577,0],[-60.5693,72,0],[-57.0731,72,-10.6155],[-48,72,-18.257],[-48,72,0],[-61.5331,72,2.92635],[-48,72,24],[-67.9774,67.2068,48],[-58.3687,51.7925,48],[-48,72,48],[-67.3524,72,50.5887],[-63.8003,72,53.1338],[-48,72,56.2364],[-48,82.5023,0],[-48,78.3163,-15.2114],[-48,94.8689,24],[-48,86.2489,13.6145],[-48,94.9837,48],[-48,96,46.8565],[-49.1332,96,48],[-48,96,25.3628],[-66.192,80.898,55.3943],[-48,72.4747,56.3821],[-48,80.579,64.2071],[-69.345,96,68.395],[-48,105.225,36.4772],[-63.303,108.708,48],[-37.8542,-48,0],[-36.4276,-48,-1.77032],[-36.5925,-49.6552,0],[-24,-48,-1.77032],[-24,-49.6552,0],[-24,-48,0],[-26.9644,-66.8147,24],[-34.4872,-66.8147,24],[-38.2486,-66.2756,17.7762],[-24,-66.8147,24],[-24,-66.2756,17.7762],[-37.9885,-66.8147,24],[-38.2486,-65.8205,24],[-39.5064,-66.5937,24],[-46.0039,-48,10.113],[-24,-60.0878,11.1581],[-24,-48,24],[-24,-66.9564,25.635],[-24,-68.3179,41.3526],[-37.6784,-66.2457,48],[-41.6728,-66.1706,48],[-38.2486,-64.7302,38.9099],[-36.9857,-68.8938,48],[-24,-68.8938,48],[-44.3565,-67.8205,48],[-24,-48,48],[-43.2728,-67.7881,72],[-47.4625,-68.6061,63.3697],[-41.6786,-70.1434,72],[-36.1728,-70.2469,72],[-30.8838,-70.9728,72],[-24,-69.8278,58.7822],[-24,-70.9728,72],[-35.9829,-70.9728,72],[-43.7944,-66.8072,72],[-43.6523,-65.0899,72],[-44.8516,-55.2264,72],[-24,-48,72],[-29.3572,-68.8589,96],[-31.6217,-65.5132,96],[-35.6042,-71.758,81.0639],[-29.2165,-70.8259,96],[-24,-71.758,81.0639],[-24,-70.8259,96],[-33.5938,-61.8046,96],[-33.0565,-55.3116,96],[-33.9455,-48,96],[-43.4414,-48,76.6612],[-24,-48,96],[-24,-66.3727,108.809],[-24,-64.025,111.7],[-24,-70.0647,108.198],[-24,-57.0996,118.572],[-24,-48,116.726],[-25.1337,-48,113.946],[-34.7541,-24,-24],[-34.2508,-24,-24.4819],[-34.2993,-24.6131,-24],[-24,-24,-24.4819],[-24,-24.6131,-24],[-24,-24,-24],[-43.7468,-24,-15.3894],[-35.0758,-34.4329,-16.2809],[-24,-34.4329,-16.2809],[-24,-24,0],[-24,-24,24],[-24,-24,48],[-24,-24,72],[-42.5213,-24,87.4015],[-39.7195,-28.9271,88.9638],[-39.9976,-24,87.9921],[-36.1383,-29.9652,96],[-26.8765,-24,96],[-30.7302,-24,90.7785],[-24,-24,96],[-24,-46.9538,116.514],[-24,-33.4838,119.849],[-24,-24,99.8975],[-24,-46.9538,116.514],[-32.3531,0,-43.3477],[-24,0,-43.3477],[-24,0,-24],[-24,0,0],[-24,0,24],[-24,0,48],[-24,0,72],[-24,-14.444,91.0796],[-24,-2.54379,86.7302],[-40.775,-10.2288,85.2764],[-24.2042,0,87.3138],[-24,0,87.3101],[-24,-22.1473,96],[-24,-20.3111,92.1371],[-30.6087,24,-48],[-30.5648,24,-48.0487],[-30.8525,20.0646,-48],[-24,24,-48.0487],[-24,20.0646,-48],[-24,24,-48],[-37.6891,24,-40.1348],[-31.903,5.692,-47.822],[-24,0.957561,-44.1004],[-24,5.692,-47.822],[-24,24,-24],[-37.6891,24,-40.1348],[-24,24,0],[-24,24,24],[-24,24,48],[-27.0998,15.5745,72],[-41.6321,24,55.2261],[-24,20.4795,72],[-24,24,70.1206],[-24,13.7773,75.5779],[-24,7.55249,85.9844],[-24,0.126053,87.3389],[-29.1221,48,-48],[-28.8106,48,-48.346],[-27.1933,48,-48.346],[-24,45.7139,-48.3177],[-24,48,-48.346],[-24,48,-48],[-45.2742,48,-30.0575],[-24,48,-24],[-24,48,0],[-24,48,24],[-40.0368,40.0604,48],[-47.8925,27.6296,48],[-24,48,48],[-29.7423,48,52.4577],[-24,48,57.3084],[-27.8467,49.7558,-48],[-24,49.7558,-48],[-24,49.1003,-48.3596],[-28.7302,49.1003,-48.3596],[-28.7302,49.7558,-48],[-29.0484,49.1895,-48],[-41.1811,72,-24],[-38.4981,72,-26.2598],[-47.2634,54.294,-27.4148],[-24,52.6097,-46.4344],[-24,72,-35.797],[-28.7302,72,-35.797],[-24,72,-24],[-38.4981,72,-26.2598],[-24,72,0],[-24,72,24],[-24,72,48],[-24,52.4288,54.9442],[-24,61.3621,57.6852],[-46.9748,72,56.4377],[-24,63.2399,59.4982],[-36.1253,72,61.8773],[-24,72,49.642],[-27.5329,91.9268,-24],[-28.7302,91.7311,-24.9726],[-28.8163,91.9268,-24],[-24,91.9268,-24],[-24,91.7311,-24.9726],[-30.6502,90.3945,-24],[-24,96,-3.76025],[-24,92.5044,-21.1302],[-30.6074,96,-3.76025],[-31.8458,96,0],[-24,96,0],[-45.1534,96,24],[-38.7387,96,20.929],[-24,96,24],[-24,96,29.6914],[-30.9891,96,29.6914],[-24,77.3373,43.6368],[-24,73.4594,48],[-24,96.7567,0],[-30.9401,96.7567,0],[-34.8503,100.094,24],[-24,101.587,24],[-33.064,101.587,24],[-24,101.852,25.3186],[-33.1807,101.852,25.3186],[0,-48,-1.77032],[0,-49.6552,0],[0,-48,0],[0,-66.8147,24],[0,-66.2756,17.7762],[0,-49.6653,0.010813],[0,-48,24],[0,-68.1031,38.8721],[0,-68.8938,48],[-19.9826,-68.8938,48],[0,-48,48],[0,-69.0168,49.4201],[-19.1243,-69.0168,49.4201],[-18.1808,-70.9728,72],[0,-70.4365,65.8085],[0,-70.9728,72],[0,-48,72],[-17.8021,-71.758,81.0639],[-8.54682,-70.8259,96],[-16.6288,-70.8259,96],[0,-70.8259,96],[0,-71.758,81.0639],[0,-48,96],[-19.3194,-64.2005,120],[-19.9706,-63.2383,120],[-18.9526,-69.3281,120],[0,-69.9651,109.793],[0,-69.3281,120],[-14.7434,-69.3281,120],[-23.3932,-56.802,120],[-22.6649,-48,120],[0,-48,120],[-11.3326,-50.8701,144],[0,-58.855,138.614],[0,-50.8701,144],[-12.9445,-50.8701,144],[-13.7962,-68.5757,132.057],[0,-68.5757,132.057],[-13.2044,-50.226,144],[-14.8446,-52.6096,140.113],[-15.2674,-62.32,129.688],[-14.279,-48,140.565],[-13.0117,-48,144],[0,-48,144],[0,-49.7716,144.741],[-12.8917,-49.7716,144.741],[-12.8918,-48,144.325],[-12.6775,-48,145.633],[-9.2584,-48,145.633],[0,-48,145.633],[0,-24,-24.4819],[0,-24.6131,-24],[0,-24,-24],[0,-34.4329,-16.2809],[0,-24,0],[0,-24,24],[0,-24,48],[0,-24,72],[0,-24,96],[-11.8644,-24,120],[-13.6401,-24,114.086],[-12.7674,-26.2283,120],[-22.4608,-45.5333,120],[-23.9231,-33.5061,120],[-14.592,-27.4963,120],[-15.2373,-24,111.77],[0,-24,120],[-10.1763,-24,125.622],[-9.5692,-34.3939,141.672],[-12.8928,-36.7035,141.672],[-4.68798,-34.7015,144],[0,-34.7015,144],[0,-34.3939,141.672],[-9.5273,-34.7015,144],[-12.892,-46.6164,144],[-12.5233,-37.0111,144],[-11.9959,-36.417,144],[-1.69953,-24,125.622],[0,-24,125.622],[0,-34.997,146.236],[-9.4063,-35.5898,150.722],[0,-35.5898,150.722],[-11.4565,-37.8994,150.722],[0,-36.6311,150.722],[0,-37.8994,150.722],[0,-43.4856,147.908],[-22.4016,0,-43.3477],[0,-13.4201,-32.7985],[0,0,-43.3477],[0,0,-24],[0,0,0],[0,0,24],[0,0,48],[0,0,72],[-16.6605,-16.2883,93.6187],[-23.9269,-2.5103,86.7365],[-14.3898,-12.4491,96],[-16.3091,-17.1855,96],[-20.9872,0,87.2566],[-13.8378,0,90.2312],[-0.577762,0,94.12],[0,-0.344472,94.3786],[0,0,94.12],[0,-2.50434,96],[-11.8744,0,94.12],[-11.6222,-2.50434,96],[-16.4738,-17.3,96],[-10.389,-20.3589,120],[-11.1691,-7.0037,99.3776],[0,-7.0037,99.3776],[0,-20.3589,120],[0,-21.7553,122.156],[0,24,-48.0487],[0,20.0646,-48],[0,24,-48],[0,5.692,-47.822],[0,24,-24],[0,24,0],[0,24,24],[0,24,48],[-21.7752,24,72],[0,24,72],[-12.596,7.1655,88.741],[-13.9754,24,78.5888],[0,7.1655,88.741],[-2.8757,24,78.5888],[0,24,78.5888],[0,28.5319,-48.1049],[0,48,-48.346],[0,48,-48],[0,48,-24],[0,48,0],[0,48,24],[0,48,48],[-14.8707,34.9256,72],[-15.942,48,64.1154],[0,34.9256,72],[0,48,64.1154],[0,28.9804,75.5853],[0,49.7558,-48],[0,49.1003,-48.3596],[0,70.4157,-36.6661],[0,72,-35.797],[0,72,-24],[0,72,0],[0,72,24],[0,71.4982,48],[0,72,47.6251],[-0.826165,72,47.6251],[-1.39778,71.4982,48],[-22.0012,72,47.6251],[-21.8133,71.4982,48],[-22.3728,72,48],[-16.7623,58.0109,58.0782],[0,58.0109,58.0782],[0,91.9268,-24],[0,91.7311,-24.9726],[-2.61677,96,-3.76025],[0,96,-3.76025],[0,96,0],[0,96,24],[0,72.7252,47.0831],[0,96,29.6914],[0,96.7567,0],[0,96.4278,-1.63461],[0,101.587,24],[0,101.852,25.3186],[0.02328,-49.6552,0],[3.83474,-48,-1.77032],[24,-48,-1.77032],[24,-49.6552,0],[24,-48,0],[24,-66.2756,17.7762],[24,-66.8147,24],[24,-48,24],[24,-68.8938,48],[19.9826,-68.8938,48],[24,-68.3179,41.3526],[16.5495,-68.8938,48],[24,-48,48],[24,-69.8278,58.7822],[24,-70.9728,72],[18.1808,-70.9728,72],[19.1243,-69.0168,49.4201],[7.22507,-70.9728,72],[24,-48,72],[24,-71.758,81.0639],[17.8021,-71.758,81.0639],[16.6288,-70.8259,96],[24,-70.8259,96],[24,-48,96],[24,-66.3727,108.809],[19.3194,-64.2005,120],[18.9526,-69.3281,120],[24,-70.0647,108.198],[24,-64.025,111.7],[19.9706,-63.2383,120],[6.32498,-69.3281,120],[14.7434,-69.3281,120],[24,-57.0996,118.572],[23.3932,-56.802,120],[24,-48,116.726],[22.6649,-48,120],[13.7962,-68.5757,132.057],[15.2674,-62.32,129.688],[14.8446,-52.6096,140.113],[13.2044,-50.226,144],[12.9445,-50.8701,144],[14.279,-48,140.565],[13.0117,-48,144],[12.8917,-49.7716,144.741],[12.8918,-48,144.325],[12.6775,-48,145.633],[17.6606,-24,-24.4819],[18.684,-24.6131,-24],[24,-24,-24.4819],[24,-24.6131,-24],[24,-24,-24],[24,-27.7977,-21.4966],[24,-34.4329,-16.2809],[24,-39.2428,-11.1365],[24,-24,0],[24,-24,24],[24,-24,48],[24,-24,72],[24,-24,96],[11.8644,-24,120],[12.7674,-26.2283,120],[13.6401,-24,114.086],[24,-46.9538,116.514],[22.4608,-45.5333,120],[24,-33.4838,119.849],[23.9231,-33.5061,120],[14.592,-27.4963,120],[15.2373,-24,111.77],[24,-24,99.8975],[24,-46.9538,116.514],[10.1763,-24,125.622],[9.5692,-34.3939,141.672],[12.8928,-36.7035,141.672],[9.5273,-34.7015,144],[12.892,-46.6164,144],[12.5233,-37.0111,144],[11.9959,-36.417,144],[9.4063,-35.5898,150.722],[11.4565,-37.8994,150.722],[24,0,-43.3477],[24,0,-24],[24,0,0],[24,0,24],[24,0,48],[24,0,72],[16.6605,-16.2883,93.6187],[24,-14.444,91.0796],[24,-2.54379,86.7302],[23.9269,-2.5103,86.7365],[14.3898,-12.4491,96],[16.3091,-17.1855,96],[13.8378,0,90.2312],[11.8744,0,94.12],[11.6222,-2.50434,96],[24,0,87.3101],[20.9872,0,87.2566],[16.4738,-17.3,96],[24,-22.1473,96],[24,-20.3111,92.1371],[3.62261,-2.50434,96],[11.1691,-7.0037,99.3776],[10.389,-20.3589,120],[1.05728,-20.3589,120],[6.33018,24,-48.0487],[11.8272,20.0646,-48],[24,24,-48.0487],[24,20.0646,-48],[24,24,-48],[24,5.692,-47.822],[24,11.3499,-47.8921],[24,24,-24],[24,24,0],[24,24,24],[24,24,48],[24,20.4795,72],[24,24,70.1206],[21.7752,24,72],[12.596,7.1655,88.741],[24,13.7773,75.5779],[13.9754,24,78.5888],[24,7.55249,85.9844],[24,0.126053,87.3389],[24,48,-48.346],[24,48,-48],[24,48,-24],[24,48,0],[24,48,24],[24,48,48],[24,48,57.3084],[15.942,48,64.1154],[14.8707,34.9256,72],[3.43278,34.9256,72],[10.982,48,64.1154],[24,49.7558,-48],[24,49.1003,-48.3596],[2.13542,72,-35.797],[24,72,-35.797],[24,72,-24],[24,72,0],[24,72,24],[22.3728,72,48],[22.0012,72,47.6251],[21.8133,71.4982,48],[24,72,48],[24,63.2399,59.4982],[16.7623,58.0109,58.0782],[24,61.3621,57.6852],[24,52.4288,54.9442],[24,72,49.642],[24,91.9268,-24],[24,91.7311,-24.9726],[24,88.2217,-26.8978],[24,96,-3.76025],[24,96,0],[24,96,24],[24,73.4594,48],[24,77.3373,43.6368],[24,93.793,31.3406],[24,96,29.6914],[2.01228,96.7567,0],[24,96.7567,0],[24,101.587,24],[24,100.351,17.861],[24,101.852,25.3186],[37.8542,-48,0],[36.5925,-49.6552,0],[36.4276,-48,-1.77032],[37.9885,-66.8147,24],[34.4872,-66.8147,24],[38.2486,-66.2756,17.7762],[38.2486,-65.8205,24],[39.5064,-66.5937,24],[48,-70.0252,19.1556],[48,-69.8926,24],[48,-62.8589,19.7817],[48,-53.5369,22.1947],[46.0039,-48,10.113],[48,-48,14.5961],[48,-69.8926,24],[48,-48,24],[37.6784,-66.2457,48],[38.2486,-64.7302,38.9099],[41.6728,-66.1706,48],[36.9857,-68.8938,48],[44.3565,-67.8205,48],[48,-69.2356,48],[48,-48,48],[41.6786,-70.1434,72],[47.4625,-68.6061,63.3697],[43.2728,-67.7881,72],[36.1728,-70.2469,72],[30.8838,-70.9728,72],[35.9829,-70.9728,72],[43.7944,-66.8072,72],[43.6523,-65.0899,72],[44.8516,-55.2264,72],[48,-68.3778,63.1656],[48,-68.8233,63.0607],[48,-67.5893,63.7681],[48,-53.3163,72],[48,-48,72],[29.3572,-68.8589,96],[29.2165,-70.8259,96],[35.6042,-71.758,81.0639],[31.6217,-65.5132,96],[33.5938,-61.8046,96],[33.0565,-55.3116,96],[33.9455,-48,96],[43.4414,-48,76.6612],[48,-48,75.0662],[25.1337,-48,113.946],[34.7541,-24,-24],[34.2993,-24.6131,-24],[34.2508,-24,-24.4819],[43.7468,-24,-15.3894],[35.0758,-34.4329,-16.2809],[48,-24,-10.1115],[48,-34.6899,0],[48,-24,0],[48,-43.2961,8.14058],[48,-24,24],[48,-24,48],[48,-24,72],[42.5213,-24,87.4015],[39.9976,-24,87.9921],[39.7195,-28.9271,88.9638],[36.1383,-29.9652,96],[48,-29.302,85.8503],[48,-24,85.3165],[26.8765,-24,96],[30.7302,-24,90.7785],[48,0,-28.3655],[48,-6.14545,-24],[32.3531,0,-43.3477],[48,0,-24],[48,-18.8826,-14.9521],[48,0,0],[48,0,24],[48,0,48],[48,0,72],[40.775,-10.2288,85.2764],[48,-14.3653,84.3465],[48,-3.48636,82.3449],[24.2042,0,87.3138],[48,0,81.709],[30.6087,24,-48],[30.8525,20.0646,-48],[30.5648,24,-48.0487],[37.6891,24,-40.1348],[48,24,-30.4683],[48,6.07826,-32.6832],[31.903,5.692,-47.822],[48,24,-24],[37.6891,24,-40.1348],[48,24,0],[48,24,24],[48,24,48],[27.0998,15.5745,72],[41.6321,24,55.2261],[48,13.2617,72],[48,24,54.048],[48,8.36691,80.183],[29.1221,48,-48],[28.8106,48,-48.346],[45.2742,48,-30.0575],[48,48,-27.5021],[48,48,-24],[48,48,0],[48,48,24],[48,45.1567,48],[40.0368,40.0604,48],[48,33.9187,44.5518],[47.8925,27.6296,48],[48,27.692,47.8759],[48,27.6177,48],[48,48,48],[48,48,48.8724],[29.7423,48,52.4577],[28.7302,49.7558,-48],[29.0484,49.1895,-48],[28.7302,49.1003,-48.3596],[41.1811,72,-24],[48,60.0894,-24],[48,54.5679,-26.6624],[47.2634,54.294,-27.4148],[38.4981,72,-26.2598],[48,52.6897,-26.9225],[28.7302,72,-35.797],[38.4981,72,-26.2598],[48,72,-18.257],[48,72,0],[48,72,24],[48,72,48],[36.1253,72,61.8773],[46.9748,72,56.4377],[48,72,56.2364],[30.6502,90.3945,-24],[28.7302,91.7311,-24.9726],[28.8163,91.9268,-24],[48,78.3163,-15.2114],[48,82.5023,0],[30.6074,96,-3.76025],[31.8458,96,0],[45.1534,96,24],[48,94.8689,24],[48,86.2489,13.6145],[38.7387,96,20.929],[30.9891,96,29.6914],[48,94.9837,48],[48,96,46.8565],[26.5142,96,29.6914],[48,96,25.3628],[48,80.579,64.2071],[48,72.4747,56.3821],[30.9401,96.7567,0],[34.8503,100.094,24],[33.064,101.587,24],[31.5574,101.587,24],[48,105.225,36.4772],[33.1807,101.852,25.3186],[53.4261,-72,24],[53.1359,-72,19.882],[72,-79.2536,22.5504],[72,-79.2139,24],[72,-72,23.1842],[72,-72,24],[55.1176,-72,48],[72,-78.5569,48],[72,-72,48],[72,-72,50.798],[55.8606,-72,58.5411],[72,-78.5224,49.2614],[72,-62.6628,24],[68.5108,-55.6723,24],[51.9841,-48.3324,24],[52.1872,-48,24],[72,-54.4498,24.7176],[72,-48,26.3872],[52.2385,-48,24.1153],[72,-48,48],[72,-58.1816,54.0535],[72,-48,61.8332],[58.3556,-48,71.4429],[56.7632,-48,72],[56.1484,-24,0],[56.1883,-24,0.049491],[66.8524,-24,24],[72,-24,32.5997],[70.6104,-24,32.4399],[72,-24,48],[72,-34.6943,72],[59.1073,-46.5779,72],[72,-24,72],[72,-30.7182,75.0381],[67.7668,-30.197,78.4178],[66.7206,-24,78.1921],[72,-24,73.8635],[52.5592,0,-24],[63.6937,0,-13.3385],[66.3727,0,-10.014],[56.2384,-23.882,0],[70.8316,0,0],[72,0,2.6242],[72,-15.5759,24],[72,0,24],[72,-22.1847,33.0696],[72,0,48],[69.1549,0,72],[72,-13.342,72],[72,0,69.6672],[56.1688,0,79.7916],[51.7359,0,80.8291],[62.6689,0,77.3179],[54.8995,24,-24],[57.2328,6.29981,-24],[69.4985,24,-10.0427],[69.1676,6.5862,-12.7757],[61.1724,24,-18.1191],[72,24,-5.52097],[72,7.41659,-7.55404],[72,1.91218,0],[72,24,0],[72,24,24],[72,22.405,48],[72,24,45.1663],[65.6813,24,48],[59.9372,11.9408,72],[55.1404,24,52.7271],[72,10.7513,68.7036],[67.6996,9.98131,72],[68.4355,3.37312,72],[72,0.699737,69.5449],[68.4355,3.37312,72],[61.1809,8.8142,76.9968],[51.6825,48,-24],[52.3729,43.1654,-24],[50.1532,48,-25.4835],[69.9546,48,-6.27598],[72,48,-2.57866],[72,48,0],[72,48,24],[72,48,37.8523],[70.4821,48,37.6268],[72,36.3606,31.3406],[57.3493,48,47.0365],[52.6089,30.3641,42.5561],[72,35.462,30.9393],[52.4428,48,48],[72,24.6267,44.0529],[53.9638,26.9578,48],[50.6063,55.537,-24],[65.2383,68.0988,0],[71.633,65.5577,0],[70.2365,62.8362,-3.9475],[72,65.2415,0],[72,63.8365,-1.41315],[57.0731,72,-10.6155],[60.5693,72,0],[72,60.1691,-1.08677],[72,62.2821,-1.88711],[72,62.3938,-1.77823],[72,61.8481,-1.78354],[72,61.3496,-1.49988],[72,61.3442,-1.64038],[72,61.9366,-1.64082],[72,61.3496,-1.49988],[61.5331,72,2.92635],[72,72,7.9374],[72,66.2729,1.03736],[72,72,24],[72,66.1387,48],[67.9774,67.2068,48],[58.3687,51.7925,48],[72,66.1387,48],[72,72,48],[72,72,51.2791],[67.3524,72,50.5887],[63.8003,72,53.1338],[72,85.3321,24],[49.1332,96,48],[72,96,36.8528],[72,96,48],[72,77.2326,54.2065],[72,81.7207,55.8299],[66.192,80.898,55.3943],[72,87.4502,58.8087],[72,96,67.0639],[69.345,96,68.395],[63.303,108.708,48],[72,105.252,48],[72,97.9182,68.9159],[72,110.688,54.5486],[82.248,-83.1941,24],[76.6606,-72,24],[96,-72,39.2838],[77.8321,-72,48],[74.1939,-79.409,48],[96,-88.2215,35.4622],[96,-88.482,25.9453],[96,-72,27.3853],[96,-48,44.9379],[95.9656,-48,44.9544],[87.9439,-51.408,48],[91.6412,-48,48],[96,-48,29.4823],[90.4079,-48,28.5034],[96,-47.9854,44.9413],[96,-43.9824,48],[96,-46.0406,29.6535],[96,-24,35.3589],[96,-24,48],[96,-33.6734,55.877],[75.8053,-31.1868,72],[74.2728,-24,72],[96,-24,54.1857],[81.5177,0,24],[96,0,41.5714],[88.9823,0,40.7646],[96,0,48],[96,0,51.5664],[72.933,0,68.9023],[96,-17.3006,53.0144],[75.0543,24,0],[76.0976,8.6179,0],[88.3315,24,24],[89.1159,12.4346,24],[74.1182,24,44.2164],[96,17.5257,45.9055],[96,19.4792,43.5412],[89.2561,24,39.9642],[96,24,42.9923],[96,16.3467,48],[95.9152,24,37.7083],[96,23.8717,37.8459],[96,14.4528,36.6911],[96,9.16753,43.9445],[96,24,37.7854],[96,15.0482,50.3069],[73.4266,48,0],[80.0463,48,11.9658],[87.4647,36.7804,24],[91.7119,48,24],[90.3725,45.8621,24],[87.8363,48,20.4799],[91.5988,44.7631,24],[87.7728,48,18.9946],[96,48,41.4178],[72.1133,35.4918,30.8714],[96,45.9969,40.2972],[96,33.0554,41.8927],[96,40.5511,40.9646],[96,48,27.8948],[96,41.1182,31.8106],[96,41.0395,29.7579],[72.9833,64.3942,0],[72.6699,59.1559,0],[73.6152,61.7746,0],[73.4456,62.0312,0],[73.4535,61.0338,0],[73.0807,60.4387,0],[73.2539,60.2834,0],[73.2544,61.2966,0],[72.6699,59.1559,0],[74.9388,72,9.34433],[86.3925,72,19.2706],[94.1569,55.32,24],[92.9562,57.137,24],[93.0121,50.0754,24],[90.0486,72,24],[91.6028,51.9364,24],[96,59.7655,48],[96,54.7409,26.1534],[96,56.3735,27.7442],[96,48.4013,27.6664],[96,72,31.6987],[96,49.6932,29.7516],[96,72,48],[80.2914,72,52.5109],[96,62.0865,49.2985],[96,72,52.8843],[80.1235,82.1041,24],[89.6834,73.8666,24],[87.254,96,44.1557],[91.6899,96,48],[96,92.2861,48],[96,77.4494,33.0777],[96,85.1202,57.6299],[79.5788,96,63.2642],[96,96,63.2865],[96,96,51.7353],[88.614,98.6504,48],[94.4385,112.764,72],[87.719,109.275,72],[96,112.76,72],[95.1765,115.963,72],[96,115.636,72],[96,113.044,68.878],[96,112.76,72],[95.1765,115.963,72],[96,114.525,72.918],[96,115.257,73.6248],[96,116.15,72.6201],[109.284,-93.5899,27.8243],[114.171,-72,30.5661],[119.603,-48,33.614],[120,-37.7892,35.8291],[120,-46.2467,33.8367],[120,-36.6286,36.716],[105.866,-34.8883,48],[104.932,-24,46.862],[120,-35.3009,36.4838],[120,-31.5318,36.1684],[117.023,-24,37.7757],[103.544,-24,48],[120,-37.6315,34.5894],[100.745,0,48],[103.28,-22.7608,48],[107.535,0,42.8975],[101.217,15.9822,46.3082],[107.071,24,48],[104.062,24,46.6121],[106.895,23.3557,48],[99.0095,15.587,48],[107.229,24,48],[107.391,24,48.1478],[100.555,48,42.0944],[106.881,31.9455,46.9133],[110.131,35.2227,48],[111.558,40.4547,48],[108.663,43.2332,46.3154],[108.784,30.2823,48],[113.372,47.108,48],[113.615,48,48],[109.864,48,46.2699],[96.7162,48,28.5453],[112.571,39.117,48],[109.944,29.2427,48],[99.3192,48,34.0931],[114.045,48,48],[113.485,38.6049,49.1215],[110.843,28.4821,49.1762],[114.456,48,48.3878],[102.349,58.0794,48],[111.025,52.6046,46.2259],[111.442,57.482,48],[114.099,49.7733,48],[114.699,48.8655,48],[108.602,72,48],[112.684,72,53.2808],[115.284,48.6815,48.6841],[106.383,83.339,48],[114.025,87.6733,58.9818],[109.35,96,63.3046],[109.35,96,63.3046],[99.9447,112.749,72],[97.1045,115.197,72],[97.8045,116.561,73.9788],[122.118,-36.8894,35.025]],\"centers\":[[-132,-36,36],[-108,-84,36],[-108,-60,36],[-108,-36,36],[-108,-36,60],[-108,-12,36],[-108,-12,60],[-108,12,36],[-108,12,60],[-108,36,36],[-108,36,60],[-108,60,36],[-108,60,60],[-108,84,36],[-108,84,60],[-108,108,60],[-108,108,84],[-84,-84,12],[-84,-84,36],[-84,-84,60],[-84,-60,12],[-84,-60,36],[-84,-60,60],[-84,-36,36],[-84,-36,60],[-84,-36,84],[-84,-12,12],[-84,-12,36],[-84,-12,60],[-84,-12,84],[-84,12,-12],[-84,12,12],[-84,12,36],[-84,12,60],[-84,36,-12],[-84,36,12],[-84,36,36],[-84,60,-12],[-84,60,12],[-84,60,36],[-84,60,60],[-84,84,12],[-84,84,36],[-84,84,60],[-84,108,36],[-84,108,60],[-84,108,84],[-60,-84,12],[-60,-84,36],[-60,-84,60],[-60,-60,12],[-60,-60,36],[-60,-60,60],[-60,-60,84],[-60,-36,-12],[-60,-36,12],[-60,-36,36],[-60,-36,60],[-60,-36,84],[-60,-12,-36],[-60,-12,-12],[-60,-12,12],[-60,-12,36],[-60,-12,60],[-60,-12,84],[-60,12,-36],[-60,12,-12],[-60,12,12],[-60,12,36],[-60,12,60],[-60,12,84],[-60,36,-36],[-60,36,-12],[-60,36,12],[-60,36,36],[-60,36,60],[-60,60,-36],[-60,60,-12],[-60,60,12],[-60,60,36],[-60,60,60],[-60,84,-12],[-60,84,12],[-60,84,36],[-60,84,60],[-60,108,36],[-60,108,60],[-36,-60,-12],[-36,-60,12],[-36,-60,36],[-36,-60,60],[-36,-60,84],[-36,-60,108],[-36,-36,-36],[-36,-36,-12],[-36,-36,12],[-36,-36,36],[-36,-36,60],[-36,-36,84],[-36,-36,108],[-36,-12,-36],[-36,-12,-12],[-36,-12,12],[-36,-12,36],[-36,-12,60],[-36,-12,84],[-36,-12,108],[-36,12,-60],[-36,12,-36],[-36,12,-12],[-36,12,12],[-36,12,36],[-36,12,60],[-36,12,84],[-36,36,-60],[-36,36,-36],[-36,36,-12],[-36,36,12],[-36,36,36],[-36,36,60],[-36,60,-60],[-36,60,-36],[-36,60,-12],[-36,60,12],[-36,60,36],[-36,60,60],[-36,84,-36],[-36,84,-12],[-36,84,12],[-36,84,36],[-36,84,60],[-36,108,-12],[-36,108,12],[-36,108,36],[-12,-60,-12],[-12,-60,12],[-12,-60,36],[-12,-60,60],[-12,-60,84],[-12,-60,108],[-12,-60,132],[-12,-60,156],[-12,-36,-36],[-12,-36,-12],[-12,-36,12],[-12,-36,36],[-12,-36,60],[-12,-36,84],[-12,-36,108],[-12,-36,132],[-12,-36,156],[-12,-12,-36],[-12,-12,-12],[-12,-12,12],[-12,-12,36],[-12,-12,60],[-12,-12,84],[-12,-12,108],[-12,-12,132],[-12,12,-60],[-12,12,-36],[-12,12,-12],[-12,12,12],[-12,12,36],[-12,12,60],[-12,12,84],[-12,36,-60],[-12,36,-36],[-12,36,-12],[-12,36,12],[-12,36,36],[-12,36,60],[-12,36,84],[-12,60,-60],[-12,60,-36],[-12,60,-12],[-12,60,12],[-12,60,36],[-12,60,60],[-12,84,-36],[-12,84,-12],[-12,84,12],[-12,84,36],[-12,84,60],[-12,108,-12],[-12,108,12],[-12,108,36],[12,-60,-12],[12,-60,12],[12,-60,36],[12,-60,60],[12,-60,84],[12,-60,108],[12,-60,132],[12,-60,156],[12,-36,-36],[12,-36,-12],[12,-36,12],[12,-36,36],[12,-36,60],[12,-36,84],[12,-36,108],[12,-36,132],[12,-36,156],[12,-12,-36],[12,-12,-12],[12,-12,12],[12,-12,36],[12,-12,60],[12,-12,84],[12,-12,108],[12,-12,132],[12,12,-60],[12,12,-36],[12,12,-12],[12,12,12],[12,12,36],[12,12,60],[12,12,84],[12,36,-60],[12,36,-36],[12,36,-12],[12,36,12],[12,36,36],[12,36,60],[12,36,84],[12,60,-60],[12,60,-36],[12,60,-12],[12,60,12],[12,60,36],[12,60,60],[12,84,-36],[12,84,-12],[12,84,12],[12,84,36],[12,84,60],[12,108,-12],[12,108,12],[12,108,36],[36,-60,-12],[36,-60,12],[36,-60,36],[36,-60,60],[36,-60,84],[36,-60,108],[36,-36,-36],[36,-36,-12],[36,-36,12],[36,-36,36],[36,-36,60],[36,-36,84],[36,-36,108],[36,-12,-36],[36,-12,-12],[36,-12,12],[36,-12,36],[36,-12,60],[36,-12,84],[36,-12,108],[36,12,-60],[36,12,-36],[36,12,-12],[36,12,12],[36,12,36],[36,12,60],[36,12,84],[36,36,-60],[36,36,-36],[36,36,-12],[36,36,12],[36,36,36],[36,36,60],[36,60,-60],[36,60,-36],[36,60,-12],[36,60,12],[36,60,36],[36,60,60],[36,84,-36],[36,84,-12],[36,84,12],[36,84,36],[36,84,60],[36,108,-12],[36,108,12],[36,108,36],[60,-84,12],[60,-84,36],[60,-84,60],[60,-60,12],[60,-60,36],[60,-60,60],[60,-60,84],[60,-36,-12],[60,-36,12],[60,-36,36],[60,-36,60],[60,-36,84],[60,-12,-36],[60,-12,-12],[60,-12,12],[60,-12,36],[60,-12,60],[60,-12,84],[60,12,-36],[60,12,-12],[60,12,12],[60,12,36],[60,12,60],[60,12,84],[60,36,-36],[60,36,-12],[60,36,12],[60,36,36],[60,36,60],[60,60,-36],[60,60,-12],[60,60,12],[60,60,36],[60,60,60],[60,84,-12],[60,84,12],[60,84,36],[60,84,60],[60,108,36],[60,108,60],[84,-84,12],[84,-84,36],[84,-84,60],[84,-60,12],[84,-60,36],[84,-60,60],[84,-36,36],[84,-36,60],[84,-36,84],[84,-12,12],[84,-12,36],[84,-12,60],[84,-12,84],[84,12,-12],[84,12,12],[84,12,36],[84,12,60],[84,36,-12],[84,36,12],[84,36,36],[84,60,-12],[84,60,12],[84,60,36],[84,60,60],[84,84,12],[84,84,36],[84,84,60],[84,108,36],[84,108,60],[84,108,84],[108,-84,36],[108,-60,36],[108,-36,36],[108,-36,60],[108,-12,36],[108,-12,60],[108,12,36],[108,12,60],[108,36,36],[108,36,60],[108,60,36],[108,60,60],[108,84,36],[108,84,60],[108,108,60],[108,108,84],[132,-36,36]],\"boxes\":[[[5,[[0,1,2],[0,2,3]]],[8,[[2,4,5],[1,4,2]]],[9,[[2,6,3],[2,5,6]]],[10,[[0,3,6],[0,6,1],[1,6,4],[4,6,5]]]],[[5,[[7,8,9,10]]],[9,[[9,11,10],[8,12,11,9]]],[10,[[10,11,12],[7,10,12],[7,12,8]]]],[[5,[[7,13,14,8]]],[9,[[8,14,15,12]]],[10,[[7,12,15],[7,15,13],[7,8,12],[13,15,14]]]],[[5,[[0,16,17,18,1],[0,3,14,13,16]]],[8,[[4,19,20,5],[1,18,21,19,4]]],[9,[[3,6,22,15,14],[5,20,23,22,6]]],[10,[[0,1,6],[1,4,6],[0,6,3],[4,5,6],[16,22,17],[13,22,16],[17,22,23],[17,23,24],[13,15,22],[13,14,15],[19,23,20],[19,21,24],[19,24,23],[17,24,18],[18,24,21]]]],[[5,[[17,25,18]]],[8,[[18,25,26,21]]],[10,[[17,24,25],[24,26,25],[21,26,24],[17,18,24],[18,21,24]]]],[[8,[[19,27,28,29,20],[19,21,27]]],[9,[[20,29,30,23]]],[10,[[23,30,24],[24,30,31],[19,20,23],[19,24,21],[19,23,24],[28,30,29],[28,31,30],[21,24,27],[27,31,28],[24,31,27]]]],[[8,[[27,32,33,28],[21,26,32,27]]],[10,[[24,32,26],[24,31,32],[31,33,32],[21,24,26],[28,33,31],[27,28,31],[21,27,24],[24,27,31]]]],[[0,[[34,35,36],[35,39,37,38],[34,40,39,35]]],[8,[[28,41,35,29],[35,41,42,36]]],[9,[[35,44,43],[29,35,45,30],[35,43,45],[35,38,46,47,44]]],[10,[[36,45,43],[34,36,43],[36,42,45],[34,43,44],[34,44,40],[40,44,47],[31,45,42],[30,45,31],[28,29,30],[28,30,31],[39,40,47],[39,47,46],[37,39,46],[37,46,38],[28,31,41],[31,42,41]]]],[[0,[[37,48,38]]],[8,[[28,33,49,41],[41,49,42]]],[9,[[38,48,46]]],[10,[[31,49,33],[31,42,49],[28,31,33],[37,46,48],[37,38,46],[28,41,31],[31,41,42]]]],[[0,[[50,51,52],[53,54,55,56],[37,39,54,57],[39,40,58,54],[54,58,59,55],[55,62,60,61],[51,62,55,59,52]]],[9,[[53,63,64,65,66,54],[54,66,67,68,57],[46,68,67,47],[55,69,64,63,56],[55,61,70,69]]],[10,[[52,59,66],[50,52,65],[52,66,65],[40,47,58],[47,66,58],[58,66,59],[47,67,66],[37,46,39],[39,46,47],[39,47,40],[50,69,51],[50,65,64],[50,64,69],[51,69,62],[62,69,70],[60,62,70],[53,56,63],[37,53,57],[46,57,68],[37,57,46],[60,70,61]]]],[[0,[[53,56,71],[37,57,72,48],[60,73,61]]],[9,[[53,71,63],[57,68,72],[46,48,72,68],[56,63,71],[61,73,70]]],[10,[[37,48,46],[60,70,73],[37,57,53],[53,63,56],[37,46,57],[46,68,57],[60,61,70]]]],[[0,[[50,74,75,76,51],[75,77,76],[60,62,76,78],[51,76,62]]],[9,[[76,81,79,80,78],[64,82,65],[76,77,83,84,81],[64,69,85,82],[69,70,80,79,85]]],[10,[[50,81,74],[50,85,81],[50,65,85],[74,81,84],[74,84,86],[79,81,85],[65,82,85],[50,51,69],[51,62,69],[50,64,65],[50,69,64],[60,70,62],[62,70,69],[83,86,84],[74,86,75],[75,83,77],[75,86,83],[60,78,80],[60,80,70]]]],[[0,[[74,87,75],[75,87,88,89,77],[60,78,90,73]]],[9,[[78,80,90],[77,89,83],[70,73,90,80]]],[10,[[74,86,87],[86,88,87],[60,73,70],[83,88,86],[83,89,88],[75,77,83],[74,75,86],[75,83,86],[60,70,80],[60,80,78]]]],[[9,[[91,92,93],[83,93,92,84]]],[10,[[86,92,91],[84,92,86],[83,84,86],[83,86,93],[86,91,93]]]],[[0,[[88,94,95,89],[94,96,97,95]]],[9,[[91,93,95,97,98],[83,89,95,93]]],[10,[[86,94,88],[86,91,94],[91,98,94],[94,98,96],[83,88,89],[83,86,88],[96,98,99],[86,93,91],[83,93,86]]]],[[0,[[96,100,101,97]]],[9,[[102,103,104],[97,101,104,103,98]]],[10,[[96,103,105],[96,98,103],[102,105,103],[96,99,98],[101,105,104],[102,104,105]]]],[[0,[[100,106,107,101],[106,108,107]]],[9,[[107,108,109],[102,104,107,109],[101,107,104]]],[10,[[102,106,105],[106,109,108],[102,109,106],[101,104,105],[102,105,104]]]],[[9,[[110,111,112],[111,113,114,112]]],[10,[[110,112,114],[110,114,115],[113,115,114],[110,113,111],[110,115,113]]]],[[5,[[7,10,117,116]]],[9,[[10,11,111,110,118,117],[11,12,113,111]]],[10,[[7,12,10],[10,12,11],[110,115,118],[115,119,118],[7,116,113],[113,116,119],[7,113,12],[113,119,115],[110,111,113],[110,113,115],[116,117,119],[117,118,119]]]],[[5,[[116,117,121,120]]],[9,[[117,118,121]]],[10,[[118,119,121],[119,120,121],[116,120,119],[116,119,117],[117,119,118]]]],[[9,[[113,122,114]]],[10,[[114,122,115],[113,114,115],[113,115,122]]]],[[5,[[123,124,125],[7,116,125,124,13]]],[9,[[12,15,126,127,122,113],[126,128,127]]],[10,[[7,13,15],[7,15,12],[127,128,129],[122,127,129],[115,122,119],[119,122,129],[7,113,116],[7,12,113],[113,119,116],[113,115,119],[123,126,124],[123,129,126],[13,124,15],[15,124,126],[126,129,128],[113,122,115],[123,125,129],[116,129,125],[116,119,129]]]],[[5,[[123,125,130,131],[116,120,130,125]]],[10,[[119,130,120],[119,129,130],[129,131,130],[116,119,120],[123,131,129],[123,129,125],[116,125,129],[116,129,119]]]],[[5,[[16,124,123,17],[13,124,16]]],[9,[[15,22,126],[22,23,132,128,126]]],[10,[[17,24,23],[16,17,22],[17,23,22],[13,16,22],[13,22,15],[128,132,129],[129,132,133],[13,15,124],[123,124,126],[15,126,124],[123,126,129],[126,128,129],[23,133,132],[23,24,133],[123,129,133],[17,123,133],[17,133,24]]]],[[5,[[17,123,131,134,135,25]]],[8,[[25,135,136,26]]],[10,[[17,25,24],[24,25,26],[131,133,134],[129,133,131],[133,137,134],[123,129,131],[26,136,133],[133,136,137],[24,26,133],[17,24,133],[17,133,123],[123,133,129],[134,137,135],[135,137,136]]]],[[5,[[134,138,135]]],[8,[[135,138,139,136]]],[10,[[134,137,138],[137,139,138],[136,139,137],[134,135,137],[135,136,137]]]],[[9,[[140,141,142]]],[10,[[141,143,142],[140,143,141],[140,142,143]]]],[[9,[[23,30,144,145,132],[140,142,145,144]]],[10,[[23,24,30],[24,31,30],[132,145,133],[142,146,145],[133,145,146],[142,143,146],[23,132,133],[23,133,24],[30,31,144],[31,146,144],[140,144,146],[140,146,143],[140,143,142],[24,133,31],[31,133,146]]]],[[8,[[32,147,33],[26,136,148,149,147,32]]],[10,[[31,32,33],[24,26,32],[24,32,31],[133,148,137],[133,146,148],[146,149,148],[26,133,136],[24,133,26],[133,137,136],[33,147,146],[146,147,149],[31,33,146],[24,31,133],[31,146,133],[136,137,148]]]],[[8,[[136,139,148]]],[10,[[137,148,139],[136,137,139],[136,148,137]]]],[[9,[[150,151,152,153],[152,154,153]]],[10,[[151,155,152],[152,155,154],[150,155,151],[150,153,155],[153,154,155]]]],[[9,[[150,153,157,156],[140,157,153,154,141]]],[10,[[141,154,155],[141,158,143],[141,155,158],[140,141,143],[150,156,158],[150,158,155],[150,155,153],[153,155,154],[156,157,158],[140,143,157],[143,158,157]]]],[[0,[[34,36,160,159],[34,159,40]]],[8,[[36,42,161,162,160]]],[9,[[43,44,163,156,157],[30,45,144],[43,157,140,144,45],[44,47,163]]],[10,[[34,40,44],[34,44,43],[34,43,36],[36,45,42],[36,43,45],[40,47,44],[31,42,45],[30,31,45],[146,162,161],[143,158,162],[143,162,146],[30,144,31],[31,144,146],[140,146,144],[140,143,146],[158,159,160],[158,160,162],[156,159,158],[156,163,159],[40,159,163],[40,163,47],[156,158,157],[140,157,143],[143,157,158],[31,146,42],[42,146,161]]]],[[8,[[33,147,164,165,49],[147,149,164],[42,49,165,161]]],[10,[[31,49,42],[31,33,49],[146,164,149],[146,165,164],[146,161,165],[33,146,147],[31,146,33],[146,149,147],[42,161,146],[31,42,146]]]],[[9,[[150,166,167,151]]],[10,[[151,167,155],[155,167,168],[150,151,155],[166,168,167],[150,155,166],[155,168,166]]]],[[9,[[150,156,169,170,166],[171,172,173],[172,174,175,173],[169,175,174,170]]],[10,[[155,168,158],[158,168,176],[150,158,156],[150,155,158],[166,170,168],[170,174,172],[170,172,176],[168,170,176],[171,176,172],[150,166,155],[155,166,168],[156,158,169],[169,173,175],[169,176,173],[158,176,169],[171,173,176]]]],[[0,[[50,52,178,179,177],[178,180,179],[159,160,181,180,178],[40,159,178,58],[58,178,59],[52,59,178]]],[8,[[160,162,181]]],[9,[[156,163,169],[65,171,173,66],[66,173,175,67],[47,67,175,169,163]]],[10,[[50,65,52],[52,65,66],[52,66,59],[40,58,47],[58,59,66],[47,58,66],[47,66,67],[176,177,179],[176,179,180],[158,180,181],[158,176,180],[158,181,162],[40,163,159],[156,159,163],[158,160,159],[156,158,159],[158,162,160],[40,47,163],[171,177,176],[50,177,171],[50,171,65],[156,169,158],[169,175,173],[169,173,176],[158,169,176],[171,176,173]]]],[[9,[[182,183,184],[166,185,186,167],[187,188,189,190],[191,192,193,194],[193,195,196,194],[185,196,195,186],[183,190,189,184],[191,197,198,192],[187,198,197,188]]],[10,[[168,186,182],[182,186,199],[182,198,183],[182,199,198],[183,198,190],[167,186,168],[186,195,199],[187,190,198],[192,198,199],[166,167,168],[182,184,189],[168,182,200],[182,194,200],[182,197,194],[182,189,197],[166,168,200],[194,196,200],[188,197,189],[191,194,197]]]],[[9,[[201,202,203],[182,184,204,203,202],[166,170,185],[188,205,206,189],[171,207,191,194,172],[172,194,196,174],[170,174,196,185],[184,189,206,208,204],[191,207,209,197],[188,197,209,205]]],[10,[[176,202,201],[176,201,210],[168,182,202],[168,202,176],[166,168,170],[170,172,174],[168,176,170],[170,176,172],[171,172,176],[201,203,210],[203,204,210],[204,208,210],[168,200,182],[182,200,194],[182,194,197],[182,189,184],[182,197,189],[166,200,168],[194,200,196],[188,189,197],[191,197,194],[205,209,206],[206,210,208],[176,206,209],[176,210,206],[171,209,207],[171,176,209]]]],[[0,[[50,177,211,74]]],[9,[[79,81,206,205],[65,82,207,171],[81,84,208,206],[82,85,209,207],[79,205,209,85]]],[10,[[74,86,84],[50,74,81],[74,84,81],[50,81,85],[50,85,65],[79,85,81],[65,85,82],[177,210,212],[176,210,177],[210,213,212],[50,65,171],[50,171,177],[171,176,177],[84,86,213],[84,213,208],[208,213,210],[176,206,210],[206,208,210],[205,206,209],[176,209,206],[171,207,209],[171,209,176],[74,212,86],[86,212,213]]]],[[0,[[74,211,214,215,87],[87,215,88]]],[10,[[74,87,86],[86,87,88],[212,213,214],[213,215,214],[86,88,215],[86,215,213],[74,86,212],[86,213,212]]]],[[9,[[201,203,217,216],[203,204,218,217],[204,208,218]]],[10,[[201,216,210],[201,210,203],[203,210,204],[204,210,208],[210,216,217],[210,217,218],[208,210,218]]]],[[9,[[216,217,220,219],[91,221,220,217,218,92],[84,92,218,208]]],[10,[[84,86,92],[86,91,92],[213,216,219],[213,219,222],[210,216,213],[208,210,213],[84,208,213],[84,213,86],[219,220,222],[220,221,222],[210,217,216],[210,218,217],[208,218,210],[91,213,221],[86,213,91],[213,222,221]]]],[[0,[[214,223,215],[88,215,223,224,94],[94,224,225,226,96],[225,227,226]]],[9,[[91,98,221]]],[10,[[94,96,98],[91,94,98],[86,88,94],[86,94,91],[213,223,214],[213,224,223],[213,222,224],[222,225,224],[222,227,225],[86,215,88],[86,213,215],[213,214,215],[222,226,227],[96,226,98],[98,226,221],[221,226,222],[91,221,213],[213,221,222],[86,91,213]]]],[[9,[[219,220,229,228],[220,221,229]]],[10,[[219,228,222],[219,222,220],[220,222,221],[221,222,229],[222,228,229]]]],[[0,[[96,226,230,100],[226,227,231,232,230]]],[9,[[231,233,234,232],[102,234,233,228,229,103],[98,103,229,221]]],[10,[[96,105,103],[102,103,105],[96,103,98],[227,233,231],[222,233,227],[222,228,233],[96,98,226],[221,222,226],[222,227,226],[98,221,226],[222,229,228],[221,229,222],[230,232,235],[102,105,230],[102,230,235]]]],[[0,[[100,230,106],[106,230,232,108]]],[9,[[108,232,234,109],[102,109,234]]],[10,[[106,108,109],[102,105,106],[102,106,109],[102,230,105],[230,235,232],[102,235,230]]]],[[9,[[110,112,237,236],[112,114,237]]],[10,[[110,114,112],[110,115,114],[114,236,237],[114,115,236],[110,236,115]]]],[[9,[[110,236,238,118]]],[10,[[110,118,115],[115,118,119],[115,238,236],[115,119,238],[110,115,236],[118,238,119]]]],[[5,[[120,121,239]]],[9,[[118,238,239,121]]],[10,[[119,121,120],[118,121,119],[120,239,238],[119,120,238],[118,119,238]]]],[[9,[[236,237,241,240],[114,122,242,243,241,237],[242,244,245,243],[244,246,247,245]]],[10,[[114,115,122],[241,243,248],[243,245,248],[245,249,248],[245,247,249],[114,236,115],[114,237,236],[246,249,247],[236,248,244],[244,248,249],[236,244,242],[122,236,242],[115,236,122],[244,249,246]]]],[[9,[[236,240,250,238],[122,127,242],[127,128,251,244,242],[244,251,246]]],[10,[[115,119,122],[122,129,127],[119,129,122],[127,129,128],[248,249,250],[249,252,250],[115,238,119],[115,236,238],[128,129,251],[246,251,249],[249,251,252],[129,252,251],[115,122,236],[122,242,236],[236,244,248],[236,242,244],[244,249,248],[244,246,249],[238,250,252],[119,238,129],[129,238,252]]]],[[5,[[130,253,254,255,131],[120,239,256,253,130]]],[6,[[254,258,257,255]]],[9,[[238,250,256,239]]],[10,[[129,130,131],[119,120,130],[119,130,129],[250,253,256],[250,254,253],[252,258,254],[250,252,254],[252,259,258],[120,238,239],[119,238,120],[131,255,252],[252,255,257],[129,131,252],[252,257,259],[119,129,238],[238,252,250],[129,252,238],[257,258,259]]]],[[6,[[257,258,260]]],[10,[[258,259,260],[257,260,259],[257,259,258]]]],[[9,[[261,262,263]]],[10,[[262,264,263],[261,264,262],[261,263,264]]]],[[9,[[261,263,265,266],[246,267,266,265,247]]],[10,[[263,264,268],[263,268,265],[247,265,268],[247,268,249],[246,247,249],[261,266,264],[266,267,268],[264,266,268],[261,264,263],[246,268,267],[246,249,268]]]],[[9,[[128,132,269,251],[246,251,269,267]]],[10,[[128,129,132],[129,133,132],[249,268,252],[252,268,270],[128,251,129],[246,249,251],[129,251,252],[249,252,251],[132,133,269],[267,269,268],[133,270,269],[268,269,270],[246,267,268],[246,268,249],[129,252,133],[133,252,270]]]],[[5,[[131,255,271,134]]],[6,[[255,257,271]]],[10,[[131,134,133],[133,134,137],[129,131,133],[252,270,259],[259,270,272],[131,252,255],[129,252,131],[252,257,255],[252,259,257],[133,137,270],[137,272,270],[129,133,252],[133,270,252],[134,271,272],[257,259,271],[259,272,271],[134,272,137]]]],[[5,[[134,271,273,138]]],[6,[[257,260,274,273,271]]],[8,[[138,273,275,139],[273,274,276,275]]],[10,[[134,138,137],[137,138,139],[260,272,274],[259,272,260],[272,276,274],[257,259,260],[272,275,276],[137,139,275],[137,275,272],[134,137,272],[134,272,271],[257,271,259],[259,271,272]]]],[[9,[[277,278,279]]],[10,[[278,280,279],[277,280,278],[277,279,280]]]],[[9,[[261,283,284,281,282,262],[277,279,282,281],[283,285,284]]],[10,[[262,282,264],[279,286,282],[264,282,286],[279,280,286],[261,262,264],[284,285,286],[281,284,286],[277,281,286],[277,286,280],[277,280,279],[261,264,283],[283,286,285],[264,286,283]]]],[[9,[[261,266,283],[141,285,283,266,267,142]]],[10,[[141,142,143],[264,286,268],[268,286,287],[261,264,266],[266,268,267],[264,268,266],[141,286,285],[141,143,287],[141,287,286],[261,283,264],[283,285,286],[264,283,286],[142,267,268],[142,287,143],[142,268,287]]]],[[9,[[132,145,269],[142,267,269,145]]],[10,[[132,133,145],[133,146,145],[142,145,146],[142,146,143],[268,287,270],[270,287,288],[132,269,133],[133,269,270],[267,268,269],[268,270,269],[143,146,287],[146,288,287],[142,268,267],[142,143,287],[142,287,268],[133,270,146],[146,270,288]]]],[[8,[[148,289,149]]],[10,[[146,148,149],[133,137,148],[133,148,146],[270,288,272],[272,288,290],[133,270,137],[137,270,272],[288,289,290],[146,149,289],[146,289,288],[133,146,270],[146,288,270],[137,272,148],[148,290,289],[148,272,290]]]],[[2,[[291,292,293,294]]],[6,[[291,295,292]]],[8,[[139,275,296,289,148],[275,276,294,293,296]]],[10,[[137,139,148],[272,294,276],[290,291,294],[272,290,294],[290,295,291],[137,275,139],[137,272,275],[272,276,275],[290,293,292],[290,292,295],[290,296,293],[289,296,290],[148,289,290],[137,148,272],[148,290,272]]]],[[9,[[297,298,299,300],[277,300,299,278]]],[10,[[298,301,299],[278,299,280],[280,299,301],[277,278,280],[297,301,298],[297,300,301],[277,280,300],[280,301,300]]]],[[9,[[151,302,303,152],[302,304,303],[297,300,303,304],[281,284,303],[277,281,303,300],[152,303,284,285,154]]],[10,[[151,152,155],[152,154,155],[280,301,286],[286,301,305],[277,286,281],[281,286,284],[284,286,285],[277,280,286],[151,155,302],[302,305,304],[155,305,302],[297,304,301],[301,304,305],[297,301,300],[277,300,280],[280,300,301],[154,285,286],[154,305,155],[154,286,305]]]],[[9,[[141,154,285]]],[10,[[141,155,154],[141,158,155],[141,143,158],[286,305,287],[287,305,306],[141,285,286],[141,287,143],[141,286,287],[155,158,305],[158,306,305],[154,286,285],[154,155,305],[154,305,286],[143,287,158],[158,287,306]]]],[[8,[[161,307,162]]],[10,[[143,162,158],[143,146,162],[146,161,162],[287,306,288],[288,306,308],[143,287,146],[146,287,288],[306,307,308],[158,162,307],[158,307,306],[143,158,287],[158,306,287],[146,307,161],[146,288,307],[288,308,307]]]],[[5,[[309,310,311,312]]],[8,[[164,313,314,165],[149,289,313,164],[161,165,314,312,311,307]]],[10,[[146,165,161],[146,164,165],[146,149,164],[288,309,290],[288,310,309],[288,308,310],[146,289,149],[146,288,289],[288,290,289],[308,311,310],[307,311,308],[288,307,308],[146,161,307],[146,307,288],[312,314,315],[290,309,312],[290,312,315],[289,290,315]]]],[[2,[[292,316,293]]],[5,[[309,312,316,317]]],[6,[[292,295,317,316]]],[8,[[313,316,314],[289,296,316,313],[293,316,296],[312,314,316]]],[10,[[290,317,295],[290,309,317],[290,292,293],[290,293,296],[290,295,292],[289,290,296],[290,312,309],[312,315,314],[290,315,312],[289,315,290]]]],[[9,[[318,319,320],[297,320,319,321,298]]],[10,[[298,321,301],[301,321,322],[297,298,301],[318,322,319],[319,322,321],[297,301,320],[318,320,322],[301,322,320]]]],[[9,[[151,167,323,302],[302,323,318,320,304],[297,304,320]]],[10,[[151,155,167],[155,168,167],[301,322,305],[305,322,324],[151,302,155],[302,304,305],[155,302,305],[297,301,304],[301,305,304],[167,168,323],[318,323,324],[168,324,323],[318,324,322],[318,322,320],[297,320,301],[301,320,322],[155,305,168],[168,305,324]]]],[[10,[[155,158,168],[158,176,168],[305,324,306],[306,324,325],[155,305,158],[158,305,306],[168,176,324],[176,325,324],[155,168,305],[168,324,305],[158,306,176],[176,306,325]]]],[[0,[[177,179,326],[327,328,329,330,331],[179,180,329,328,326],[180,181,329]]],[5,[[329,334,332,333],[329,333,330]]],[8,[[162,307,334,329,181]]],[10,[[176,179,177],[176,180,179],[158,180,176],[158,181,180],[158,162,181],[306,330,308],[308,330,333],[325,331,330],[306,325,330],[325,335,331],[308,333,332],[158,307,162],[158,306,307],[306,308,307],[176,326,325],[176,177,326],[325,326,328],[325,328,327],[325,327,335],[158,176,306],[176,325,306],[327,331,335],[307,308,334],[308,332,334]]]],[[0,[[327,331,336]]],[5,[[310,332,334,311]]],[8,[[307,311,334]]],[10,[[331,335,336],[308,332,310],[307,308,311],[308,310,311],[327,336,335],[327,335,331],[308,334,332],[307,334,308]]]],[[9,[[337,338,339],[318,339,338,340,319],[319,340,321]]],[10,[[322,338,337],[322,340,338],[321,340,322],[318,319,322],[319,321,322],[318,322,339],[322,337,339]]]],[[9,[[341,342,343],[182,343,342,183],[341,344,345,342],[337,339,342,345,346],[167,186,342,323],[318,323,342,339],[187,190,342],[192,342,193],[193,342,195],[186,195,342],[183,342,190],[192,198,342],[187,342,198]]],[10,[[183,190,198],[182,183,198],[168,182,186],[182,199,186],[182,198,199],[167,168,186],[186,199,195],[187,198,190],[192,199,198],[337,346,347],[322,337,324],[324,337,347],[167,323,168],[318,324,323],[168,323,324],[318,322,324],[344,347,345],[345,347,346],[322,339,337],[318,339,322],[182,341,343],[168,324,341],[324,344,341],[168,341,182],[324,347,344]]]],[[9,[[201,348,341,343,202],[182,202,343],[341,348,344]]],[10,[[168,202,182],[176,201,202],[168,176,202],[176,210,201],[324,347,325],[325,347,349],[168,324,176],[176,324,325],[201,210,348],[344,348,347],[347,348,349],[210,349,348],[324,341,344],[168,341,324],[182,343,341],[168,182,341],[324,344,347],[176,325,210],[210,325,349]]]],[[0,[[177,326,350,211],[327,351,328],[326,328,351,350]]],[10,[[177,212,210],[210,212,213],[176,177,210],[325,349,335],[335,349,352],[176,326,177],[325,328,326],[176,325,326],[325,327,328],[325,335,327],[210,213,349],[213,352,349],[176,210,325],[210,349,325],[212,350,213],[213,350,352],[350,351,352],[327,335,351],[335,352,351]]]],[[0,[[211,350,353,214],[327,336,355,354,351],[350,351,354,353]]],[10,[[212,214,213],[335,352,336],[336,352,355],[327,335,336],[213,353,352],[213,214,353],[352,353,354],[352,354,355],[212,213,350],[213,352,350],[350,352,351],[327,351,335],[335,351,352]]]],[[9,[[344,356,357,345],[345,357,346]]],[10,[[347,357,356],[346,357,347],[344,345,347],[345,346,347],[344,347,356]]]],[[9,[[201,216,358,359,348],[344,348,359,356]]],[10,[[201,210,216],[349,359,358],[347,356,359],[347,359,349],[201,348,210],[344,347,348],[210,348,349],[347,349,348],[344,356,347],[210,349,216],[216,349,358]]]],[[9,[[360,361,362],[216,219,363,358]]],[10,[[213,219,216],[210,213,216],[213,222,219],[352,361,360],[352,363,361],[349,363,352],[349,358,363],[210,349,213],[213,349,352],[219,361,363],[219,362,361],[219,222,362],[216,358,349],[210,216,349],[213,362,222],[213,352,362],[352,360,362]]]],[[0,[[214,353,364,223],[223,364,224],[224,364,225],[354,355,365,364],[353,354,364],[225,364,365,366,367,227]]],[9,[[360,362,367,366]]],[10,[[213,214,223],[213,223,224],[222,224,225],[213,224,222],[222,225,227],[352,365,355],[360,366,365],[352,360,365],[213,353,214],[352,354,353],[213,352,353],[352,355,354],[222,227,367],[222,367,362],[352,362,360],[213,222,362],[213,362,352]]]],[[9,[[361,368,369,362],[219,228,369,368,363]]],[10,[[219,222,228],[361,363,368],[219,362,222],[219,361,362],[219,363,361],[222,369,228],[222,362,369]]]],[[0,[[227,367,231]]],[9,[[231,367,362,369,233],[228,233,369]]],[10,[[227,231,233],[222,227,233],[222,233,228],[222,367,227],[222,362,367],[222,369,362],[222,228,369]]]],[[9,[[370,371,372],[371,373,374,372]]],[10,[[373,375,374],[370,375,371],[371,375,373],[370,372,375],[372,374,375]]]],[[3,[[376,377,378],[376,378,380,379],[377,381,378],[378,381,382]]],[9,[[378,382,383],[240,241,378,383],[241,243,378],[243,245,378],[370,372,378,384],[245,247,384,378],[378,385,380],[372,374,385,378]]],[10,[[245,248,249],[241,248,243],[243,248,245],[245,249,247],[374,385,380],[379,380,386],[380,385,386],[374,375,385],[375,386,385],[247,386,384],[370,384,386],[370,386,375],[247,249,386],[370,375,372],[372,375,374],[376,379,386],[376,386,377],[377,382,381],[377,386,382],[249,383,382],[249,382,386],[248,383,249]]]],[[3,[[376,387,388,377],[376,379,387],[389,390,391],[377,388,393,392,381],[381,392,389,391,382]]],[9,[[382,391,390,394,383],[240,383,394,250]]],[10,[[248,250,249],[249,250,252],[386,388,387],[379,386,387],[388,395,393],[386,395,388],[249,252,386],[252,395,386],[377,381,382],[376,377,386],[377,382,386],[376,386,379],[249,382,383],[249,386,382],[248,249,383],[389,392,393],[389,393,395],[252,390,389],[252,389,395],[252,394,390],[250,394,252]]]],[[3,[[396,397,398],[389,399,398,397,390],[400,401,402],[392,393,401,400,403],[389,392,403,399]]],[4,[[396,404,397],[397,404,405]]],[5,[[397,405,406],[253,397,254],[253,256,397]]],[6,[[254,397,406,258]]],[9,[[390,397,394],[250,394,397,256]]],[10,[[252,254,258],[250,253,254],[250,254,252],[250,256,253],[252,258,259],[393,401,402],[393,395,401],[401,407,402],[395,407,401],[252,259,395],[259,407,395],[252,389,390],[252,390,394],[389,395,393],[389,393,392],[252,395,389],[250,252,394],[396,398,399],[396,405,404],[396,399,405],[399,407,406],[399,400,407],[399,403,400],[399,406,405],[400,402,407],[258,406,259],[259,406,407]]]],[[3,[[396,398,410,408,409],[408,410,411],[398,399,410],[400,402,412,410],[400,410,403],[399,403,410],[410,412,413,411]]],[4,[[396,409,414,404],[404,414,415,405]]],[5,[[405,415,416,417,406]]],[6,[[258,406,417,260]]],[10,[[258,260,259],[402,407,412],[412,418,413],[407,418,412],[407,417,416],[407,416,418],[259,260,417],[259,417,407],[396,399,398],[396,404,405],[396,405,399],[399,406,407],[399,400,403],[399,405,406],[399,407,400],[400,407,402],[259,407,406],[258,259,406],[408,411,413],[408,413,409],[409,415,414],[409,418,415],[409,413,418],[415,418,416]]]],[[3,[[408,419,420,409],[408,411,421,419],[411,413,421]]],[4,[[409,420,422,414],[414,422,423,424,415]]],[5,[[415,424,416]]],[10,[[413,419,421],[418,420,419],[413,418,419],[420,423,422],[418,423,420],[418,424,423],[416,424,418],[408,409,413],[409,414,415],[409,418,413],[409,415,418],[408,413,411],[415,416,418]]]],[[9,[[425,426,427],[426,428,429,427]]],[10,[[428,430,429],[425,430,426],[426,430,428],[425,427,430],[427,429,430]]]],[[9,[[262,431,432,371,370,263],[425,427,432,431],[427,429,433,432],[371,432,433,373]]],[10,[[262,263,264],[429,430,433],[373,433,434],[430,434,433],[373,434,375],[370,371,375],[371,373,375],[262,264,431],[425,431,434],[264,434,431],[425,434,430],[425,430,427],[427,430,429],[370,375,434],[263,370,434],[263,434,264]]]],[[9,[[263,370,384,265],[247,265,384]]],[10,[[247,268,265],[263,265,268],[263,268,264],[247,249,268],[375,434,386],[386,434,435],[370,375,386],[370,386,384],[247,384,386],[247,386,249],[264,268,434],[268,435,434],[263,264,434],[263,434,370],[370,434,375],[249,386,268],[268,386,435]]]],[[10,[[249,252,268],[252,270,268],[386,435,395],[395,435,436],[249,386,252],[252,386,395],[268,270,435],[270,436,435],[249,268,386],[268,435,386],[252,395,270],[270,395,436]]]],[[10,[[252,259,270],[259,272,270],[395,436,407],[407,436,437],[252,395,259],[259,395,407],[270,272,436],[272,437,436],[252,270,395],[270,436,395],[259,407,272],[272,407,437]]]],[[2,[[438,439,440]]],[5,[[416,441,439,417]]],[6,[[260,417,439,274]]],[8,[[274,439,438,276],[439,441,442,443],[439,443,440]]],[10,[[260,274,272],[272,274,276],[259,260,272],[407,437,418],[418,437,444],[259,417,260],[407,416,417],[259,407,417],[407,418,416],[437,440,443],[272,440,437],[272,438,440],[272,276,438],[442,444,443],[437,443,444],[259,272,407],[272,437,407],[416,418,441],[418,442,441],[418,444,442]]]],[[4,[[423,445,424]]],[5,[[416,424,445,446,441]]],[8,[[441,446,447,442]]],[10,[[418,448,423],[446,448,447],[418,447,448],[418,444,447],[416,418,424],[418,423,424],[442,447,444],[416,441,418],[418,441,442],[418,442,444]]]],[[9,[[278,449,426,425,279],[426,449,450,428]]],[10,[[278,279,280],[428,450,451],[428,451,430],[425,426,430],[426,428,430],[278,280,451],[278,451,449],[449,451,450],[425,430,451],[279,425,451],[279,451,280]]]],[[9,[[262,282,431],[279,425,431,282]]],[10,[[262,264,282],[279,282,286],[264,286,282],[279,286,280],[430,451,434],[434,451,452],[262,431,264],[425,434,431],[264,431,434],[425,430,434],[280,286,451],[286,452,451],[279,280,451],[279,451,425],[425,451,430],[264,434,286],[286,434,452]]]],[[10,[[264,268,286],[268,287,286],[434,452,435],[435,452,453],[264,434,268],[268,434,435],[286,287,452],[287,453,452],[264,286,434],[286,452,434],[268,435,287],[287,435,453]]]],[[10,[[268,270,287],[270,288,287],[435,453,436],[436,453,454],[268,435,270],[270,435,436],[287,288,453],[288,454,453],[268,287,435],[287,453,435],[270,436,288],[288,436,454]]]],[[10,[[270,272,288],[272,290,288],[436,454,437],[437,454,455],[270,436,272],[272,436,437],[288,290,454],[290,455,454],[270,288,436],[288,454,436],[272,437,290],[290,437,455]]]],[[1,[[456,457,458]]],[2,[[291,294,438,440,458]]],[6,[[291,458,459,295],[457,460,459,458]]],[8,[[276,438,294],[442,461,462,443],[440,443,462,456,458]]],[10,[[290,291,295],[290,294,291],[272,276,294],[272,294,290],[437,456,462],[437,457,456],[455,460,457],[437,455,457],[444,462,461],[437,462,444],[272,438,276],[272,440,438],[272,437,440],[437,443,440],[442,443,444],[437,444,443],[295,459,455],[455,459,460],[290,295,455],[272,290,437],[290,455,437],[442,444,461]]]],[[8,[[442,447,461]]],[10,[[444,461,447],[442,444,447],[442,461,444]]]],[[9,[[463,464,465],[464,466,467,465]]],[10,[[466,468,467],[463,468,464],[464,468,466],[463,465,467],[463,467,468]]]],[[9,[[463,465,470,469],[298,469,470,299],[278,299,470,449],[449,470,471,450],[470,472,471],[465,467,472,470]]],[10,[[298,299,301],[278,280,299],[280,301,299],[450,471,451],[471,472,473],[451,471,473],[467,473,472],[467,468,473],[449,450,451],[278,449,451],[278,451,280],[463,474,468],[298,473,474],[468,474,473],[298,301,473],[463,467,465],[463,468,467],[280,451,301],[301,451,473]]]],[[10,[[280,286,301],[286,305,301],[451,473,452],[452,473,475],[280,451,286],[286,451,452],[301,305,473],[305,475,473],[280,301,451],[301,473,451],[286,452,305],[305,452,475]]]],[[10,[[286,287,305],[287,306,305],[452,475,453],[453,475,476],[286,452,287],[287,452,453],[305,306,475],[306,476,475],[286,305,452],[305,475,452],[287,453,306],[306,453,476]]]],[[10,[[287,288,306],[288,308,306],[453,476,454],[454,476,477],[287,453,288],[288,453,454],[306,308,476],[308,477,476],[287,306,453],[306,476,453],[288,454,308],[308,454,477]]]],[[5,[[309,478,479,310],[478,480,481,479]]],[10,[[288,310,308],[288,309,310],[288,290,309],[454,480,455],[454,477,480],[477,481,480],[288,454,290],[290,454,455],[477,479,481],[308,310,479],[308,479,477],[288,308,454],[308,477,454],[290,478,309],[290,455,478],[455,480,478]]]],[[5,[[309,317,483,482,478],[478,482,480]]],[6,[[295,459,484,483,317],[459,460,484]]],[10,[[290,317,309],[290,295,317],[455,483,484],[455,482,483],[455,480,482],[455,484,460],[295,455,459],[290,455,295],[455,460,459],[455,478,480],[290,309,478],[290,478,455]]]],[[9,[[463,485,486,464],[464,486,487,488,466],[487,489,488]]],[10,[[466,488,468],[488,489,490],[468,488,490],[463,464,468],[464,466,468],[485,487,486],[485,490,487],[487,490,489],[463,468,485],[468,490,485]]]],[[9,[[463,469,491,485],[298,321,491,469]]],[10,[[298,301,321],[301,322,321],[468,490,473],[473,490,492],[463,468,474],[298,474,473],[468,473,474],[298,473,301],[485,491,492],[321,322,491],[322,492,491],[485,492,490],[463,485,468],[468,485,490],[301,473,322],[322,473,492]]]],[[10,[[301,305,322],[305,324,322],[473,492,475],[475,492,493],[301,473,305],[305,473,475],[322,324,492],[324,493,492],[301,322,473],[322,492,473],[305,475,324],[324,475,493]]]],[[10,[[305,306,324],[306,325,324],[475,493,476],[476,493,494],[305,475,306],[306,475,476],[324,325,493],[325,494,493],[305,324,475],[324,493,475],[306,476,325],[325,476,494]]]],[[0,[[330,495,331]]],[5,[[332,496,333],[330,333,496,495]]],[10,[[325,330,331],[325,331,335],[306,330,325],[308,333,330],[306,308,330],[308,332,333],[476,494,477],[477,494,497],[306,476,308],[308,476,477],[325,335,494],[335,497,494],[306,325,476],[325,494,476],[477,497,495],[331,495,335],[335,495,497],[477,495,496],[308,496,332],[308,477,496]]]],[[0,[[331,495,498,336]]],[5,[[310,479,496,332],[479,481,499,498,495,496]]],[10,[[331,336,335],[308,310,332],[477,499,481],[477,497,499],[308,479,310],[308,477,479],[477,481,479],[497,498,499],[335,336,498],[335,498,497],[331,335,495],[335,497,495],[477,496,495],[477,495,497],[308,496,477],[308,332,496]]]],[[9,[[500,501,502,503],[500,503,504],[503,505,504],[485,505,503,486],[486,503,487],[487,503,502,489]]],[10,[[490,502,501],[489,502,490],[485,486,487],[485,487,490],[487,489,490],[490,501,500],[485,490,500],[500,504,505],[485,500,505]]]],[[9,[[337,506,507,508,338],[338,508,340],[500,509,501],[500,504,511,510,509],[504,505,508,507,511],[485,491,508,505],[321,340,508,491]]],[10,[[322,337,338],[322,338,340],[321,322,340],[492,509,510],[490,501,509],[490,509,492],[492,510,512],[485,490,492],[485,492,491],[321,491,322],[322,491,492],[506,512,513],[511,513,512],[510,511,512],[490,500,501],[485,500,490],[500,505,504],[485,505,500],[337,492,506],[322,492,337],[492,512,506]]]],[[9,[[337,346,506]]],[10,[[322,324,337],[337,347,346],[324,347,337],[492,512,493],[493,512,514],[322,492,324],[324,492,493],[346,347,514],[346,514,506],[506,514,512],[337,506,492],[492,506,512],[322,337,492],[324,493,347],[347,493,514]]]],[[10,[[324,325,347],[325,349,347],[493,514,494],[494,514,515],[324,493,325],[325,493,494],[347,349,514],[349,515,514],[324,347,493],[347,514,493],[325,494,349],[349,494,515]]]],[[10,[[325,335,349],[335,352,349],[494,515,497],[497,515,516],[325,494,335],[335,494,497],[349,352,515],[352,516,515],[325,349,494],[349,515,494],[335,497,352],[352,497,516]]]],[[0,[[336,498,517,518,519,355],[518,520,521,519]]],[5,[[498,499,517]]],[9,[[520,522,521]]],[10,[[336,355,352],[335,336,352],[497,517,499],[516,518,517],[497,516,517],[518,522,520],[516,522,518],[335,498,336],[335,497,498],[497,499,498],[352,355,519],[352,519,521],[352,521,522],[352,522,516],[335,352,497],[352,516,497]]]],[[9,[[523,524,525],[523,526,527,524],[524,528,525],[506,528,524,507],[510,511,524,527],[507,524,511]]],[10,[[512,527,526],[510,527,512],[506,513,512],[511,512,513],[510,512,511],[523,525,528],[523,528,526],[512,526,528],[506,512,528]]]],[[9,[[523,525,531,529,530],[523,530,526],[356,532,531,525,528,357],[346,357,528,506]]],[10,[[346,347,357],[347,356,357],[514,530,529],[514,529,533],[512,526,530],[512,530,514],[506,512,514],[346,506,514],[346,514,347],[529,531,533],[531,532,533],[523,528,525],[523,526,528],[512,528,526],[506,528,512],[356,514,532],[347,514,356],[514,533,532]]]],[[9,[[358,534,535,359],[356,359,535,532]]],[10,[[347,359,356],[347,349,359],[349,358,359],[514,533,515],[515,533,536],[347,514,349],[349,514,515],[534,536,535],[532,535,536],[532,536,533],[356,532,514],[514,532,533],[347,356,514],[349,534,358],[349,515,534],[515,536,534]]]],[[8,[[537,538,539]]],[9,[[360,540,539,538,361],[358,363,534]]],[10,[[352,360,361],[352,361,363],[349,363,358],[349,352,363],[516,539,540],[515,539,516],[515,537,539],[515,536,537],[349,515,352],[352,515,516],[536,538,537],[361,538,363],[363,538,534],[534,538,536],[515,534,536],[349,358,534],[349,534,515],[352,540,360],[352,516,540]]]],[[0,[[355,519,365],[365,519,521,366]]],[9,[[360,366,521,522,540]]],[10,[[360,365,366],[352,355,365],[352,365,360],[516,540,522],[352,519,355],[352,521,519],[352,522,521],[352,516,522],[352,540,516],[352,360,540]]]],[[9,[[529,531,542,541],[531,532,542]]],[10,[[529,541,533],[529,533,531],[531,533,532],[532,533,542],[533,541,542]]]],[[9,[[534,543,535],[541,542,545,544],[532,535,543,545,542]]],[10,[[536,541,544],[533,541,536],[534,535,536],[532,536,535],[532,533,536],[533,542,541],[532,542,533],[534,536,543],[536,545,543],[536,544,545]]]],[[8,[[537,546,547,538]]],[9,[[361,538,547,368],[363,368,547,543,534],[544,545,547,546],[543,547,545]]],[10,[[361,368,363],[536,546,537],[536,544,546],[534,536,538],[536,537,538],[361,363,538],[363,534,538],[534,543,536],[536,543,545],[536,545,544]]]],[[9,[[373,548,549,374]]],[10,[[373,374,375],[548,550,549],[373,375,548],[375,550,548],[374,549,375],[375,549,550]]]],[[3,[[379,380,552,551]]],[9,[[380,385,553,552],[374,549,553,385]]],[10,[[379,386,380],[374,380,385],[380,386,385],[374,385,375],[375,385,386],[549,553,552],[551,552,554],[552,553,554],[549,550,553],[550,554,553],[375,386,550],[386,554,550],[374,375,549],[375,550,549],[379,551,386],[386,551,554]]]],[[3,[[387,555,556,557,388],[379,551,555,387],[388,557,393]]],[10,[[386,387,388],[388,393,395],[386,388,395],[379,387,386],[555,558,556],[551,554,555],[554,558,555],[386,395,554],[395,558,554],[379,386,551],[386,554,551],[556,558,557],[393,557,395],[395,557,558]]]],[[3,[[556,559,560,557],[401,560,561,402],[393,557,560,401],[559,562,560],[560,562,563,561]]],[10,[[393,402,401],[401,402,407],[393,401,395],[395,401,407],[556,558,559],[558,562,559],[562,564,563],[558,564,562],[395,407,558],[407,564,558],[393,395,557],[556,557,558],[395,558,557],[402,561,407],[561,563,564],[407,561,564]]]],[[3,[[402,561,565,412],[565,566,567],[565,569,568,566],[561,563,569,565],[412,565,567,413]]],[10,[[402,412,407],[412,413,418],[407,412,418],[563,564,569],[568,569,570],[564,570,569],[407,418,564],[418,570,564],[402,407,561],[561,564,563],[407,564,561],[418,567,566],[566,568,570],[418,566,570],[413,567,418]]]],[[3,[[419,571,572,420],[419,421,573,571],[566,574,575,576,567],[566,568,574],[413,567,576,573,421]]],[4,[[420,572,577,422],[422,577,578,423]]],[10,[[418,419,420],[418,420,423],[420,422,423],[413,421,419],[413,419,418],[568,575,574],[568,570,574],[574,579,575],[570,579,574],[423,578,579],[418,423,570],[423,579,570],[418,566,567],[413,418,567],[566,570,568],[418,570,566],[571,579,572],[571,573,576],[571,576,579],[572,579,577],[575,579,576],[577,579,578]]]],[[3,[[580,581,582],[580,583,584,585,581],[583,586,587,584],[584,587,588],[571,588,572],[571,573,584,588],[575,585,584,576],[573,576,584]]],[4,[[572,588,587,577],[577,587,589,578]]],[7,[[586,590,589,587]]],[10,[[579,581,585],[581,591,582],[579,591,581],[575,579,585],[578,589,579],[589,590,591],[579,589,591],[572,577,579],[571,572,579],[571,576,573],[571,579,576],[575,576,579],[577,578,579],[580,582,591],[580,590,586],[580,586,583],[580,591,590]]]],[[3,[[580,582,592,593],[580,593,583],[583,593,586]]],[7,[[586,593,594,590],[593,595,594],[593,596,595],[592,597,596,593]]],[10,[[582,591,592],[591,597,592],[594,595,596],[590,594,596],[590,596,591],[591,596,597],[580,583,586],[580,586,590],[580,591,582],[580,590,591]]]],[[9,[[428,598,599,429]]],[10,[[428,429,430],[598,600,599],[428,430,598],[430,600,598],[429,599,430],[430,599,600]]]],[[9,[[429,599,601,433],[373,433,601,548]]],[10,[[429,433,430],[373,434,433],[430,433,434],[373,375,434],[599,600,601],[548,601,602],[600,602,601],[548,602,550],[373,548,375],[375,548,550],[430,434,600],[434,602,600],[429,430,599],[430,600,599],[375,550,434],[434,550,602]]]],[[10,[[375,386,434],[386,435,434],[550,602,554],[554,602,603],[375,550,386],[386,550,554],[434,435,602],[435,603,602],[375,434,550],[434,602,550],[386,554,435],[435,554,603]]]],[[10,[[386,395,435],[395,436,435],[554,603,558],[558,603,604],[386,554,395],[395,554,558],[435,436,603],[436,604,603],[386,435,554],[435,603,554],[395,558,436],[436,558,604]]]],[[10,[[395,407,436],[407,437,436],[558,604,564],[564,604,605],[395,558,407],[407,558,564],[436,437,604],[437,605,604],[395,436,558],[436,604,558],[407,564,437],[437,564,605]]]],[[10,[[407,418,437],[418,444,437],[564,605,570],[570,605,606],[407,564,418],[418,564,570],[437,444,605],[444,606,605],[407,437,564],[437,605,564],[418,570,444],[444,570,606]]]],[[2,[[607,608,609]]],[4,[[423,578,610,445]]],[5,[[445,610,611,446]]],[8,[[446,611,612,613,447],[608,613,612,609]]],[10,[[418,448,447],[418,423,448],[446,447,448],[418,447,444],[570,606,579],[579,606,614],[418,570,423],[423,579,578],[423,570,579],[607,614,608],[606,613,608],[606,608,614],[447,613,606],[444,447,606],[418,444,570],[444,606,570],[579,609,612],[579,614,609],[607,609,614],[578,579,610],[610,612,611],[579,612,610]]]],[[2,[[607,609,616,615]]],[4,[[578,589,617,610]]],[5,[[610,617,611]]],[7,[[616,618,619,620],[616,621,618],[589,590,622,617],[617,622,623],[617,623,624],[616,617,624,621]]],[8,[[611,617,612],[609,612,617,616],[615,616,625],[616,620,626,625]]],[10,[[591,620,619],[579,626,620],[579,620,591],[579,614,626],[578,579,589],[589,591,590],[579,591,589],[607,615,625],[607,625,614],[614,625,626],[607,614,609],[579,612,609],[579,609,614],[578,610,579],[610,611,612],[579,610,612],[591,619,618],[591,618,622],[618,623,622],[618,621,624],[618,624,623],[590,591,622]]]],[[7,[[618,627,619],[618,621,628,629,627],[590,594,622],[594,595,630,623,622],[623,630,628,624],[621,624,628],[628,630,632,631],[628,631,629],[595,596,633,632,630],[596,597,633]]],[10,[[619,627,633],[627,629,631],[627,631,632],[627,632,633],[591,619,633],[591,633,597],[590,596,594],[590,591,596],[594,596,595],[591,597,596],[591,618,619],[591,622,618],[618,622,623],[618,624,621],[618,623,624],[590,622,591]]]],[[9,[[428,450,634,635,598],[634,636,635]]],[10,[[428,451,450],[428,430,451],[598,635,600],[635,636,637],[600,635,637],[428,598,430],[430,598,600],[450,451,634],[634,637,636],[451,637,634],[430,600,451],[451,600,637]]]],[[10,[[430,434,451],[434,452,451],[600,637,602],[602,637,638],[430,600,434],[434,600,602],[451,452,637],[452,638,637],[430,451,600],[451,637,600],[434,602,452],[452,602,638]]]],[[10,[[434,435,452],[435,453,452],[602,638,603],[603,638,639],[434,602,435],[435,602,603],[452,453,638],[453,639,638],[434,452,602],[452,638,602],[435,603,453],[453,603,639]]]],[[10,[[435,436,453],[436,454,453],[603,639,604],[604,639,640],[435,603,436],[436,603,604],[453,454,639],[454,640,639],[435,453,603],[453,639,603],[436,604,454],[454,604,640]]]],[[10,[[436,437,454],[437,455,454],[604,640,605],[605,640,641],[436,604,437],[437,604,605],[454,455,640],[455,641,640],[436,454,604],[454,640,604],[437,605,455],[455,605,641]]]],[[1,[[456,642,643,457]]],[2,[[642,645,644]]],[6,[[457,643,646,460],[642,647,646,643]]],[8,[[648,649,650],[648,652,653,651,649],[461,654,642,462],[642,654,645],[456,462,642]]],[9,[[642,644,653,652,647]]],[10,[[437,457,455],[455,457,460],[437,456,457],[437,462,456],[437,444,462],[444,461,462],[641,650,649],[641,649,651],[605,651,606],[605,641,651],[437,605,444],[444,605,606],[455,460,646],[455,646,647],[641,647,648],[647,652,648],[455,647,641],[641,648,650],[437,455,605],[455,641,605],[606,644,645],[606,645,654],[606,651,644],[644,651,653],[444,654,461],[444,606,654]]]],[[2,[[607,655,656,644,645,608]]],[8,[[651,653,656,657],[447,613,654,461],[608,645,654,613],[655,658,657,656]]],[9,[[644,656,653]]],[10,[[444,447,461],[606,657,658],[606,651,657],[606,658,614],[606,614,608],[607,608,614],[606,608,613],[447,606,613],[444,606,447],[606,644,651],[606,645,644],[644,653,651],[606,654,645],[444,654,606],[444,461,654],[607,614,655],[614,658,655]]]],[[2,[[607,615,655]]],[8,[[615,625,659,658,655],[625,626,659]]],[10,[[614,659,626],[614,658,659],[626,659,658],[607,625,615],[607,614,625],[614,626,625],[607,655,614],[614,655,658]]]],[[9,[[466,660,661,467]]],[10,[[466,467,468],[660,662,661],[466,468,660],[468,662,660],[467,661,468],[468,661,662]]]],[[9,[[450,471,634],[471,472,663,636,634],[467,661,663,472]]],[10,[[450,451,471],[471,473,472],[451,473,471],[467,472,473],[467,473,468],[661,664,663],[636,663,664],[636,664,637],[661,662,664],[450,634,451],[634,636,637],[451,634,637],[468,473,662],[473,664,662],[467,468,661],[468,662,661],[451,637,473],[473,637,664]]]],[[10,[[451,452,473],[452,475,473],[637,664,638],[638,664,665],[451,637,452],[452,637,638],[473,475,664],[475,665,664],[451,473,637],[473,664,637],[452,638,475],[475,638,665]]]],[[10,[[452,453,475],[453,476,475],[638,665,639],[639,665,666],[452,638,453],[453,638,639],[475,476,665],[476,666,665],[452,475,638],[475,665,638],[453,639,476],[476,639,666]]]],[[10,[[453,454,476],[454,477,476],[639,666,640],[640,666,667],[453,639,454],[454,639,640],[476,477,666],[477,667,666],[453,476,639],[476,666,639],[454,640,477],[477,640,667]]]],[[5,[[480,668,481]]],[10,[[477,480,481],[454,455,480],[454,480,477],[640,667,641],[641,667,669],[454,640,455],[455,640,641],[667,668,669],[477,481,668],[477,668,667],[454,477,640],[477,667,640],[455,641,480],[480,669,668],[480,641,669]]]],[[5,[[482,483,670],[480,482,670,671,668]]],[6,[[483,484,670],[460,646,670,484],[646,647,670]]],[8,[[648,650,672,670],[648,670,652],[670,673,671],[670,672,674,673]]],[9,[[647,652,670]]],[10,[[455,482,480],[455,483,482],[455,484,483],[455,460,484],[641,672,650],[641,674,672],[641,669,674],[455,646,460],[455,647,646],[641,648,647],[455,641,647],[647,648,652],[641,650,648],[668,671,669],[669,671,673],[669,673,674],[480,668,669],[455,480,641],[480,669,641]]]],[[9,[[466,488,675,660],[488,489,676,675]]],[10,[[466,468,488],[488,490,489],[468,490,488],[660,675,662],[675,676,677],[662,675,677],[466,660,468],[468,660,662],[489,490,676],[490,677,676],[468,662,490],[490,662,677]]]],[[10,[[468,473,490],[473,492,490],[662,677,664],[664,677,678],[468,662,473],[473,662,664],[490,492,677],[492,678,677],[468,490,662],[490,677,662],[473,664,492],[492,664,678]]]],[[10,[[473,475,492],[475,493,492],[664,678,665],[665,678,679],[473,664,475],[475,664,665],[492,493,678],[493,679,678],[473,492,664],[492,678,664],[475,665,493],[493,665,679]]]],[[10,[[475,476,493],[476,494,493],[665,679,666],[666,679,680],[475,665,476],[476,665,666],[493,494,679],[494,680,679],[475,493,665],[493,679,665],[476,666,494],[494,666,680]]]],[[10,[[476,477,494],[477,497,494],[666,680,667],[667,680,681],[476,666,477],[477,666,667],[494,497,680],[497,681,680],[476,494,666],[494,680,666],[477,667,497],[497,667,681]]]],[[5,[[481,668,682,683,499]]],[8,[[682,684,685,683]]],[10,[[477,499,497],[477,481,499],[667,684,669],[667,685,684],[667,681,685],[477,668,481],[477,667,668],[667,669,668],[681,683,685],[497,499,683],[497,683,681],[477,497,667],[497,681,667],[668,669,682],[669,684,682]]]],[[5,[[668,671,682]]],[8,[[671,673,686,684,682],[673,674,686]]],[10,[[669,686,674],[669,684,686],[674,686,684],[668,669,671],[669,673,671],[669,674,673],[668,682,669],[669,682,684]]]],[[9,[[501,687,688,502],[489,502,688,676]]],[10,[[489,490,502],[490,501,502],[677,688,687],[676,688,677],[489,676,490],[490,676,677],[490,677,501],[501,677,687]]]],[[9,[[501,509,689,687],[509,510,690,689]]],[10,[[490,509,501],[492,510,509],[490,492,509],[492,512,510],[678,687,689],[689,690,691],[678,689,691],[677,687,678],[490,677,492],[492,677,678],[510,512,690],[512,691,690],[501,687,677],[490,501,677],[492,678,512],[512,678,691]]]],[[10,[[492,493,512],[493,514,512],[678,691,679],[679,691,692],[492,678,493],[493,678,679],[512,514,691],[514,692,691],[492,512,678],[512,691,678],[493,679,514],[514,679,692]]]],[[10,[[493,494,514],[494,515,514],[679,692,680],[680,692,693],[493,679,494],[494,679,680],[514,515,692],[515,693,692],[493,514,679],[514,692,679],[494,680,515],[515,680,693]]]],[[8,[[694,695,696,697],[696,698,699,697]]],[9,[[698,700,699]]],[10,[[494,497,515],[497,516,515],[680,694,681],[680,693,694],[693,695,694],[494,680,497],[497,680,681],[693,696,695],[693,698,696],[515,698,693],[515,516,698],[516,700,698],[494,515,680],[515,693,680],[681,694,697],[681,697,699],[497,699,516],[516,699,700],[497,681,699]]]],[[0,[[517,701,518],[518,701,520]]],[5,[[499,683,701,517]]],[8,[[694,697,701,702],[697,699,701],[683,685,702,701]]],[9,[[520,701,699,700,522]]],[10,[[518,520,522],[516,517,518],[516,518,522],[497,517,516],[497,499,517],[681,702,685],[681,694,702],[497,683,499],[497,681,683],[681,685,683],[516,522,700],[681,697,694],[681,699,697],[497,699,681],[497,516,699],[516,700,699]]]],[[9,[[526,703,704,527],[510,527,704,690]]],[10,[[510,512,527],[512,526,527],[691,704,703],[690,704,691],[510,690,512],[512,690,691],[512,691,526],[526,691,703]]]],[[9,[[529,705,530],[526,530,705,706,703]]],[10,[[512,530,526],[514,529,530],[512,514,530],[514,533,529],[692,703,706],[692,706,707],[691,703,692],[512,691,514],[514,691,692],[529,533,705],[705,707,706],[533,707,705],[526,703,691],[512,526,691],[514,692,533],[533,692,707]]]],[[10,[[514,515,533],[515,536,533],[692,707,693],[693,707,708],[514,692,515],[515,692,693],[533,536,707],[536,708,707],[514,533,692],[533,707,692],[515,693,536],[536,693,708]]]],[[8,[[695,709,696],[537,539,698,696,709,710]]],[9,[[539,540,700,698]]],[10,[[515,537,536],[515,539,537],[515,516,539],[516,540,539],[693,709,695],[695,709,710],[693,710,709],[693,708,710],[693,695,696],[693,696,698],[515,698,516],[516,698,700],[515,693,698],[537,710,708],[536,537,708],[515,536,693],[536,708,693],[516,700,540]]]],[[9,[[522,700,540]]],[10,[[516,522,540],[516,700,522],[516,540,700]]]],[[9,[[529,541,711,712,705],[705,712,706]]],[10,[[529,533,541],[707,712,711],[706,712,707],[529,705,533],[705,706,707],[533,705,707],[533,707,541],[541,707,711]]]],[[9,[[541,544,713,711]]],[10,[[533,536,541],[536,544,541],[708,711,713],[707,711,708],[533,707,536],[536,707,708],[541,711,707],[533,541,707],[536,708,544],[544,708,713]]]],[[8,[[537,710,714,546]]],[9,[[544,546,714,713]]],[10,[[536,546,544],[536,537,546],[708,714,710],[708,713,714],[536,708,537],[537,708,710],[544,713,708],[536,544,708]]]],[[9,[[715,716,717,718],[548,716,715,549]]],[10,[[548,549,550],[717,719,718],[548,550,716],[716,719,717],[550,719,716],[715,718,719],[549,715,550],[550,715,719]]]],[[3,[[551,552,720,721]]],[9,[[552,553,715,718,720],[549,715,553]]],[10,[[551,554,552],[549,552,553],[552,554,553],[549,553,550],[550,553,554],[720,722,721],[718,722,720],[718,719,722],[550,554,719],[554,722,719],[549,550,715],[715,719,718],[550,719,715],[551,721,554],[554,721,722]]]],[[3,[[723,724,725],[555,726,556],[551,721,725,724,726,555]]],[10,[[555,556,558],[551,555,554],[554,555,558],[721,725,723],[721,722,725],[723,725,727],[722,727,725],[554,558,722],[558,727,722],[551,554,721],[554,722,721],[723,727,724],[724,727,726],[556,726,558],[558,726,727]]]],[[3,[[728,729,730,731],[723,728,731,724],[556,726,731,559],[724,731,726],[559,731,730,732,562],[562,732,563]]],[10,[[556,559,558],[558,559,562],[562,563,564],[558,562,564],[723,728,729],[723,727,728],[728,733,729],[727,733,728],[558,564,727],[564,733,727],[723,724,727],[724,726,727],[556,558,726],[558,727,726],[729,733,730],[730,733,732],[563,732,564],[564,732,733]]]],[[3,[[729,734,735,730],[568,569,735,736],[730,735,732],[563,732,735,569],[734,737,736,735]]],[10,[[568,570,569],[563,569,564],[564,569,570],[729,733,734],[734,738,737],[733,738,734],[564,570,733],[570,738,733],[729,730,733],[730,732,733],[563,564,732],[564,733,732],[568,736,570],[736,737,738],[570,736,738]]]],[[3,[[739,740,741,742],[739,743,744,740],[574,745,575],[568,736,746,745,574],[736,737,742,741,746]]],[4,[[743,747,748,744],[747,749,750,748]]],[10,[[568,574,575],[574,575,579],[568,574,570],[570,574,579],[737,739,742],[738,743,739],[737,738,739],[743,749,747],[738,749,743],[570,749,738],[570,579,749],[579,750,749],[568,570,736],[736,738,737],[570,738,736],[579,740,744],[740,746,741],[740,745,746],[579,745,740],[579,744,748],[575,745,579],[579,748,750]]]],[[3,[[751,752,753],[751,753,754,755],[740,752,751,741],[740,744,752],[581,751,755,582],[581,585,751],[575,745,751,585],[745,746,751],[741,751,746]]],[4,[[744,748,753,752],[748,750,756,753]]],[7,[[753,756,757,754]]],[10,[[581,582,591],[579,585,581],[579,581,591],[575,585,579],[579,756,750],[579,591,756],[591,757,756],[740,741,746],[740,746,745],[579,744,740],[579,740,745],[579,748,744],[575,579,745],[579,750,748],[754,757,755],[582,755,591],[591,755,757]]]],[[3,[[754,758,755],[582,755,758,592]]],[7,[[758,759,760],[754,757,759,758],[592,758,760,597]]],[10,[[582,592,591],[591,592,597],[591,759,757],[591,760,759],[591,597,760],[754,755,757],[582,591,755],[591,757,755]]]],[[9,[[598,761,762,599],[761,763,764,762]]],[10,[[598,599,600],[763,765,764],[598,600,761],[761,765,763],[600,765,761],[599,762,600],[762,764,765],[600,762,765]]]],[[9,[[599,762,766,767,601],[762,764,766],[716,768,717],[548,601,767,768,716]]],[10,[[599,601,600],[548,602,601],[600,601,602],[548,550,602],[766,769,767],[764,766,767],[764,765,766],[765,769,766],[717,767,768],[767,769,768],[717,768,719],[719,768,769],[716,717,719],[548,716,550],[550,716,719],[600,602,765],[602,769,765],[599,600,762],[762,765,764],[600,765,762],[550,719,602],[602,719,769]]]],[[10,[[550,554,602],[554,603,602],[719,769,722],[722,769,770],[550,719,554],[554,719,722],[602,603,769],[603,770,769],[550,602,719],[602,769,719],[554,722,603],[603,722,770]]]],[[10,[[554,558,603],[558,604,603],[722,770,727],[727,770,771],[554,722,558],[558,722,727],[603,604,770],[604,771,770],[554,603,722],[603,770,722],[558,727,604],[604,727,771]]]],[[10,[[558,564,604],[564,605,604],[727,771,733],[733,771,772],[558,727,564],[564,727,733],[604,605,771],[605,772,771],[558,604,727],[604,771,727],[564,733,605],[605,733,772]]]],[[10,[[564,570,605],[570,606,605],[733,772,738],[738,772,773],[564,733,570],[570,733,738],[605,606,772],[606,773,772],[564,605,733],[605,772,733],[570,738,606],[606,738,773]]]],[[2,[[774,775,776]]],[4,[[749,777,778,750]]],[5,[[777,779,780,778]]],[8,[[775,781,782,776],[779,783,782,781,780]]],[10,[[570,579,606],[579,614,606],[738,784,749],[779,784,783],[738,783,784],[738,773,783],[579,749,750],[570,738,749],[570,749,579],[606,776,782],[614,774,776],[606,614,776],[606,782,783],[606,783,773],[570,606,738],[606,773,738],[614,775,774],[579,781,775],[579,775,614],[579,778,781],[579,750,778],[778,780,781]]]],[[2,[[774,785,786,775]]],[4,[[750,778,787,756]]],[5,[[778,780,787]]],[7,[[619,788,786,620],[787,790,789],[756,787,789,757],[786,788,791,787],[787,791,790]]],[8,[[775,786,787,781],[780,781,787],[620,786,785,626]]],[10,[[579,620,626],[579,591,620],[591,619,620],[579,626,614],[579,750,756],[591,756,757],[579,756,591],[614,785,774],[614,626,785],[579,775,781],[614,774,775],[579,614,775],[579,778,750],[778,781,780],[579,781,778],[591,788,619],[788,790,791],[788,789,790],[591,789,788],[591,757,789]]]],[[7,[[619,627,792,788],[627,629,792],[759,789,790,793,760],[757,789,759],[788,792,791],[790,791,792,793],[631,632,793],[629,631,793,792],[632,633,793],[597,760,793,633]]],[10,[[619,633,627],[591,633,619],[627,631,629],[627,633,632],[627,632,631],[591,597,633],[591,760,597],[591,759,760],[591,757,759],[591,619,788],[591,788,789],[788,790,789],[788,791,790],[591,789,757]]]],[[9,[[598,635,761],[635,636,794,763,761]]],[10,[[598,600,635],[635,637,636],[600,637,635],[763,794,795],[763,795,765],[598,761,600],[761,763,765],[600,761,765],[636,637,794],[637,795,794],[600,765,637],[637,765,795]]]],[[10,[[600,602,637],[602,638,637],[765,795,769],[769,795,796],[600,765,602],[602,765,769],[637,638,795],[638,796,795],[600,637,765],[637,795,765],[602,769,638],[638,769,796]]]],[[10,[[602,603,638],[603,639,638],[769,796,770],[770,796,797],[602,769,603],[603,769,770],[638,639,796],[639,797,796],[602,638,769],[638,796,769],[603,770,639],[639,770,797]]]],[[10,[[603,604,639],[604,640,639],[770,797,771],[771,797,798],[603,770,604],[604,770,771],[639,640,797],[640,798,797],[603,639,770],[639,797,770],[604,771,640],[640,771,798]]]],[[10,[[604,605,640],[605,641,640],[771,798,772],[772,798,799],[604,771,605],[605,771,772],[640,641,798],[641,799,798],[604,640,771],[640,798,771],[605,772,641],[641,772,799]]]],[[1,[[800,801,802,803]]],[2,[[800,804,805],[800,806,807,808,804]]],[6,[[802,809,810,803],[800,803,810,806]]],[8,[[800,805,811],[800,811,812,813],[800,813,801],[649,814,808,807,650],[649,651,814]]],[10,[[641,649,650],[641,651,649],[605,606,651],[605,651,641],[772,801,813],[772,802,801],[799,809,802],[772,799,802],[773,813,812],[772,813,773],[605,772,606],[606,772,773],[799,806,810],[641,806,799],[641,650,806],[650,807,806],[799,810,809],[605,641,772],[641,799,772],[606,804,814],[606,805,804],[804,808,814],[606,811,805],[606,773,811],[773,812,811],[606,814,651]]]],[[2,[[774,776,805,804,815,816],[804,808,815]]],[8,[[776,782,811,805],[782,783,812,811],[808,814,815],[651,657,815,814],[657,658,817,815],[815,817,816]]],[10,[[606,657,651],[606,658,657],[606,614,658],[773,812,783],[614,776,774],[606,782,776],[606,776,614],[606,783,782],[606,773,783],[606,805,811],[606,804,805],[606,814,804],[804,814,808],[606,811,773],[773,811,812],[606,651,814],[614,816,817],[614,774,816],[614,817,658]]]],[[2,[[774,816,785]]],[8,[[658,659,817],[626,785,816,817,659]]],[10,[[614,659,658],[626,658,659],[614,626,659],[614,785,626],[614,774,785],[614,816,774],[614,817,816],[614,658,817]]]],[[9,[[660,818,819,661],[818,820,821,819]]],[10,[[660,661,662],[820,822,821],[660,662,818],[818,822,820],[662,822,818],[661,819,662],[819,821,822],[662,819,822]]]],[[9,[[636,663,823,794],[661,819,824,823,663],[819,821,824]]],[10,[[636,637,664],[636,664,663],[661,663,664],[661,664,662],[794,823,824],[794,824,795],[795,824,825],[821,825,824],[821,822,825],[636,794,637],[637,794,795],[662,664,822],[664,825,822],[661,662,819],[819,822,821],[662,822,819],[637,795,664],[664,795,825]]]],[[10,[[637,638,664],[638,665,664],[795,825,796],[796,825,826],[637,795,638],[638,795,796],[664,665,825],[665,826,825],[637,664,795],[664,825,795],[638,796,665],[665,796,826]]]],[[10,[[638,639,665],[639,666,665],[796,826,797],[797,826,827],[638,796,639],[639,796,797],[665,666,826],[666,827,826],[638,665,796],[665,826,796],[639,797,666],[666,797,827]]]],[[10,[[639,640,666],[640,667,666],[797,827,798],[798,827,828],[639,797,640],[640,797,798],[666,667,827],[667,828,827],[639,666,797],[666,827,797],[640,798,667],[667,798,828]]]],[[5,[[829,830,831]]],[10,[[640,641,667],[641,669,667],[798,829,799],[798,828,829],[828,830,829],[640,798,641],[641,798,799],[828,831,830],[667,669,831],[667,831,828],[640,667,798],[667,828,798],[669,829,831],[641,799,829],[641,829,669]]]],[[2,[[806,832,807]]],[5,[[829,831,834,832,833],[832,835,833]]],[6,[[809,836,832,810],[832,836,835],[806,810,832]]],[8,[[650,807,832,672],[672,832,834,674]]],[10,[[641,672,674],[641,650,672],[641,674,669],[799,833,835],[799,829,833],[799,835,836],[799,836,809],[650,806,807],[641,799,806],[799,810,806],[641,806,650],[799,809,810],[669,834,831],[669,674,834],[641,829,799],[641,669,829],[669,831,829]]]],[[9,[[660,675,818],[675,676,837,820,818]]],[10,[[660,662,675],[675,677,676],[662,677,675],[820,837,838],[820,838,822],[660,818,662],[818,820,822],[662,818,822],[676,677,837],[677,838,837],[662,822,677],[677,822,838]]]],[[10,[[662,664,677],[664,678,677],[822,838,825],[825,838,839],[662,822,664],[664,822,825],[677,678,838],[678,839,838],[662,677,822],[677,838,822],[664,825,678],[678,825,839]]]],[[10,[[664,665,678],[665,679,678],[825,839,826],[826,839,840],[664,825,665],[665,825,826],[678,679,839],[679,840,839],[664,678,825],[678,839,825],[665,826,679],[679,826,840]]]],[[10,[[665,666,679],[666,680,679],[826,840,827],[827,840,841],[665,826,666],[666,826,827],[679,680,840],[680,841,840],[665,679,826],[679,840,826],[666,827,680],[680,827,841]]]],[[10,[[666,667,680],[667,681,680],[827,841,828],[828,841,842],[666,827,667],[667,827,828],[680,681,841],[681,842,841],[666,680,827],[680,841,827],[667,828,681],[681,828,842]]]],[[5,[[830,843,844,845,831]]],[8,[[684,846,847,685],[844,847,846,845]]],[10,[[667,685,681],[667,684,685],[667,669,684],[828,843,830],[828,842,843],[667,831,669],[667,828,831],[828,830,831],[843,847,844],[842,847,843],[681,685,847],[681,847,842],[667,681,828],[681,842,828],[669,845,846],[669,831,845],[669,846,684]]]],[[5,[[831,845,834]]],[8,[[684,686,846],[674,834,845,846,686]]],[10,[[669,686,684],[674,684,686],[669,674,686],[669,834,674],[669,831,834],[669,845,831],[669,846,845],[669,684,846]]]],[[9,[[687,848,849,688],[676,688,849,837]]],[10,[[676,677,688],[677,687,688],[838,849,848],[837,849,838],[676,837,677],[677,837,838],[677,838,687],[687,838,848]]]],[[9,[[687,689,850,851,848],[689,690,850]]],[10,[[678,689,687],[677,678,687],[689,691,690],[678,691,689],[839,848,851],[839,851,852],[838,848,839],[677,838,678],[678,838,839],[690,691,850],[850,852,851],[691,852,850],[687,848,838],[677,687,838],[678,839,691],[691,839,852]]]],[[10,[[678,679,691],[679,692,691],[839,852,840],[840,852,853],[678,839,679],[679,839,840],[691,692,852],[692,853,852],[678,691,839],[691,852,839],[679,840,692],[692,840,853]]]],[[10,[[679,680,692],[680,693,692],[840,853,841],[841,853,854],[679,840,680],[680,840,841],[692,693,853],[693,854,853],[679,692,840],[692,853,840],[680,841,693],[693,841,854]]]],[[5,[[855,856,857]]],[8,[[694,857,856,695]]],[10,[[693,694,695],[680,681,694],[680,694,693],[841,854,842],[842,854,858],[680,841,681],[681,841,842],[855,858,856],[693,856,854],[693,695,856],[854,856,858],[680,693,841],[693,854,841],[681,857,694],[681,842,857],[855,857,858],[842,858,857]]]],[[0,[[859,860,861],[860,862,861]]],[5,[[843,862,860,844],[855,857,860,859,863]]],[8,[[694,702,860,857],[685,847,860,702],[844,860,847]]],[10,[[681,702,694],[681,685,702],[859,861,863],[858,863,861],[858,861,862],[842,862,843],[842,858,862],[843,844,847],[842,843,847],[681,847,685],[681,842,847],[855,863,858],[855,858,857],[681,857,842],[681,694,857],[842,857,858]]]],[[9,[[703,864,865,704],[850,866,851],[690,704,865,866,850]]],[10,[[690,691,704],[691,703,704],[864,866,865],[852,866,864],[851,865,866],[851,866,852],[850,851,852],[690,850,691],[691,850,852],[691,852,703],[703,852,864]]]],[[9,[[703,706,867,864]]],[10,[[692,706,703],[691,692,703],[692,707,706],[853,864,867],[853,867,868],[852,864,853],[691,852,692],[692,852,853],[706,707,867],[707,868,867],[703,864,852],[691,703,852],[692,853,707],[707,853,868]]]],[[10,[[692,693,707],[693,708,707],[853,868,854],[854,868,869],[692,853,693],[693,853,854],[707,708,868],[708,869,868],[692,707,853],[707,868,853],[693,854,708],[708,854,869]]]],[[5,[[855,870,871,856]]],[8,[[695,856,871,872,709],[709,872,873,710]]],[10,[[693,709,710],[693,695,709],[695,710,709],[693,710,708],[858,871,870],[854,872,871],[854,871,858],[854,869,872],[869,873,872],[693,856,695],[693,854,856],[855,856,858],[854,858,856],[710,873,869],[708,710,869],[693,708,854],[708,869,854],[855,858,870]]]],[[5,[[855,863,870]]],[10,[[858,870,863],[855,858,863],[855,870,858]]]],[[9,[[711,874,712],[706,712,874,875,867]]],[10,[[706,707,712],[707,711,712],[867,875,868],[706,867,707],[707,867,868],[707,874,711],[707,868,874],[868,875,874]]]],[[9,[[711,713,876,877,874],[874,877,875]]],[10,[[707,708,711],[708,713,711],[869,877,876],[868,875,877],[868,877,869],[707,868,708],[708,868,869],[868,874,875],[707,711,874],[707,874,868],[708,869,713],[713,869,876]]]],[[8,[[710,873,878,714]]],[9,[[713,714,878,876]]],[10,[[708,714,713],[708,710,714],[869,878,873],[869,876,878],[708,869,710],[710,869,873],[713,876,869],[708,713,869]]]],[[9,[[879,880,881],[717,881,880,718]]],[10,[[717,718,719],[717,719,881],[719,879,881],[719,880,879],[718,880,719]]]],[[3,[[882,883,884],[882,884,885],[720,884,883,721]]],[9,[[884,887,888,886],[884,886,885],[884,889,887],[884,890,889],[879,891,884,880],[884,891,892,890],[718,880,884,720]]],[10,[[720,721,722],[718,720,722],[718,722,719],[887,889,893],[889,890,893],[890,894,893],[890,892,894],[722,891,879],[719,722,879],[722,892,891],[722,894,892],[718,719,880],[719,879,880],[882,885,883],[721,883,722],[722,883,885],[885,886,894],[722,885,894],[886,893,894]]]],[[3,[[895,896,897],[723,725,883,882,898],[882,885,896,895,898],[721,883,725]]],[9,[[886,888,900,899],[885,886,899,897,896]]],[10,[[721,723,725],[723,727,725],[721,725,722],[722,725,727],[893,894,900],[894,901,900],[722,727,894],[727,901,894],[882,883,885],[722,885,883],[721,722,883],[885,894,886],[722,894,885],[886,894,893],[895,897,901],[897,899,901],[727,895,901],[723,898,895],[723,895,727],[899,900,901]]]],[[3,[[902,903,904],[895,897,903,902,905],[728,906,729],[723,898,907,906,728],[895,905,907,898]]],[4,[[903,908,904],[903,909,908]]],[5,[[903,910,909],[903,912,911],[903,911,913]]],[6,[[903,913,914,910]]],[9,[[899,900,912,903],[897,899,903]]],[10,[[723,729,728],[728,729,733],[723,728,727],[727,728,733],[900,911,912],[900,913,911],[901,914,913],[900,901,913],[901,915,914],[727,733,901],[733,915,901],[723,895,898],[727,901,895],[895,901,897],[723,727,895],[897,901,899],[899,901,900],[904,908,909],[902,904,905],[904,909,905],[733,906,905],[905,906,907],[905,909,910],[733,905,910],[729,906,733],[733,910,915],[910,914,915]]]],[[3,[[916,917,918],[902,904,919,916,918],[902,918,905],[729,906,918,734],[906,907,918],[905,918,907],[734,918,917,737]]],[4,[[904,908,920,919],[908,909,921,920]]],[5,[[909,910,923,922,921]]],[6,[[910,914,924,923]]],[10,[[729,734,733],[734,737,738],[733,734,738],[914,915,924],[915,923,924],[733,923,915],[733,922,923],[733,738,922],[902,905,904],[904,909,908],[904,905,909],[905,907,906],[905,910,909],[733,905,906],[733,910,905],[729,733,906],[910,915,914],[733,915,910],[737,917,916],[737,916,919],[919,920,921],[738,919,921],[737,919,738],[738,921,922]]]],[[3,[[739,742,917,916],[739,916,919,743],[737,917,742]]],[4,[[743,919,920,747],[747,920,921,925,749]]],[5,[[921,922,925]]],[10,[[738,739,743],[737,742,739],[737,739,738],[738,743,749],[743,747,749],[738,925,922],[738,749,925],[737,916,917],[737,919,916],[919,921,920],[737,738,919],[738,921,919],[738,922,921]]]],[[9,[[926,927,928],[763,928,927,764]]],[10,[[763,764,765],[763,765,928],[765,926,928],[765,927,926],[764,927,765]]]],[[9,[[926,929,930,927],[879,881,930,929,931,932],[766,930,767],[764,927,930,766],[717,768,930,881],[767,930,768]]],[10,[[764,767,766],[767,768,769],[717,768,767],[766,767,769],[764,766,765],[765,766,769],[717,719,768],[719,769,768],[931,933,932],[719,881,879],[717,881,719],[769,929,926],[765,769,926],[929,933,931],[769,933,929],[764,765,927],[765,926,927],[769,879,932],[769,932,933],[719,879,769]]]],[[9,[[879,932,934,891],[891,934,892]]],[10,[[719,722,769],[722,770,769],[932,933,935],[932,935,934],[892,934,935],[892,935,894],[722,879,891],[722,891,892],[719,879,722],[722,892,894],[769,770,933],[770,935,933],[769,932,879],[719,769,879],[769,933,932],[722,894,770],[770,894,935]]]],[[10,[[722,727,770],[727,771,770],[894,935,901],[901,935,936],[722,894,727],[727,894,901],[770,771,935],[771,936,935],[722,770,894],[770,935,894],[727,901,771],[771,901,936]]]],[[10,[[727,733,771],[733,772,771],[901,936,915],[915,936,937],[727,901,733],[733,901,915],[771,772,936],[772,937,936],[727,771,901],[771,936,901],[733,915,772],[772,915,937]]]],[[2,[[938,939,940]]],[5,[[922,923,940,941]]],[6,[[923,924,942,940]]],[8,[[938,940,942,943],[940,945,944,941],[939,945,940]]],[10,[[733,738,772],[738,773,772],[924,937,942],[915,937,924],[937,943,942],[733,922,738],[733,923,922],[733,915,923],[915,924,923],[937,938,943],[937,939,938],[772,939,937],[772,945,939],[773,944,945],[772,773,945],[733,772,915],[772,937,915],[738,922,941],[738,941,944],[738,944,773]]]],[[4,[[749,925,777]]],[5,[[777,925,922,941,779]]],[8,[[779,941,944,783]]],[10,[[738,784,783],[738,749,784],[779,783,784],[738,783,773],[738,925,749],[738,922,925],[773,783,944],[738,941,922],[738,944,941],[738,773,944]]]],[[9,[[926,928,948,946,947],[763,794,948,928]]],[10,[[763,795,794],[763,765,795],[946,949,947],[765,928,926],[763,928,765],[795,946,948],[794,795,948],[795,949,946],[795,926,947],[795,947,949],[765,926,795]]]],[[9,[[926,947,950,929],[929,950,931]]],[10,[[765,769,795],[769,796,795],[947,949,951],[947,951,950],[931,950,933],[933,950,951],[769,926,929],[929,931,933],[769,929,933],[765,926,769],[795,796,949],[796,951,949],[795,947,926],[765,795,926],[795,949,947],[769,933,796],[796,933,951]]]],[[10,[[769,770,796],[770,797,796],[933,951,935],[935,951,952],[769,933,770],[770,933,935],[796,797,951],[797,952,951],[769,796,933],[796,951,933],[770,935,797],[797,935,952]]]],[[10,[[770,771,797],[771,798,797],[935,952,936],[936,952,953],[770,935,771],[771,935,936],[797,798,952],[798,953,952],[770,797,935],[797,952,935],[771,936,798],[798,936,953]]]],[[10,[[771,772,798],[772,799,798],[936,953,937],[937,953,954],[771,936,772],[772,936,937],[798,799,953],[799,954,953],[771,798,936],[798,953,936],[772,937,799],[799,937,954]]]],[[1,[[801,955,802]]],[2,[[938,956,957,955,939]]],[6,[[802,955,958,809],[955,957,959,958]]],[8,[[938,943,956],[812,944,945,813],[801,813,945,939,955]]],[10,[[772,802,799],[799,802,809],[772,801,802],[772,813,801],[772,773,813],[773,812,813],[937,956,943],[954,957,956],[937,954,956],[954,959,957],[772,939,945],[937,938,939],[772,937,939],[937,943,938],[773,945,944],[772,945,773],[799,809,958],[799,958,959],[799,959,954],[772,799,937],[799,954,937],[773,944,812]]]],[[8,[[783,944,812]]],[10,[[773,783,812],[773,944,783],[773,812,944]]]],[[9,[[960,961,962],[820,962,961,821]]],[10,[[820,821,822],[820,822,962],[822,960,962],[821,960,822],[821,961,960]]]],[[9,[[963,964,965,966],[960,963,966,961],[946,948,966,965],[794,823,966,948],[823,824,966],[821,961,966,824]]],[10,[[794,824,823],[794,795,824],[821,824,825],[795,825,824],[821,825,822],[964,967,965],[946,965,949],[949,965,967],[795,948,946],[795,946,949],[794,948,795],[822,968,960],[825,964,968],[822,825,968],[825,967,964],[821,960,961],[821,822,960],[795,949,825],[825,949,967]]]],[[10,[[795,796,825],[796,826,825],[949,967,951],[951,967,969],[795,949,796],[796,949,951],[825,826,967],[826,969,967],[795,825,949],[825,967,949],[796,951,826],[826,951,969]]]],[[10,[[796,797,826],[797,827,826],[951,969,952],[952,969,970],[796,951,797],[797,951,952],[826,827,969],[827,970,969],[796,826,951],[826,969,951],[797,952,827],[827,952,970]]]],[[10,[[797,798,827],[798,828,827],[952,970,953],[953,970,971],[797,952,798],[798,952,953],[827,828,970],[828,971,970],[797,827,952],[827,970,952],[798,953,828],[828,953,971]]]],[[5,[[829,972,973,830],[972,974,975,973]]],[10,[[828,829,830],[798,799,829],[798,829,828],[953,974,954],[953,975,974],[953,971,975],[798,953,799],[799,953,954],[828,830,973],[971,973,975],[828,973,971],[798,828,953],[828,971,953],[799,972,829],[799,954,972],[954,974,972]]]],[[5,[[829,833,972],[833,835,976,974,972]]],[6,[[809,958,836],[835,836,958,959,976]]],[10,[[799,833,829],[799,835,833],[799,836,835],[799,809,836],[954,976,959],[954,974,976],[799,958,809],[799,959,958],[799,954,959],[799,829,972],[954,972,974],[799,972,954]]]],[[9,[[960,962,978,977],[820,837,978,962]]],[10,[[820,838,837],[820,822,838],[822,962,960],[820,962,822],[837,838,978],[838,977,978],[822,977,838],[822,960,977]]]],[[9,[[963,979,980,964],[960,977,979,963]]],[10,[[822,825,838],[825,839,838],[964,980,967],[967,980,981],[825,968,964],[825,964,967],[822,960,968],[822,968,825],[839,979,977],[979,981,980],[839,981,979],[838,839,977],[822,977,960],[822,838,977],[825,967,839],[839,967,981]]]],[[10,[[825,826,839],[826,840,839],[967,981,969],[969,981,982],[825,967,826],[826,967,969],[839,840,981],[840,982,981],[825,839,967],[839,981,967],[826,969,840],[840,969,982]]]],[[10,[[826,827,840],[827,841,840],[969,982,970],[970,982,983],[826,969,827],[827,969,970],[840,841,982],[841,983,982],[826,840,969],[840,982,969],[827,970,841],[841,970,983]]]],[[0,[[984,985,986]]],[5,[[985,987,988,986],[987,989,988]]],[10,[[827,828,841],[828,842,841],[970,986,971],[971,986,988],[983,984,986],[970,983,986],[983,990,984],[971,988,989],[827,970,828],[828,970,971],[841,842,983],[842,990,983],[827,841,970],[841,983,970],[984,990,985],[828,985,842],[828,987,985],[842,985,990],[828,971,987],[971,989,987]]]],[[0,[[984,991,992,985]]],[5,[[830,973,987,985,992,843],[973,975,989,987]]],[10,[[828,843,842],[828,830,843],[984,990,991],[971,989,975],[828,973,830],[828,971,973],[971,975,973],[990,992,991],[842,843,992],[842,992,990],[828,985,987],[842,990,985],[984,985,990],[828,842,985],[828,987,971],[971,987,989]]]],[[9,[[993,994,995],[977,978,995,994],[848,993,995,849],[837,849,995,978]]],[10,[[837,838,849],[838,848,849],[838,978,977],[837,978,838],[838,993,848],[977,994,993],[838,977,993]]]],[[9,[[996,997,998,999,1000],[998,1001,999],[993,1002,1000,999,994],[979,999,1001,980],[977,994,999,979],[848,851,1002,993]]],[10,[[839,851,848],[838,839,848],[839,852,851],[981,998,997],[981,1001,998],[980,1001,981],[979,980,981],[839,977,979],[839,979,981],[838,977,839],[852,996,1003],[852,1003,1002],[851,852,1002],[977,993,994],[838,848,993],[838,993,977],[839,996,852],[839,997,996],[839,981,997]]]],[[9,[[996,1004,997]]],[10,[[839,840,852],[840,853,852],[997,1004,1005],[981,997,982],[982,997,1005],[839,981,840],[840,981,982],[853,1004,996],[852,853,996],[853,1005,1004],[839,997,981],[839,996,997],[839,852,996],[840,982,853],[853,982,1005]]]],[[10,[[840,841,853],[841,854,853],[982,1005,983],[983,1005,1006],[840,982,841],[841,982,983],[853,854,1005],[854,1006,1005],[840,853,982],[853,1005,982],[841,983,854],[854,983,1006]]]],[[10,[[841,842,854],[842,858,854],[983,1006,990],[990,1006,1007],[841,983,842],[842,983,990],[854,858,1006],[858,1007,1006],[841,854,983],[854,1006,983],[842,990,858],[858,990,1007]]]],[[0,[[859,861,1009,1008],[861,862,992,991,1010,1009]]],[5,[[843,992,862],[859,1008,863]]],[10,[[859,863,861],[858,862,861],[858,861,863],[842,862,858],[842,843,862],[990,1007,991],[991,1007,1010],[842,992,843],[842,990,992],[990,991,992],[1007,1009,1010],[1007,1008,1009],[863,1008,1007],[858,863,1007],[842,858,990],[858,1007,990]]]],[[9,[[996,1000,1012,1011],[1011,1012,1013],[1000,1002,1012],[864,1013,1012,865],[851,866,1012,1002],[865,1012,866]]],[10,[[851,866,865],[864,865,866],[852,864,866],[851,852,866],[852,1003,996],[852,1002,1003],[851,1002,852],[852,996,1011],[864,1011,1013],[852,1011,864]]]],[[9,[[996,1011,1014,1004],[1011,1013,1016,1017,1015,1014],[864,867,1016,1013]]],[10,[[853,867,864],[852,853,864],[853,868,867],[1004,1014,1005],[1005,1014,1015],[853,996,1004],[853,1004,1005],[852,996,853],[867,868,1016],[868,1017,1016],[852,1011,996],[852,864,1011],[864,1013,1011],[853,1017,868],[853,1015,1017],[853,1005,1015]]]],[[9,[[1018,1019,1020,1021],[1015,1017,1021,1020]]],[10,[[853,854,868],[854,869,868],[1006,1020,1019],[1005,1015,1020],[1005,1020,1006],[853,1005,854],[854,1005,1006],[869,1018,1021],[869,1021,1017],[868,869,1017],[853,1015,1005],[853,1017,1015],[853,868,1017],[854,1018,869],[854,1006,1018],[1006,1019,1018]]]],[[5,[[870,1023,1024,1022,871]]],[8,[[871,1022,1025,872],[872,1025,873]]],[9,[[1018,1026,1019]]],[10,[[854,871,872],[854,858,871],[858,870,871],[869,872,873],[854,872,869],[1007,1024,1023],[1007,1026,1024],[1006,1026,1007],[1006,1019,1026],[854,1006,858],[858,1006,1007],[1022,1024,1026],[1018,1022,1026],[869,1025,1022],[869,1022,1018],[869,873,1025],[1006,1018,1019],[854,869,1018],[854,1018,1006],[858,1007,870],[870,1007,1023]]]],[[0,[[1008,1009,1028,1027],[1009,1010,1028]]],[5,[[863,1008,1027,1023,870]]],[10,[[858,863,870],[1007,1028,1010],[1023,1027,1028],[1007,1023,1028],[1007,1009,1008],[863,1007,1008],[1007,1010,1009],[858,1007,863],[870,1023,1007],[858,870,1007]]]],[[9,[[1016,1029,1017],[867,875,1029,1016]]],[10,[[867,868,875],[868,1016,1017],[867,1016,868],[868,1029,875],[868,1017,1029]]]],[[9,[[1018,1021,1030],[1017,1029,1031,1030,1021],[876,1032,877],[875,877,1032,1031,1029]]],[10,[[868,877,875],[868,869,877],[869,876,877],[869,1021,1018],[869,1017,1021],[868,1017,869],[868,1029,1017],[868,875,1029],[869,1018,1030],[1030,1031,1032],[869,1030,1032],[869,1032,876]]]],[[5,[[1022,1024,1033,1034]]],[8,[[1022,1034,1025],[873,1025,1034,878]]],[9,[[1018,1030,1034,1033,1026],[1030,1031,1034],[876,878,1034,1032],[1031,1032,1034]]],[10,[[869,878,876],[869,873,878],[1024,1026,1033],[869,1022,1025],[869,1018,1022],[1018,1026,1022],[1022,1026,1024],[869,1025,873],[869,1030,1018],[1030,1032,1031],[869,1032,1030],[869,876,1032]]]],[[9,[[1035,1036,1037,1038],[1036,1039,1037]]],[10,[[1037,1039,1038],[1038,1039,1040],[1035,1039,1036],[1035,1040,1039],[1035,1038,1040]]]],[[9,[[1035,1038,1042,1041]]],[10,[[1038,1040,1042],[1040,1043,1042],[1035,1041,1040],[1040,1041,1043],[1035,1040,1038],[1041,1042,1043]]]],[[5,[[1044,1045,1046]]],[9,[[1041,1042,1046,1045]]],[10,[[1042,1043,1046],[1043,1044,1046],[1041,1044,1043],[1041,1045,1044],[1041,1043,1042]]]],[[9,[[887,1036,1035,888],[887,889,1048,1047,1039,1036],[889,890,1049,1048],[890,892,1050,1049]]],[10,[[890,893,894],[887,893,889],[889,893,890],[890,894,892],[1039,1047,1040],[1035,1036,1039],[1035,1039,1040],[892,894,1050],[893,1035,1049],[1035,1048,1049],[1035,1047,1048],[1035,1040,1047],[893,1049,894],[894,1049,1050]]]],[[9,[[888,1035,1041,900],[1047,1048,1051],[1048,1049,1053,1052,1051],[1049,1050,1053]]],[10,[[893,900,894],[894,900,901],[1051,1052,1054],[1047,1051,1054],[1040,1047,1043],[1043,1047,1054],[1035,1040,1041],[1040,1043,1041],[894,1053,1050],[894,901,1053],[1052,1053,1054],[901,1054,1053],[893,894,1049],[893,1049,1035],[1035,1047,1040],[1035,1048,1047],[1035,1049,1048],[894,1050,1049],[900,1041,901],[901,1041,1054],[1041,1043,1054]]]],[[5,[[911,912,1045,1044,1055],[911,1055,1056,1057,913]]],[6,[[913,1057,1058,914]]],[9,[[900,1041,1045,912]]],[10,[[900,912,911],[900,911,913],[901,913,914],[900,913,901],[901,914,915],[1043,1055,1044],[1043,1054,1055],[1054,1056,1055],[1041,1044,1045],[1041,1043,1044],[901,1056,1054],[901,1057,1056],[901,1058,1057],[901,915,1058],[900,901,1041],[1041,1054,1043],[901,1054,1041],[914,1058,915]]]],[[6,[[914,1058,924]]],[10,[[914,924,915],[915,924,1058],[914,915,1058]]]],[[9,[[931,1059,932]]],[10,[[931,932,933],[931,933,1059],[932,1059,933]]]],[[9,[[932,1059,1060,934],[892,934,1060,1061,1050]]],[10,[[892,935,934],[932,934,935],[932,935,933],[892,894,935],[892,1050,894],[933,1060,1059],[933,935,1060],[935,1061,1060],[932,933,1059],[935,1050,1061],[894,1050,935]]]],[[9,[[1052,1053,1063,1062],[1050,1061,1063,1053]]],[10,[[894,901,935],[901,936,935],[1052,1062,1054],[1054,1062,1064],[1052,1054,1053],[894,1053,901],[894,1050,1053],[901,1053,1054],[935,1063,1061],[935,936,1063],[1062,1063,1064],[936,1064,1063],[894,935,1050],[935,1061,1050],[901,1054,936],[936,1054,1064]]]],[[5,[[1056,1065,1066,1057]]],[6,[[1057,1066,1058]]],[10,[[901,915,936],[915,937,936],[1056,1064,1065],[1054,1064,1056],[1064,1067,1065],[901,1057,1058],[901,1056,1057],[901,1054,1056],[901,1058,915],[936,937,1064],[937,1067,1064],[901,936,1054],[936,1064,1054],[937,1066,1065],[937,1065,1067],[915,1058,1066],[915,1066,937]]]],[[5,[[1065,1068,1069,1066]]],[6,[[924,1058,1066,1069,942]]],[8,[[942,1069,1070,943],[1068,1071,1070,1069]]],[10,[[924,942,937],[937,942,943],[915,924,937],[1065,1067,1068],[1067,1071,1068],[915,1058,924],[937,943,1070],[1067,1070,1071],[937,1070,1067],[915,1066,1058],[937,1065,1066],[915,937,1066],[937,1067,1065]]]],[[9,[[946,1072,947]]],[10,[[946,947,949],[946,949,1072],[947,1072,949]]]],[[9,[[947,1072,1073,950],[931,950,1073,1074,1075,1059],[1074,1076,1075]]],[10,[[947,950,951],[931,933,950],[933,951,950],[947,951,949],[931,1059,933],[951,1073,1072],[949,951,1072],[951,1074,1073],[951,1076,1074],[947,949,1072],[951,1075,1076],[933,1059,1075],[933,1075,951]]]],[[9,[[1059,1075,1060],[1060,1075,1076,1077,1078,1061]]],[10,[[933,935,951],[935,952,951],[1077,1079,1078],[935,1060,1061],[933,1059,1060],[933,1060,935],[951,1077,1076],[951,952,1077],[952,1079,1077],[933,1075,1059],[933,951,1075],[951,1076,1075],[952,1078,1079],[935,1061,1078],[935,1078,952]]]],[[9,[[1062,1063,1080],[1061,1078,1080,1063]]],[10,[[935,936,952],[936,953,952],[1062,1080,1064],[1078,1081,1080],[1064,1080,1081],[1078,1079,1081],[1062,1064,1063],[935,1063,936],[935,1061,1063],[936,1063,1064],[952,953,1079],[953,1081,1079],[935,1078,1061],[935,952,1078],[952,1079,1078],[936,1064,953],[953,1064,1081]]]],[[8,[[1082,1083,1084]]],[10,[[936,937,953],[937,954,953],[1064,1083,1067],[1064,1081,1083],[1081,1084,1083],[936,1064,937],[937,1064,1067],[1081,1082,1084],[953,954,1082],[953,1082,1081],[936,953,1064],[953,1081,1064],[954,1083,1082],[937,1067,1083],[937,1083,954]]]],[[2,[[956,1085,1086,957]]],[6,[[957,1086,959]]],[8,[[943,1070,1087,1085,956],[1070,1071,1083,1082,1087]]],[10,[[954,957,959],[954,956,957],[937,943,956],[937,956,954],[1067,1083,1071],[937,1070,943],[937,1067,1070],[1067,1071,1070],[954,1085,1087],[954,1086,1085],[954,959,1086],[954,1087,1082],[937,1083,1067],[937,954,1083],[954,1082,1083]]]],[[9,[[964,1088,1089,965],[946,965,1089,1072]]],[10,[[964,965,967],[946,949,965],[949,967,965],[946,1072,949],[964,967,1088],[967,1089,1088],[949,1072,1089],[949,1089,967]]]],[[9,[[1090,1091,1092],[1090,1093,1094,1091],[1088,1092,1091,1089],[1072,1089,1091,1073],[1073,1091,1074],[1074,1091,1094,1095,1076]]],[10,[[949,951,967],[951,969,967],[1093,1096,1094],[1094,1096,1095],[951,1072,1073],[951,1073,1074],[949,1072,951],[951,1074,1076],[967,1092,1088],[969,1090,1092],[967,969,1092],[1090,1096,1093],[969,1096,1090],[949,1089,1072],[949,967,1089],[967,1088,1089],[969,1095,1096],[951,1076,1095],[951,1095,969]]]],[[9,[[1076,1095,1077]]],[10,[[951,952,969],[952,970,969],[1077,1095,1096],[1077,1097,1079],[1077,1096,1097],[952,1077,1079],[951,1076,1077],[951,1077,952],[969,970,1096],[970,1097,1096],[951,1095,1076],[951,969,1095],[969,1096,1095],[952,1079,970],[970,1079,1097]]]],[[8,[[1098,1099,1100]]],[10,[[952,953,970],[953,971,970],[1081,1099,1098],[1079,1097,1099],[1079,1099,1081],[952,1079,953],[953,1079,1081],[1097,1100,1099],[970,971,1100],[970,1100,1097],[952,970,1079],[970,1097,1079],[953,1100,971],[953,1081,1100],[1081,1098,1100]]]],[[5,[[974,1101,1102,975]]],[8,[[1103,1104,1105,1106],[1082,1084,1106,1105],[1098,1100,1102,1101,1104,1103]]],[10,[[953,975,971],[953,974,975],[953,954,974],[1081,1106,1084],[1081,1103,1106],[1081,1098,1103],[953,1082,954],[953,1081,1082],[1081,1084,1082],[971,1102,1100],[971,975,1102],[1081,1100,1098],[953,971,1100],[953,1100,1081],[954,1101,974],[1101,1107,1104],[954,1107,1101],[954,1082,1107]]]],[[2,[[1085,1108,1086]]],[5,[[974,976,1108,1101]]],[6,[[959,1086,1108,976]]],[8,[[1104,1108,1105],[1085,1087,1108],[1082,1105,1108,1087],[1101,1108,1104]]],[10,[[954,976,974],[954,959,976],[954,1086,959],[954,1085,1086],[954,1087,1085],[954,1082,1087],[954,974,1101],[1101,1104,1107],[954,1101,1107],[954,1107,1082]]]],[[9,[[1109,1110,1111],[964,980,1111,1110,1088]]],[10,[[964,967,980],[967,981,980],[964,1088,967],[980,981,1111],[981,1109,1111],[981,1110,1109],[967,1088,1110],[967,1110,981]]]],[[9,[[1090,1092,1110,1109,1112],[1090,1112,1113,1093],[1088,1110,1092]]],[10,[[967,969,981],[969,982,981],[1093,1113,1096],[1096,1113,1114],[969,1092,1090],[1090,1093,1096],[969,1090,1096],[967,1088,1092],[967,1092,969],[982,1112,1109],[981,982,1109],[1112,1114,1113],[982,1114,1112],[967,1110,1088],[967,981,1110],[981,1109,1110],[969,1096,982],[982,1096,1114]]]],[[10,[[969,970,982],[970,983,982],[1096,1114,1097],[1097,1114,1115],[969,1096,970],[970,1096,1097],[982,983,1114],[983,1115,1114],[969,982,1096],[982,1114,1096],[970,1097,983],[983,1097,1115]]]],[[0,[[1116,1117,1118],[1117,1119,1120,1121,1118],[984,986,1120,1119,1122],[1120,1123,1121]]],[5,[[986,988,1120],[988,989,1124,1120]]],[8,[[1099,1123,1120,1124,1100]]],[10,[[983,986,984],[983,984,990],[970,986,983],[971,988,986],[970,971,986],[971,989,988],[1115,1116,1118],[1115,1118,1121],[1097,1121,1123],[1097,1115,1121],[1097,1123,1099],[970,1100,971],[970,1097,1100],[1097,1099,1100],[1115,1117,1116],[983,1117,1115],[983,1119,1117],[983,1122,1119],[983,990,1122],[970,983,1097],[983,1115,1097],[984,1122,990],[971,1124,989],[971,1100,1124]]]],[[0,[[984,1122,991]]],[5,[[975,1102,1124,989]]],[8,[[1100,1124,1102]]],[10,[[984,991,990],[971,975,989],[971,1102,975],[971,1100,1102],[990,991,1122],[984,990,1122],[971,1124,1100],[971,989,1124]]]],[[9,[[997,1125,998],[998,1125,1109,1111,1001],[980,1001,1111]]],[10,[[981,997,998],[981,998,1001],[980,981,1001],[981,1111,1109],[980,1111,981],[981,1125,997],[981,1109,1125]]]],[[9,[[1126,1127,1128],[1127,1129,1130,1128],[997,1004,1131,1128,1125],[1126,1128,1131,1132],[1109,1125,1128,1112],[1112,1128,1133,1113],[1128,1135,1134],[1128,1136,1137],[1128,1137,1138],[1128,1138,1133],[1128,1130,1135],[1128,1139,1136],[1128,1134,1139]]],[10,[[981,982,997],[997,1005,1004],[982,1005,997],[1114,1133,1129],[1129,1133,1140],[1129,1139,1130],[1129,1140,1139],[1130,1139,1135],[1113,1133,1114],[1133,1138,1140],[1134,1135,1139],[1136,1139,1140],[982,1109,1112],[1112,1113,1114],[982,1112,1114],[981,1109,982],[1004,1005,1131],[1005,1132,1131],[981,1125,1109],[981,997,1125],[982,1126,1132],[982,1114,1126],[1126,1129,1127],[1114,1129,1126],[982,1132,1005]]]],[[9,[[1126,1141,1142,1143,1127],[1127,1143,1129],[1126,1132,1141]]],[10,[[982,983,1005],[983,1006,1005],[1115,1143,1142],[1115,1142,1144],[1114,1129,1143],[1114,1143,1115],[982,1114,983],[983,1114,1115],[1005,1141,1132],[1005,1006,1141],[1141,1144,1142],[1006,1144,1141],[1126,1127,1129],[1114,1126,1129],[982,1126,1114],[982,1132,1126],[982,1005,1132],[983,1115,1006],[1006,1115,1144]]]],[[0,[[1116,1145,1146,1117],[1117,1146,1147,1119],[1119,1147,1122]]],[10,[[983,990,1006],[990,1007,1006],[1116,1144,1148],[1115,1144,1116],[1144,1149,1148],[983,1117,1119],[983,1115,1117],[1115,1116,1117],[983,1119,1122],[983,1122,990],[1006,1007,1144],[1007,1149,1144],[983,1006,1115],[1006,1144,1115],[1146,1148,1149],[1007,1147,1146],[1007,1146,1149],[990,1122,1147],[990,1147,1007]]]],[[0,[[1145,1150,1151,1146],[1146,1151,1152,1147],[991,1122,1147,1152,1010]]],[10,[[991,1010,1007],[990,991,1007],[1148,1149,1150],[990,1122,991],[1149,1151,1150],[1007,1151,1149],[1007,1152,1151],[1007,1010,1152],[1007,1149,1146],[1146,1149,1148],[1007,1146,1147],[990,1147,1122],[990,1007,1147]]]],[[9,[[1004,1014,1131],[1014,1015,1132,1131]]],[10,[[1004,1005,1014],[1005,1015,1014],[1004,1131,1005],[1005,1131,1132],[1005,1132,1015]]]],[[9,[[1019,1153,1142,1141,1020],[1015,1020,1141,1132]]],[10,[[1005,1020,1015],[1005,1006,1020],[1006,1019,1020],[1142,1153,1144],[1141,1142,1144],[1005,1141,1006],[1005,1132,1141],[1006,1141,1144],[1005,1015,1132],[1006,1153,1019],[1006,1144,1153]]]],[[5,[[1023,1154,1024]]],[9,[[1019,1026,1155,1153]]],[10,[[1007,1023,1024],[1007,1024,1026],[1006,1026,1019],[1006,1007,1026],[1149,1153,1155],[1149,1155,1156],[1144,1153,1149],[1006,1144,1007],[1007,1144,1149],[1024,1154,1155],[1154,1156,1155],[1024,1155,1026],[1006,1153,1144],[1006,1019,1153],[1007,1154,1023],[1007,1149,1154],[1149,1156,1154]]]],[[0,[[1157,1158,1159],[1150,1157,1159,1151],[1027,1028,1159,1160,1161,1162],[1151,1159,1152],[1010,1152,1159,1028],[1158,1160,1159]]],[5,[[1023,1027,1162,1154]]],[10,[[1023,1028,1027],[1007,1010,1028],[1007,1028,1023],[1149,1157,1150],[1149,1158,1157],[1149,1156,1158],[1156,1160,1158],[1156,1161,1160],[1007,1151,1152],[1007,1149,1151],[1149,1150,1151],[1007,1152,1010],[1156,1162,1161],[1154,1162,1156],[1149,1154,1156],[1007,1023,1154],[1007,1154,1149]]]],[[5,[[1024,1154,1163,1033]]],[9,[[1026,1033,1163,1164,1155]]],[10,[[1024,1033,1026],[1155,1164,1156],[1024,1155,1154],[1024,1026,1155],[1154,1155,1156],[1154,1156,1163],[1156,1164,1163]]]],[[0,[[1161,1165,1162]]],[5,[[1154,1162,1165,1166,1163]]],[9,[[1163,1166,1164]]],[10,[[1161,1166,1165],[1156,1166,1161],[1156,1164,1166],[1154,1156,1162],[1156,1161,1162],[1154,1163,1156],[1156,1163,1164]]]],[[9,[[1037,1167,1038],[1037,1039,1168,1167]]],[10,[[1037,1038,1039],[1038,1040,1039],[1039,1040,1168],[1038,1167,1168],[1038,1168,1040]]]],[[5,[[1169,1170,1171,1172]]],[9,[[1038,1167,1173,1172,1171,1042],[1167,1168,1174,1173]]],[10,[[1038,1042,1040],[1040,1042,1043],[1172,1173,1174],[1169,1172,1174],[1168,1169,1174],[1168,1170,1169],[1043,1170,1168],[1040,1043,1168],[1038,1168,1167],[1038,1040,1168],[1043,1171,1170],[1042,1171,1043]]]],[[5,[[1044,1046,1171,1170]]],[9,[[1042,1171,1046]]],[10,[[1043,1046,1044],[1042,1046,1043],[1043,1044,1170],[1042,1043,1171],[1043,1170,1171]]]],[[9,[[1039,1047,1168]]],[10,[[1039,1040,1047],[1039,1168,1040],[1040,1168,1047]]]],[[5,[[1169,1175,1176,1177,1170],[1176,1178,1177]]],[9,[[1047,1051,1180,1179,1174,1168],[1051,1052,1180]]],[10,[[1040,1043,1047],[1047,1054,1051],[1043,1054,1047],[1051,1054,1052],[1169,1174,1179],[1169,1179,1175],[1043,1168,1170],[1168,1169,1170],[1168,1174,1169],[1040,1168,1043],[1175,1179,1176],[1176,1180,1178],[1176,1179,1180],[1054,1178,1180],[1052,1054,1180],[1040,1047,1168],[1054,1170,1177],[1054,1177,1178],[1043,1170,1054]]]],[[5,[[1044,1170,1177,1055],[1055,1177,1178,1056]]],[10,[[1054,1055,1056],[1043,1044,1055],[1043,1055,1054],[1043,1170,1044],[1054,1056,1178],[1054,1177,1170],[1043,1054,1170],[1054,1178,1177]]]],[[5,[[1175,1181,1176],[1176,1181,1182,1178]]],[9,[[1179,1180,1183],[1052,1062,1184,1183,1180]]],[10,[[1052,1054,1062],[1054,1064,1062],[1175,1183,1181],[1175,1179,1183],[1181,1183,1182],[1182,1183,1184],[1182,1184,1185],[1176,1178,1180],[1176,1180,1179],[1175,1176,1179],[1054,1180,1178],[1052,1180,1054],[1062,1064,1184],[1064,1185,1184],[1064,1178,1182],[1064,1182,1185],[1054,1178,1064]]]],[[5,[[1056,1178,1182,1186,1187,1065]]],[8,[[1186,1189,1188,1187]]],[10,[[1056,1065,1064],[1064,1065,1067],[1054,1056,1064],[1182,1185,1186],[1185,1189,1186],[1054,1178,1056],[1064,1189,1185],[1064,1188,1189],[1064,1067,1188],[1064,1182,1178],[1054,1064,1178],[1064,1185,1182],[1065,1187,1067],[1067,1187,1188]]]],[[5,[[1065,1187,1068]]],[8,[[1068,1187,1188,1071]]],[10,[[1065,1068,1067],[1067,1068,1071],[1067,1071,1188],[1065,1067,1187],[1067,1188,1187]]]],[[9,[[1077,1190,1078]]],[10,[[1077,1078,1079],[1077,1079,1190],[1078,1190,1079]]]],[[9,[[1062,1080,1192,1191,1184],[1078,1190,1192,1080]]],[10,[[1062,1064,1080],[1064,1081,1080],[1078,1080,1081],[1078,1081,1079],[1184,1191,1185],[1185,1191,1193],[1062,1184,1064],[1064,1184,1185],[1191,1192,1193],[1081,1193,1192],[1081,1192,1190],[1079,1081,1190],[1078,1079,1190],[1064,1185,1081],[1081,1185,1193]]]],[[8,[[1194,1195,1196],[1083,1188,1189,1196,1195,1084]]],[10,[[1081,1083,1084],[1064,1067,1083],[1064,1083,1081],[1185,1196,1189],[1185,1193,1196],[1193,1194,1196],[1064,1188,1067],[1064,1189,1188],[1064,1185,1189],[1081,1194,1193],[1081,1195,1194],[1081,1084,1195],[1064,1081,1185],[1081,1193,1185],[1067,1188,1083]]]],[[8,[[1071,1188,1083]]],[10,[[1067,1071,1083],[1067,1188,1071],[1067,1083,1188]]]],[[9,[[1093,1197,1198,1094],[1094,1198,1095]]],[10,[[1093,1094,1096],[1094,1095,1096],[1093,1096,1197],[1096,1198,1197],[1095,1198,1096]]]],[[9,[[1197,1199,1200,1198],[1077,1095,1198,1200,1190]]],[10,[[1077,1096,1095],[1077,1097,1096],[1077,1079,1097],[1077,1190,1079],[1096,1097,1197],[1097,1199,1197],[1095,1096,1198],[1096,1197,1198],[1097,1200,1199],[1079,1190,1200],[1079,1200,1097]]]],[[0,[[1201,1202,1203,1204],[1203,1205,1204]]],[8,[[1098,1206,1202,1201,1099]]],[9,[[1199,1207,1208,1209,1200],[1191,1192,1210],[1190,1200,1209,1210,1192],[1207,1211,1208]]],[10,[[1079,1099,1097],[1079,1081,1099],[1081,1098,1099],[1202,1210,1209],[1202,1209,1203],[1202,1206,1210],[1203,1209,1208],[1203,1208,1205],[1205,1208,1211],[1193,1210,1206],[1191,1210,1193],[1191,1193,1192],[1081,1190,1192],[1081,1192,1193],[1079,1190,1081],[1199,1204,1207],[1097,1201,1204],[1097,1204,1199],[1204,1205,1207],[1097,1099,1201],[1205,1211,1207],[1079,1200,1190],[1079,1097,1200],[1097,1199,1200],[1081,1206,1098],[1081,1193,1206]]]],[[8,[[1103,1106,1195,1194,1212],[1084,1195,1106],[1098,1103,1212,1206]]],[10,[[1081,1103,1098],[1081,1106,1103],[1081,1084,1106],[1193,1212,1194],[1193,1206,1212],[1081,1195,1084],[1081,1194,1195],[1081,1193,1194],[1081,1206,1193],[1081,1098,1206]]]],[[9,[[1093,1113,1213,1197]]],[10,[[1093,1096,1113],[1096,1114,1113],[1093,1197,1096],[1113,1114,1213],[1096,1213,1114],[1096,1197,1213]]]],[[9,[[1197,1213,1214,1215,1199],[1216,1217,1218],[1217,1219,1220,1218],[1214,1220,1219,1215]]],[10,[[1096,1097,1114],[1097,1115,1114],[1097,1197,1199],[1096,1197,1097],[1114,1214,1213],[1214,1218,1220],[1115,1218,1214],[1114,1115,1214],[1115,1216,1218],[1096,1213,1197],[1096,1114,1213],[1097,1215,1115],[1097,1199,1215],[1115,1215,1217],[1215,1219,1217],[1115,1217,1216]]]],[[0,[[1116,1118,1222,1223,1221],[1118,1121,1222],[1121,1123,1201,1204,1222],[1204,1205,1224,1222],[1222,1224,1225],[1222,1225,1223]]],[8,[[1099,1201,1123]]],[9,[[1199,1215,1207],[1216,1226,1227,1217],[1217,1227,1228,1219],[1207,1215,1219,1228,1211]]],[10,[[1115,1118,1116],[1115,1121,1118],[1097,1121,1115],[1097,1123,1121],[1097,1099,1123],[1223,1225,1227],[1221,1223,1226],[1223,1227,1226],[1205,1211,1224],[1211,1227,1224],[1224,1227,1225],[1211,1228,1227],[1097,1201,1099],[1097,1204,1201],[1204,1207,1205],[1199,1207,1204],[1097,1199,1204],[1205,1207,1211],[1116,1221,1216],[1216,1221,1226],[1115,1116,1216],[1097,1215,1199],[1215,1217,1219],[1115,1217,1215],[1097,1115,1215],[1115,1216,1217]]]],[[9,[[1129,1229,1130],[1113,1133,1230,1213],[1134,1135,1232,1231],[1136,1233,1234,1137],[1137,1234,1235,1138],[1133,1138,1235,1230],[1130,1229,1232,1135],[1136,1139,1236,1233],[1134,1231,1236,1139]]],[10,[[1130,1135,1139],[1129,1130,1139],[1114,1129,1133],[1129,1140,1133],[1129,1139,1140],[1113,1114,1133],[1133,1140,1138],[1134,1139,1135],[1136,1140,1139],[1113,1213,1114],[1114,1237,1129],[1129,1237,1234],[1129,1234,1236],[1129,1232,1229],[1129,1236,1232],[1114,1213,1237],[1234,1237,1235],[1231,1232,1236],[1233,1236,1234]]]],[[9,[[1142,1238,1143],[1129,1143,1238,1239,1229],[1213,1230,1214],[1231,1232,1241,1240],[1216,1218,1234,1233,1242],[1218,1220,1235,1234],[1214,1230,1235,1220],[1229,1239,1243,1241,1232],[1233,1236,1244,1242],[1231,1240,1244,1236]]],[10,[[1114,1143,1129],[1115,1142,1143],[1114,1115,1143],[1115,1144,1142],[1115,1214,1218],[1214,1220,1218],[1114,1213,1214],[1114,1214,1115],[1115,1218,1216],[1142,1144,1238],[1144,1239,1238],[1144,1243,1239],[1129,1229,1232],[1114,1129,1237],[1129,1234,1237],[1129,1236,1234],[1129,1232,1236],[1114,1237,1213],[1234,1235,1237],[1231,1236,1232],[1233,1234,1236],[1240,1241,1244],[1115,1244,1241],[1144,1241,1243],[1115,1241,1144],[1216,1242,1244],[1115,1216,1244]]]],[[0,[[1116,1221,1245,1145]]],[9,[[1240,1241,1247,1246],[1216,1242,1248,1226],[1241,1243,1249,1247],[1242,1244,1250,1248],[1240,1246,1250,1244]]],[10,[[1116,1148,1144],[1144,1148,1149],[1115,1116,1144],[1221,1247,1245],[1221,1250,1247],[1221,1226,1250],[1245,1247,1249],[1245,1249,1251],[1246,1247,1250],[1226,1248,1250],[1115,1216,1116],[1116,1216,1221],[1216,1226,1221],[1149,1249,1243],[1144,1149,1243],[1149,1251,1249],[1240,1244,1241],[1115,1144,1241],[1144,1243,1241],[1115,1241,1244],[1216,1244,1242],[1115,1244,1216],[1148,1245,1251],[1148,1251,1149]]]],[[0,[[1252,1253,1254],[1145,1245,1253,1252,1150]]],[10,[[1148,1150,1149],[1245,1251,1253],[1251,1254,1253],[1251,1252,1254],[1149,1150,1252],[1149,1252,1251],[1148,1251,1245],[1148,1149,1251]]]],[[9,[[1142,1153,1255,1238],[1238,1255,1256,1239],[1239,1256,1243]]],[10,[[1142,1144,1153],[1142,1238,1144],[1144,1238,1239],[1144,1239,1243],[1144,1255,1153],[1144,1256,1255],[1144,1243,1256]]]],[[9,[[1153,1155,1257,1255],[1255,1257,1258,1259,1260,1256],[1243,1256,1260,1249]]],[10,[[1149,1155,1153],[1144,1149,1153],[1149,1156,1155],[1251,1260,1259],[1249,1260,1251],[1149,1243,1249],[1149,1249,1251],[1144,1243,1149],[1155,1156,1257],[1156,1258,1257],[1144,1255,1256],[1144,1153,1255],[1144,1256,1243],[1149,1258,1156],[1149,1259,1258],[1149,1251,1259]]]],[[0,[[1157,1252,1254,1261,1158],[1150,1252,1157],[1160,1262,1161],[1158,1261,1263,1262,1160]]],[9,[[1258,1264,1259]]],[10,[[1156,1158,1160],[1149,1158,1156],[1149,1157,1158],[1149,1150,1157],[1156,1160,1161],[1251,1261,1254],[1251,1259,1261],[1259,1264,1261],[1261,1264,1263],[1149,1252,1150],[1149,1251,1252],[1251,1254,1252],[1262,1263,1264],[1156,1161,1262],[1258,1262,1264],[1156,1262,1258],[1149,1259,1251],[1149,1258,1259],[1149,1156,1258]]]],[[9,[[1155,1164,1265,1257],[1257,1265,1258]]],[10,[[1155,1156,1164],[1155,1257,1156],[1156,1257,1258],[1156,1265,1164],[1156,1258,1265]]]],[[0,[[1161,1262,1266,1267,1165],[1262,1263,1268,1266]]],[5,[[1165,1267,1269,1166]]],[9,[[1164,1166,1269,1270,1271,1265],[1258,1265,1271,1264]]],[10,[[1161,1165,1166],[1156,1161,1166],[1156,1166,1164],[1263,1271,1272],[1263,1264,1271],[1270,1272,1271],[1156,1262,1161],[1156,1258,1262],[1258,1264,1262],[1262,1264,1263],[1156,1265,1258],[1156,1164,1265],[1266,1273,1267],[1266,1272,1270],[1266,1270,1273]]]],[[0,[[1266,1274,1275,1267],[1266,1268,1274]]],[5,[[1267,1275,1276,1269]]],[9,[[1269,1276,1270]]],[10,[[1270,1274,1272],[1274,1276,1275],[1270,1276,1274],[1266,1267,1273],[1266,1270,1272],[1266,1273,1270]]]],[[5,[[1169,1172,1277,1278]]],[9,[[1172,1173,1277],[1173,1174,1278,1277]]],[10,[[1169,1174,1172],[1172,1174,1173],[1169,1278,1174]]]],[[5,[[1169,1278,1279,1175]]],[9,[[1174,1179,1279,1278]]],[10,[[1169,1175,1179],[1169,1179,1174],[1169,1174,1278],[1175,1279,1179]]]],[[5,[[1175,1279,1281,1280,1181],[1181,1280,1282,1283,1182]]],[8,[[1284,1285,1286,1287],[1282,1285,1284,1288,1283]]],[9,[[1179,1183,1289,1281,1279],[1183,1184,1287,1286,1289]]],[10,[[1175,1181,1183],[1181,1182,1183],[1175,1183,1179],[1182,1185,1184],[1182,1184,1183],[1280,1281,1289],[1280,1289,1282],[1282,1289,1285],[1285,1289,1286],[1175,1179,1279],[1184,1284,1287],[1184,1185,1284],[1185,1288,1284],[1182,1283,1185],[1185,1283,1288]]]],[[5,[[1182,1283,1186]]],[8,[[1186,1283,1288,1189]]],[10,[[1182,1186,1185],[1185,1186,1189],[1185,1189,1288],[1182,1185,1283],[1185,1288,1283]]]],[[8,[[1284,1287,1292,1290,1291],[1284,1291,1288]]],[9,[[1184,1191,1292,1287]]],[10,[[1184,1185,1191],[1185,1193,1191],[1184,1287,1284],[1185,1284,1288],[1184,1284,1185],[1191,1290,1292],[1191,1193,1290],[1193,1291,1290],[1185,1288,1291],[1185,1291,1193]]]],[[8,[[1194,1196,1291,1290],[1189,1288,1291,1196]]],[10,[[1193,1196,1194],[1185,1189,1196],[1185,1196,1193],[1185,1288,1189],[1193,1194,1290],[1185,1291,1288],[1185,1193,1291],[1193,1290,1291]]]],[[0,[[1202,1293,1203],[1293,1296,1294,1295],[1203,1293,1295,1205]]],[8,[[1290,1292,1293,1297],[1202,1206,1297,1293]]],[9,[[1208,1293,1209],[1191,1210,1293,1292],[1209,1293,1210],[1208,1211,1298,1296,1293]]],[10,[[1203,1205,1208],[1203,1208,1209],[1202,1203,1209],[1202,1210,1206],[1202,1209,1210],[1205,1211,1208],[1193,1206,1210],[1191,1193,1210],[1191,1290,1193],[1191,1292,1290],[1294,1298,1295],[1205,1295,1211],[1211,1295,1298],[1294,1296,1298],[1193,1297,1206],[1193,1290,1297]]]],[[0,[[1294,1296,1299]]],[8,[[1194,1290,1297,1212],[1206,1212,1297]]],[9,[[1296,1298,1299]]],[10,[[1193,1212,1206],[1193,1194,1212],[1193,1290,1194],[1294,1299,1298],[1294,1298,1296],[1193,1297,1290],[1193,1206,1297]]]],[[0,[[1221,1223,1300],[1301,1302,1303,1304],[1294,1305,1301,1295],[1205,1295,1301,1224],[1224,1301,1304,1225],[1304,1306,1307,1308],[1223,1225,1304,1308,1300]]],[9,[[1226,1309,1310,1302,1301,1227],[1227,1301,1305,1311,1228],[1211,1228,1311,1298],[1303,1310,1309,1312,1304],[1304,1312,1313,1306]]],[10,[[1221,1226,1223],[1223,1226,1227],[1223,1227,1225],[1205,1224,1211],[1224,1225,1227],[1211,1224,1227],[1211,1227,1228],[1205,1211,1295],[1294,1295,1298],[1211,1298,1295],[1221,1300,1312],[1300,1308,1312],[1221,1309,1226],[1221,1312,1309],[1307,1313,1308],[1308,1313,1312],[1294,1305,1302],[1302,1310,1303],[1294,1298,1305],[1298,1311,1305],[1306,1313,1307]]]],[[0,[[1302,1314,1303],[1294,1299,1315,1305],[1306,1316,1307]]],[9,[[1302,1310,1314],[1305,1315,1311],[1298,1311,1315,1299],[1303,1314,1310],[1306,1313,1316]]],[10,[[1294,1298,1299],[1307,1316,1313],[1302,1303,1310],[1294,1302,1305],[1294,1305,1298],[1298,1305,1311],[1306,1307,1313]]]],[[0,[[1317,1318,1319],[1221,1300,1318,1317,1245],[1307,1320,1318,1308],[1300,1308,1318]]],[9,[[1246,1247,1318,1320,1321],[1226,1248,1309],[1247,1249,1322,1319,1318],[1248,1250,1312,1309],[1246,1321,1313,1312,1250]]],[10,[[1245,1251,1249],[1221,1245,1247],[1245,1249,1247],[1221,1247,1250],[1221,1250,1226],[1246,1250,1247],[1226,1250,1248],[1221,1226,1309],[1221,1309,1312],[1221,1312,1300],[1300,1312,1308],[1307,1308,1313],[1308,1312,1313],[1249,1251,1322],[1317,1319,1322],[1245,1317,1251],[1251,1317,1322],[1307,1321,1320],[1307,1313,1321]]]],[[0,[[1253,1317,1319,1323,1254],[1245,1317,1253],[1307,1316,1324,1320]]],[9,[[1320,1324,1321],[1319,1322,1323],[1313,1321,1324,1316]]],[10,[[1251,1253,1254],[1245,1253,1251],[1307,1313,1316],[1254,1323,1322],[1251,1254,1322],[1251,1322,1317],[1317,1322,1319],[1245,1251,1317],[1307,1320,1321],[1307,1321,1313]]]],[[9,[[1259,1325,1260],[1249,1260,1325,1322]]],[10,[[1249,1251,1260],[1251,1259,1260],[1249,1322,1251],[1251,1325,1259],[1251,1322,1325]]]],[[0,[[1254,1323,1326,1261],[1261,1326,1327,1263]]],[9,[[1259,1264,1327,1326,1325],[1322,1325,1326,1323]]],[10,[[1261,1263,1264],[1259,1261,1264],[1251,1254,1261],[1251,1261,1259],[1251,1322,1254],[1254,1322,1323],[1263,1328,1264],[1251,1325,1322],[1251,1259,1325]]]],[[0,[[1263,1327,1329,1268]]],[9,[[1270,1330,1271],[1264,1271,1330,1329,1327]]],[10,[[1263,1272,1271],[1270,1271,1272],[1263,1271,1264],[1263,1264,1328],[1272,1329,1330],[1270,1272,1330]]]],[[0,[[1274,1331,1275],[1268,1329,1331,1274]]],[5,[[1275,1331,1276]]],[9,[[1270,1276,1331,1330],[1329,1330,1331]]],[10,[[1274,1275,1276],[1270,1272,1274],[1270,1274,1276],[1272,1330,1329],[1270,1330,1272]]]],[[5,[[1280,1281,1332],[1280,1332,1282]]],[8,[[1285,1332,1286],[1282,1332,1285]]],[9,[[1281,1289,1332],[1286,1332,1289]]],[10,[[1280,1289,1281],[1280,1282,1289],[1282,1285,1289],[1285,1286,1289]]]]]}'\n)\n","import { vec3 } from 'gl-matrix'\nimport { FOX_BOXES } from \"./fox-data\"\n\nexport type FoxBox = {\n    cx: number\n    cy: number\n    cz: number\n    bx: number\n    by: number\n    bz: number\n    bw: number\n    start: number\n    end: number\n}\n\nconst ab = vec3.create()\nconst ac = vec3.create()\nconst normal = vec3.create()\nfunction triNormal (a:vec3, b:vec3, c:vec3) {\n    vec3.sub(ab, b, a)\n    vec3.sub(ac, c, a)\n    vec3.cross(normal, ab, ac)\n    vec3.normalize(normal, normal)\n    return normal\n}\n\n// unpacks mesh data from the fox into a webgl-renderable array buffer\n//\n// output vertex format is 16-component float, 4 attributes:\n// \n//  position  = px, py, pz, 1\n//  normal    = nx, ny, nz, 0\n//  color     = r,  g,  b,  1\n//  box index = cx, cy, cz, 0\n//\nexport function unpackFox () {\n    const vbuffer:number[] = []\n    const ibuffer:number[] = []\n    \n    const { colors, lo, hi, verts, centers, boundary } = FOX_BOXES\n\n    const boxes = FOX_BOXES.boxes.map((chunks, offset) => {\n        const start = ibuffer.length\n        const [cx, cy, cz] = centers[offset]\n        const [bx, by, bz] = boundary[offset]\n        const bw = Math.hypot(bx, by, bz)\n        for (const [material, polygons] of chunks) {\n            for (const poly of polygons) {\n                const [ nx, ny, nz ] = triNormal(\n                    verts[poly[0]] as any,\n                    verts[poly[1]] as any,\n                    verts[poly[2]] as any)\n                const [ r, g, b ] = colors[material]\n                const basePtr = vbuffer.length / 16\n                for (const vertIndex of poly) {\n                    const [px, py, pz] = verts[vertIndex]\n                    vbuffer.push(\n                        px, py, pz, 1,\n                        nx, ny, nz, 0,\n                        r / 255, g / 255, b / 255, material === colors.length - 1 ? 1 : 0,\n                        cx, cy, cz, 0\n                    )\n                }\n                for (let i = 2; i < poly.length; ++i) {\n                    ibuffer.push(basePtr, basePtr + i - 1, basePtr + i)\n                }\n            }\n        }\n        return {\n            cx, cy, cz,\n            bx, by, bz, bw,\n            start,\n            end: ibuffer.length\n        }\n    })\n\n    return {\n        vbuffer,\n        ibuffer,\n        boxes,\n        lo: vec3.fromValues(lo[0], lo[1], lo[2]),\n        hi: vec3.fromValues(hi[0], hi[1], hi[2])\n    }\n}","export const FOX_VERT_SHADER = `\nprecision highp float;\nattribute vec4 vPosition;\nattribute vec4 vNormal;\nattribute vec4 vColor;\nattribute vec4 vCenter;\n\nvarying vec3 fColor;\nvarying float fDepth;\n\nuniform float uTick;\nuniform vec3 uEye;\nuniform mat4 uViewProj;\nuniform mat4 uAnimate;\nuniform vec3 uHemisphereAxis;\nuniform vec3 uHemisphereColor0;\nuniform vec3 uHemisphereColor1;\nuniform vec3 uInteriorColor0;\nuniform vec3 uInteriorColor1;\n\nvoid main () {\n    vec3 normal = normalize((uAnimate * vec4(vNormal.xyz, 0)).xyz);\n    vec3 light = mix(uHemisphereColor0, uHemisphereColor1, 0.5 * (1. + dot(normal, uHemisphereAxis)));\n    vec3 interiorColor = mix(uInteriorColor0, uInteriorColor1, \n        fract(dot(vec3(0.7436455, 0.11173, 0.576165), vCenter.xyz)));\n    fColor = light * mix(vColor.rgb, interiorColor, vColor.a);\n    vec4 worldPos = uAnimate * vec4(vPosition.xyz - vCenter.xyz, 1.);\n    fDepth = distance(worldPos.xyz, uEye);\n    gl_Position = uViewProj * worldPos;\n}\n`\n\nexport const FOX_FRAG_SHADER = `\nprecision mediump float;\n\nuniform vec3 uFogColor;\nvarying vec3 fColor;\nvarying float fDepth;\n\nvoid main () {\n    float fogExp = exp(-0.0002 * fDepth);\n    gl_FragColor = vec4(mix(uFogColor, fColor, fogExp), 1.);\n}`","// contains webgl code for rendering 3d fox animation\n\nimport { vec3, mat4, vec4, quat } from 'gl-matrix'\nimport { FoxAnimation } from './fox-animate'\nimport { FoxBox, unpackFox } from './fox-geometry'\nimport { FOX_FRAG_SHADER, FOX_VERT_SHADER } from './fox-shader'\n\nexport class FoxRenderer {\n  public animation: FoxAnimation\n  public animationTick: number = 0\n\n  private initShader(type: number, src: string) {\n    const gl = this.gl\n    const shader = gl.createShader(type)\n    if (!shader) {\n      throw new Error('Error creating vertex shader')\n    }\n    gl.shaderSource(shader, src)\n    gl.compileShader(shader)\n    return shader\n  }\n\n  private initProgram(spec: { vert: string; frag: string }) {\n    const gl = this.gl\n    const vs = this.initShader(gl.VERTEX_SHADER, spec.vert)\n    const fs = this.initShader(gl.FRAGMENT_SHADER, spec.frag)\n    const prog = gl.createProgram()\n    if (!prog) {\n      throw new Error('Error creating shader program')\n    }\n    gl.attachShader(prog, vs)\n    gl.attachShader(prog, fs)\n    gl.linkProgram(prog)\n\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n      console.error('link failed', {\n        prog: gl.getProgramInfoLog(prog),\n        frag: gl.getShaderInfoLog(fs),\n        vert: gl.getShaderInfoLog(vs),\n      })\n    }\n    return prog\n  }\n\n  private foxShader: WebGLProgram\n\n  private vPosition: number\n  private vNormal: number\n  private vColor: number\n  private vCenter: number\n\n  private uAnimate: WebGLUniformLocation\n  private uViewProj: WebGLUniformLocation\n  private uTick: WebGLUniformLocation\n  private uEye: WebGLUniformLocation\n  private uHemisphereAxis: WebGLUniformLocation\n  private uHemisphereColor0: WebGLUniformLocation\n  private uHemisphereColor1: WebGLUniformLocation\n  private uInteriorColor0: WebGLUniformLocation\n  private uInteriorColor1: WebGLUniformLocation\n  private uFogColor: WebGLUniformLocation\n\n  private initFoxShader() {\n    const program = (this.foxShader = this.initProgram({\n      vert: FOX_VERT_SHADER,\n      frag: FOX_FRAG_SHADER,\n    }))\n\n    const gl = this.gl\n\n    this.vPosition = gl.getAttribLocation(program, 'vPosition')\n    this.vNormal = gl.getAttribLocation(program, 'vNormal')\n    this.vColor = gl.getAttribLocation(program, 'vColor')\n    this.vCenter = gl.getAttribLocation(program, 'vCenter')\n\n    this.uAnimate = gl.getUniformLocation(program, 'uAnimate')\n    this.uViewProj = gl.getUniformLocation(program, 'uViewProj')\n    this.uTick = gl.getUniformLocation(program, 'uTick')\n\n    this.uEye = gl.getUniformLocation(program, 'uEye')\n\n    this.uHemisphereAxis = gl.getUniformLocation(program, 'uHemisphereAxis')\n    this.uHemisphereColor0 = gl.getUniformLocation(program, 'uHemisphereColor0')\n    this.uHemisphereColor1 = gl.getUniformLocation(program, 'uHemisphereColor1')\n\n    this.uInteriorColor0 = gl.getUniformLocation(program, 'uInteriorColor0')\n    this.uInteriorColor1 = gl.getUniformLocation(program, 'uInteriorColor1')\n    this.uFogColor = gl.getUniformLocation(program, 'uFogColor')\n  }\n\n  private foxVBuffer: WebGLBuffer\n  private foxIBuffer: WebGLBuffer\n  private foxBoxes: FoxBox[]\n  private foxVertCount: number\n\n  private initGeometry() {\n    const gl = this.gl\n    const { vbuffer, ibuffer, boxes, lo, hi } = unpackFox()\n    this.foxBoxes = boxes\n    this.foxVertCount = ibuffer.length\n\n    vec3.copy(this.lo, lo)\n    vec3.copy(this.hi, hi)\n\n    vec3.add(this.center, this.lo, this.hi)\n    vec3.scale(this.center, this.center, 0.5)\n\n    const foxVerts = gl.createBuffer()\n    if (!foxVerts) {\n      throw new Error('Error allocating fox vertex buffer')\n    }\n    this.foxVBuffer = foxVerts\n    gl.bindBuffer(gl.ARRAY_BUFFER, foxVerts)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vbuffer), gl.STATIC_DRAW)\n\n    const foxFaces = gl.createBuffer()\n    if (!foxFaces) {\n      throw new Error('Error allocating fox face buffer')\n    }\n    this.foxIBuffer = foxFaces\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, foxFaces)\n    gl.bufferData(\n      gl.ELEMENT_ARRAY_BUFFER,\n      new Uint16Array(ibuffer),\n      gl.STATIC_DRAW\n    )\n\n    this.animation = new FoxAnimation(boxes)\n  }\n\n  private bindFoxBuffer() {\n    const gl = this.gl\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.foxVBuffer)\n    if (this.vPosition >= 0) {\n      gl.enableVertexAttribArray(this.vPosition)\n      gl.vertexAttribPointer(this.vPosition, 4, gl.FLOAT, false, 64, 0)\n    }\n    if (this.vNormal >= 0) {\n      gl.enableVertexAttribArray(this.vNormal)\n      gl.vertexAttribPointer(this.vNormal, 4, gl.FLOAT, false, 64, 16)\n    }\n    if (this.vColor >= 0) {\n      gl.enableVertexAttribArray(this.vColor)\n      gl.vertexAttribPointer(this.vColor, 4, gl.FLOAT, false, 64, 32)\n    }\n    if (this.vCenter >= 0) {\n      gl.enableVertexAttribArray(this.vCenter)\n      gl.vertexAttribPointer(this.vCenter, 4, gl.FLOAT, false, 64, 48)\n    }\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.foxIBuffer)\n  }\n\n  public theta = Math.PI / 2\n  public phi = 0\n  public distance = 400\n\n  private eye = vec3.fromValues(0, 0, -2)\n  private center = vec3.fromValues(0, 0, 0)\n  private lo = vec3.fromValues(-1, -1, -1)\n  private hi = vec3.fromValues(1, 1, 1)\n  private view = mat4.identity(mat4.create())\n  private proj = mat4.identity(mat4.create())\n  private viewProj = mat4.identity(mat4.create())\n  private invViewProj = mat4.identity(mat4.create())\n\n  private updateCamera() {\n    // calculate transformations\n    const eye = this.eye\n    const center = this.center\n    const theta = this.theta\n    const phi = this.phi\n    const distance = this.distance\n\n    // calculate center\n    const lo = this.lo\n    const hi = this.hi\n    center[0] = 0.5 * (lo[0] + hi[0])\n    center[1] = 0.5 * (lo[1] + hi[1])\n    center[2] = 0.5 * (lo[2] + hi[2])\n\n    // calculate eye\n    eye[0] = Math.cos(theta) * Math.cos(phi) * distance + center[0]\n    eye[1] = Math.sin(phi) * distance + center[1]\n    eye[2] = Math.sin(theta) * Math.cos(phi) * distance + center[2]\n\n    // calculate view projection matrix\n    mat4.lookAt(mat4.identity(this.view), eye, center, [0, 1, 0])\n    mat4.perspective(\n      mat4.identity(this.proj),\n      Math.PI / 4,\n      this.gl.drawingBufferWidth / this.gl.drawingBufferHeight,\n      0.5,\n      1600\n    )\n    mat4.mul(this.viewProj, this.proj, this.view)\n    mat4.invert(this.invViewProj, this.viewProj)\n  }\n\n  public foxLookAt(x: number, y: number) {\n    console.log('bound2', x, y, this.gl)\n    const pick = vec4.fromValues(\n      (2 * x * window.devicePixelRatio) / this.gl.drawingBufferWidth - 1,\n      1 - (2 * y * window.devicePixelRatio) / this.gl.drawingBufferHeight,\n      1,\n      1\n    )\n    vec4.transformMat4(pick, pick, this.invViewProj)\n    const point = vec3.fromValues(\n      pick[0] / pick[3],\n      pick[1] / pick[3],\n      pick[2] / pick[3]\n    )\n    vec3.normalize(point, point)\n    const up = vec3.fromValues(0, 1, 0)\n    vec3.scaleAndAdd(up, up, point, -vec3.dot(point, up))\n    vec3.normalize(up, up)\n    quat.setAxes(\n      this.animation.animRotation,\n      point,\n      vec3.cross(vec3.create(), point, up),\n      up\n    )\n  }\n\n  constructor(private gl: WebGLRenderingContext) {\n    this.initFoxShader()\n    this.initGeometry()\n  }\n\n  private _lastTimestamp = 0\n  public animate(timestamp: number) {\n    const dt = (timestamp - this._lastTimestamp) / 16\n    this._lastTimestamp = timestamp\n    this.animationTick = 10 * (1 + Math.cos(timestamp * 0.001))\n    this.animation.update(timestamp / 16, Math.min(0.5, dt))\n  }\n\n  public explodeRay(x: number, y: number, mag: number) {\n    const pickDir = vec4.fromValues(\n      (2 * x * window.devicePixelRatio) / this.gl.drawingBufferWidth - 1,\n      1 - (2 * y * window.devicePixelRatio) / this.gl.drawingBufferHeight,\n      1,\n      1\n    )\n    vec4.transformMat4(pickDir, pickDir, this.invViewProj)\n    const dir = vec3.fromValues(\n      pickDir[0] / pickDir[3] - this.eye[0],\n      pickDir[1] / pickDir[3] - this.eye[1],\n      pickDir[2] / pickDir[3] - this.eye[2]\n    )\n    vec3.normalize(dir, dir)\n    this.animation.explode(this.eye, dir, mag)\n  }\n\n  public hemisphereAxis = vec3.create()\n  public hemisphereColor0 = vec3.create()\n  public hemisphereColor1 = vec3.create()\n  public interiorColor0 = vec3.create()\n  public interiorColor1 = vec3.create()\n  public fogColor = vec3.create()\n\n  public draw() {\n    // Clear drawing buffer\n    const gl = this.gl\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight)\n    gl.clearColor(0, 0, 0, 0)\n    gl.clearDepth(1)\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\n    //update camera state\n    this.updateCamera()\n\n    // draw animation\n    gl.disable(gl.BLEND)\n    gl.enable(gl.DEPTH_TEST)\n    gl.depthMask(true)\n    gl.enable(gl.CULL_FACE)\n    gl.useProgram(this.foxShader)\n\n    this.bindFoxBuffer()\n    gl.uniformMatrix4fv(this.uViewProj, false, this.viewProj)\n    gl.uniform1f(this.uTick, this.animationTick)\n    gl.uniform3fv(this.uEye, this.eye)\n    gl.uniform3fv(this.uHemisphereAxis, this.hemisphereAxis)\n    gl.uniform3fv(this.uHemisphereColor0, this.hemisphereColor0)\n    gl.uniform3fv(this.uHemisphereColor1, this.hemisphereColor1)\n    gl.uniform3fv(this.uInteriorColor0, this.interiorColor0)\n    gl.uniform3fv(this.uInteriorColor1, this.interiorColor1)\n    gl.uniform3fv(this.uFogColor, this.fogColor)\n\n    const boxes = this.foxBoxes\n    const xforms = this.animation.boxTransforms\n    for (let i = 0; i < boxes.length; ++i) {\n      const { start, end } = boxes[i]\n      gl.uniformMatrix4fv(this.uAnimate, false, xforms[i])\n      gl.drawElements(gl.TRIANGLES, end - start, gl.UNSIGNED_SHORT, 2 * start)\n    }\n  }\n}\n","// react/dom glue code\nimport { vec2, vec3 } from 'gl-matrix'\nimport * as React from 'react'\nimport { FoxRenderer } from './fox-render'\n\nconst MIN_DISTANCE = 100\nconst MAX_DISTANCE = 800\n\nconst getOffset = (evt) => {\n  var el = evt.target,\n      x = 0,\n      y = 0;\n  \n  while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {\n    x += el.offsetLeft - el.scrollLeft;\n    y += el.offsetTop - el.scrollTop;\n    el = el.offsetParent;\n  }\n  x = evt.clientX - x + window.scrollX;\n  y = evt.clientY - y + window.scrollY;\n\n  return { x: x, y: y };\n}\n\nexport type MetamaskBoxAnimationProps = {\n  noGLFallback: React.ReactNode\n  left: number\n  phi: number\n  theta: number\n  distance: number\n  hemisphereAxis: number[]\n  hemisphereColor0: number[]\n  hemisphereColor1: number[]\n  interiorColor0: number[]\n  interiorColor1: number[]\n  fogColor: number[]\n  enableZoom?: boolean\n\n  // if set, follow mouse\n  followMouse?: boolean\n  lookPixel?: number[]\n}\n\nfunction clamp(value: number, min: number, max: number) {\n  return Math.min(Math.max(value, min), max)\n}\n\nexport class MetamaskBoxAnimation extends React.Component<\n  MetamaskBoxAnimationProps,\n  {}\n> {\n  // webgl state\n  public static canvas: HTMLCanvasElement | null = null\n  public static gl: WebGLRenderingContext | null = null\n  public static glFailed: boolean = false\n  public static renderer: FoxRenderer | null = null\n  public static initWebGL() {\n    if (this.gl || this.glFailed) {\n      return\n    }\n\n    const canvas = document.createElement('canvas')\n    canvas.width = canvas.height = 512\n    Object.assign(canvas.style, {\n      left: 0,\n      top: 0,\n      width: '100%',\n      height: '100%',\n      margin: 0,\n      padding: 0,\n      'pointer-events': 'none',\n      position: 'absolute',\n    })\n\n    try {\n      this.gl = canvas.getContext('webgl', {\n        premultipliedAlpha: true,\n        alpha: true,\n        antialias: true,\n      })\n    } catch (err) {\n      this.glFailed = true\n      throw err\n    }\n    const gl = this.gl\n    if (!gl) {\n      this.glFailed = true\n      throw new Error('Failed to get WebGL context')\n    }\n\n    this.canvas = canvas\n\n    // create animation\n    this.renderer = new FoxRenderer(gl)\n  }\n\n  // glue stuff\n  private container: HTMLDivElement | null = null\n  private resizeObserver: ResizeObserver | null = null\n  private intersectionObserver: IntersectionObserver | null = null\n  private raf: number = 0\n\n  constructor(props: MetamaskBoxAnimationProps) {\n    super(props)\n    MetamaskBoxAnimation.initWebGL()\n  }\n\n  public componentWillUnmount() {\n    if (this.container) {\n      this._handleMouseUp()\n      this.container.removeEventListener('touchstart', this._handleTouchStart)\n      this.container.removeEventListener('wheel', this._handleWheel)\n      const canvas = MetamaskBoxAnimation.canvas\n      if (canvas && canvas.parentNode) {\n        canvas.parentNode.removeChild(canvas)\n      }\n    }\n    if (this.raf) {\n      cancelAnimationFrame(this.raf)\n    }\n  }\n\n  private frame = (timestamp: number) => {\n    const gl = MetamaskBoxAnimation.gl\n    if (!gl) {\n      return\n    }\n    const renderer = MetamaskBoxAnimation.renderer\n    if (renderer) {\n      renderer.animate(timestamp)\n      renderer.draw()\n    }\n    this.raf = requestAnimationFrame(this.frame)\n  }\n\n  private updateSize = () => {\n    const container = this.container\n    const canvas = MetamaskBoxAnimation.canvas\n    if (!container || !canvas) {\n      return\n    }\n    if (canvas.parentNode) {\n      canvas.parentNode.removeChild(canvas)\n    }\n    const bounds = container.getBoundingClientRect()\n    canvas.width = Math.ceil(bounds.width * window.devicePixelRatio)\n    canvas.height = Math.ceil(bounds.height * window.devicePixelRatio)\n    container.appendChild(canvas)\n    MetamaskBoxAnimation?.renderer?.draw()\n  }\n\n  private updateVisibility = (entries: { isIntersecting: boolean }[]) => {\n    const e = entries[0]\n    if (!this.container || !e) {\n      if (this.raf) {\n        cancelAnimationFrame(this.raf)\n        this.raf = 0\n      }\n      return\n    }\n    if (e.isIntersecting) {\n      if (!this.raf) {\n        this.raf = requestAnimationFrame(this.frame)\n      }\n    } else if (this.raf) {\n      cancelAnimationFrame(this.raf)\n      this.raf = 0\n    }\n  }\n\n  private _prevPos = vec2.fromValues(0, 0)\n  private _handleMouseDown = (x: number, y: number) => {\n    if (!MetamaskBoxAnimation.renderer) {\n      return\n    }\n    this._prevPos[0] = x\n    this._prevPos[1] = y\n    MetamaskBoxAnimation.renderer.explodeRay(x, y, 100)\n    document.body.addEventListener('mousemove', this._handleMouseMove, {\n      passive: false,\n    })\n    document.body.addEventListener('touchmove', this._handleTouchMove, {\n      passive: false,\n    })\n    document.body.addEventListener('mouseup', this._handleMouseUp)\n    document.body.addEventListener('touchend', this._handleMouseUp)\n  }\n\n  private _lastPinchDist = 0\n\n  private _handleMove(posX: number, posY: number) {\n    const renderer = MetamaskBoxAnimation.renderer\n    if (!renderer) {\n      return\n    }\n    MetamaskBoxAnimation.renderer.explodeRay(posX, posY, 30)\n    const { _prevPos } = this\n    _prevPos[0] = posX\n    _prevPos[1] = posY\n  }\n\n  private _handleTouchMove = (ev: TouchEvent) => {\n    const renderer = MetamaskBoxAnimation.renderer\n    if (!renderer) {\n      return\n    }\n    ev.preventDefault()\n    if (ev.touches.length === 0) {\n      return\n    } else if (ev.touches.length > 1 && this.props.enableZoom) {\n      const dist = Math.hypot(\n        ev.touches[0].pageX - ev.touches[1].pageX,\n        ev.touches[0].pageY - ev.touches[1].pageY\n      )\n      const dx = this._lastPinchDist - dist\n      this._lastPinchDist = dist\n      renderer.distance = clamp(\n        renderer.distance + dx * 0.1,\n        MIN_DISTANCE,\n        MAX_DISTANCE\n      )\n      return\n    }\n\n    const touch = ev.touches[0]\n    const offset = getOffset(touch);\n    this._handleMove(touch.layerX || offset?.x || touch.clientX, touch.layerY || offset?.y || touch.clientY)\n  }\n\n  private _handleMouseMove = (ev: MouseEvent) => {\n    const renderer = MetamaskBoxAnimation.renderer\n    if (!renderer) {\n      return\n    }\n    ev.preventDefault()\n    const offset = getOffset(ev);\n    this._handleMove(ev.layerX || offset?.x || ev.clientX, ev.layerY || offset?.y || ev.clientY)\n  }\n\n  private _handleMouseUp = () => {\n    document.body.removeEventListener('mousemove', this._handleMouseMove)\n    document.body.removeEventListener('touchmove', this._handleTouchMove)\n    document.body.removeEventListener('mouseup', this._handleMouseUp)\n    document.body.removeEventListener('touchend', this._handleMouseUp)\n  }\n\n  private _handleTouchStart = (ev: TouchEvent) => {\n    const renderer = MetamaskBoxAnimation.renderer\n    if (!renderer) {\n      return\n    }\n    ev.preventDefault()\n    const touch = ev.touches[0]\n    if (!touch) {\n      return\n    }\n    if (ev.touches.length === 1) {\n      const offset = getOffset(touch);\n      this._handleMouseDown(touch.layerX || offset?.x || touch.clientX, touch.layerY || offset?.y || touch.clientY)\n    } else {\n      this._lastPinchDist = Math.hypot(\n        ev.touches[0].pageX - ev.touches[1].pageX,\n        ev.touches[0].pageY - ev.touches[1].pageY\n      )\n    }\n  }\n\n  private _handleWheel = (ev: WheelEvent) => {\n    const renderer = MetamaskBoxAnimation.renderer\n    if (!renderer) {\n      return\n    }\n    if (this.props.enableZoom) {\n      ev.stopPropagation()\n      ev.preventDefault()\n      const { deltaY } = ev\n      renderer.distance = clamp(\n        renderer.distance + deltaY * 0.1,\n        MIN_DISTANCE,\n        MAX_DISTANCE\n      )\n    }\n  }\n\n  public render() {\n    if (!MetamaskBoxAnimation.gl) {\n      return this.props.noGLFallback\n    }\n    if (MetamaskBoxAnimation.renderer) {\n      const renderer = MetamaskBoxAnimation.renderer\n\n      renderer.phi = this.props.phi\n      renderer.theta = this.props.theta\n      renderer.distance = this.props.distance\n      vec3.normalize(renderer.hemisphereAxis, this.props.hemisphereAxis as any)\n      vec3.copy(renderer.hemisphereColor0, this.props.hemisphereColor0 as any)\n      vec3.copy(renderer.hemisphereColor1, this.props.hemisphereColor1 as any)\n      vec3.copy(renderer.interiorColor0, this.props.interiorColor0 as any)\n      vec3.copy(renderer.interiorColor1, this.props.interiorColor1 as any)\n      vec3.copy(renderer.fogColor, this.props.fogColor as any)\n\n      if (this.props.lookPixel) {\n        renderer.foxLookAt(this.props.lookPixel[0], this.props.lookPixel[1])\n      }\n    }\n    const left = this.props.left\n\n    return (\n      <div\n        style={{\n          cursor: 'grab',\n          position: 'absolute',\n          width: '100%',\n          height: '100%',\n          padding: 0,\n          margin: 0,\n          top: 0,\n          left: left\n        }}\n        onMouseDown={(ev) => {\n          if (MetamaskBoxAnimation.renderer) {\n            const offset = getOffset(ev);\n            this._handleMouseDown(ev.layerX || offset?.x || ev.clientX, ev.layerY || offset?.y || ev.clientY)\n          }\n        }}\n        onMouseMove={(ev) => {\n          if (this.props.followMouse && MetamaskBoxAnimation.renderer) {\n            const offset = getOffset(ev);\n            MetamaskBoxAnimation.renderer.foxLookAt(ev.layerX || offset?.x || ev.clientX, ev.layerY || offset?.y || ev.clientY)\n          }\n        }}\n        ref={(container) => {\n          if (this.resizeObserver) {\n            this.resizeObserver.disconnect()\n            this.resizeObserver = null\n          }\n          if (this.intersectionObserver) {\n            this.intersectionObserver.disconnect()\n            this.intersectionObserver = null\n          }\n          if (!container) {\n            return\n          }\n          if (typeof window['ResizeObserver'] !== 'undefined') {\n            this.resizeObserver = new ResizeObserver(this.updateSize)\n            this.resizeObserver.observe(container)\n          } else {\n            this.updateSize()\n          }\n\n          if (typeof window['IntersectionObserver'] !== 'undefined') {\n            this.intersectionObserver = new IntersectionObserver(\n              this.updateVisibility\n            )\n            this.intersectionObserver.observe(container)\n          } else {\n            this.updateVisibility([\n              {\n                isIntersecting: true,\n              },\n            ])\n          }\n          if (!this.container) {\n            this.container = container\n            container.addEventListener('touchstart', this._handleTouchStart, {\n              passive: false,\n            })\n            if (this.props.enableZoom) {\n              container.addEventListener('wheel', this._handleWheel, {\n                passive: false,\n              })\n            }\n            this.updateSize()\n          }\n        }}\n      />\n    )\n  }\n}\n","import React from 'react'\nimport { MetamaskBoxAnimation } from './Logo/MetamaskBoxAnimation'\nimport styled, { withTheme } from 'styled-components'\nconst FoxAnimation = props => {\n  const [shouldMount, setShouldMount] = React.useState(false)\n  const [left, setLeft] = React.useState(24)\n  const [distance, setDistance] = React.useState(1200)\n  const handleWindowSizeChange = () => {\n    if (window.innerWidth < 480) {\n      setLeft(0)\n      setDistance(window.innerWidth * 1.5)\n    } else if (window.innerWidth < 992) {\n      setLeft(0)\n      setDistance(window.innerWidth)\n    } else {\n      if (window.innerWidth < 1400) {\n        setDistance(window.innerWidth - 200)\n      } else {\n        setDistance(1200)\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    handleWindowSizeChange()\n    window.addEventListener('resize', handleWindowSizeChange)\n    setShouldMount(true)\n    return () => {\n      window.removeEventListener('resize', handleWindowSizeChange)\n    }\n  }, [left, distance])\n\n  return (\n    <Wrapper id=\"fox-logo-container\">\n      {shouldMount && (\n        <MetamaskBoxAnimation\n          left={left}\n          phi={0}\n          theta={Math.PI / 2}\n          distance={distance}\n          hemisphereAxis={[0.1, 0.5, 0.2]}\n          hemisphereColor1={[1, 1, 1]}\n          hemisphereColor0={[1, 1, 1]}\n          fogColor={[0.5, 0.5, 0.5]}\n          interiorColor0={[1, 0.5, 0]}\n          interiorColor1={[0.5, 0.2, 0]}\n          noGLFallback={<div>WebGL not supported :(</div>}\n          enableZoom={false}\n          followMouse={false}\n        />\n      )}\n    </Wrapper>\n  )\n}\n\nexport default withTheme(FoxAnimation)\nconst Wrapper = styled.div`\n  position: absolute;\n  width: 100%;\n\n  @media (max-width: ${({theme}) => theme.device.mobile}){\n    width: 150%;\n  }\n\n  &:before {\n    content: '';\n    display: block;\n    padding-bottom: 100%;\n  }\n`\n","var $ = require('../internals/export');\n\nvar $hypot = Math.hypot;\nvar abs = Math.abs;\nvar sqrt = Math.sqrt;\n\n// Chrome 77 bug\n// https://bugs.chromium.org/p/v8/issues/detail?id=9546\nvar BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;\n\n// `Math.hypot` method\n// https://tc39.es/ecma262/#sec-math.hypot\n$({ target: 'Math', stat: true, forced: BUGGY }, {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * sqrt(sum);\n  }\n});\n"],"sourceRoot":""}