{"version":3,"file":"component---src-templates-contentful-download-layout-js-b73af6d769bc1e409685.js","mappings":"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","sources":["webpack://metamask-io/./src/components/DownloadBrowser.js","webpack://metamask-io/./src/components/DownloadContainer.js","webpack://metamask-io/./src/templates/ContentfulDownloadLayout.js"],"sourcesContent":["import React from 'react'\nimport styled, { withTheme } from 'styled-components'\nimport { Section } from './StyledGeneral'\nimport ContentWrapper from './ContentWrapper'\nimport Image from './Image'\nimport Link from './Link'\n\nconst DownloadBrowser = props => {\n  const {\n    headline,\n    cta: { downloadBrowsers },\n  } = props.data || {}\n  const { previewMode } = props\n\n  if (!downloadBrowsers || !downloadBrowsers.length) return null\n\n  const browsers = previewMode\n    ? downloadBrowsers\n    : downloadBrowsers.map(browser => {\n        return JSON.parse(browser.internal.content)\n      }, [])\n\n  return (\n    <Container className={'bg-gray'} sectionPadding={'88px'}>\n      <ContentWrapper>\n        <Heading>{headline}</Heading>\n        {browsers && browsers.length ? (\n          <BrowserWrapper>\n            <BrowserList>\n              {browsers.map(browser => {\n                const { link, icon, text } = browser\n                return (\n                  <BrowserItem key={text} to={link} newTab>\n                    <Image src={icon} />\n                    <BrowserName>{text}</BrowserName>\n                  </BrowserItem>\n                )\n              })}\n            </BrowserList>\n          </BrowserWrapper>\n        ) : null}\n      </ContentWrapper>\n    </Container>\n  )\n}\n\nexport default withTheme(DownloadBrowser)\n\nconst Container = styled(Section)`\n  @media (max-width: ${({ theme }) => theme.device.mobileMediaMax}) {\n    padding-top: 88px !important;\n    padding-bottom: 88px !important;\n  }\n`\nconst BrowserWrapper = styled.div`\n  display: block;\n`\n\nconst BrowserList = styled.div`\n  display: flex;\n  flex-flow: wrap;\n  margin: -20px;\n\n  @media (max-width: ${({ theme }) => theme.device.mobileMediaMax}) {\n    margin: -12px;\n  }\n\n  & > * {\n    width: 20%;\n    padding: 20px;\n\n    @media (max-width: ${({ theme }) => theme.device.tabletMediaMax}) {\n      width: 33.33%;\n    }\n\n    @media (max-width: ${({ theme }) => theme.device.mobileMediaMax}) {\n      width: 100%;\n      padding: 12px;\n    }\n  }\n`\n\nconst BrowserItem = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  text-align: center;\n  color: ${({ theme }) => theme.text.body};\n\n  img {\n    width: 50px;\n    height: 50px;\n  }\n`\n\nconst BrowserName = styled.div`\n  display: block;\n  margin-top: 16px;\n`\nconst Heading = styled.h2`\n  margin-bottom: 32px;\n  font-size: 35px;\n  line-height: 40px;\n  font-weight: 700;\n  text-align: center;\n  @media (max-width: ${({ theme }) => theme.device.mobileMediaMax}) {\n    padding-right: 10px;\n    padding-left: 10px;\n  }\n`\n","import { browserName, isAndroid, isIOS, isMobile } from 'react-device-detect'\nimport React, { Suspense, lazy, useEffect, useState } from 'react'\nimport styled, { withTheme } from 'styled-components'\nimport { Section } from './StyledGeneral'\nimport ContentWrapper from './ContentWrapper'\nimport Loading from './Loading'\nimport get from 'lodash/get'\nimport useIsChromium from '../lib/utils/isChromium'\nconst TabWrapper = lazy(() => import('./Tab/TabWrapper'))\nconst TabContentDownload = lazy(() => import('./DownloadTab'))\n\nconst DownloadContainer = ({ data, previewMode }) => {\n  const [device, setDevice] = useState('')\n  const isChromium = useIsChromium()\n\n  useEffect(() => {\n    if (isMobile) {\n      if (isAndroid) {\n        setDevice('android')\n      } else if (isIOS) {\n        setDevice('ios')\n      } else {\n        setDevice('browser')\n      }\n    } else {\n      setDevice('browser')\n    }\n  }, [])\n\n  const isSSR = typeof window === 'undefined'\n  const appExtensions = previewMode\n    ? get(data, 'modulesCollection.items[0].modulesCollection.items')\n    : get(data, 'modules[0].modules')\n\n  if (!appExtensions) return null\n\n  const defaultTitle = isMobile\n    ? 'Chrome'\n    : isChromium\n    ? 'Chromium'\n    : browserName\n  const tabs = appExtensions.map(item => ({\n    label: item.title || defaultTitle,\n    id: item.title?.toLowerCase() || 'browser',\n    content: !isSSR && (\n      <Suspense fallback={<Loading />}>\n        <TabContentDownload\n          item={item}\n          id={item.title || 'browser'}\n          previewMode={previewMode}\n        />\n      </Suspense>\n    ),\n  }))\n\n  return (\n    <Container>\n      <ContentWrapper>\n        {!isSSR && device ? (\n          <Suspense fallback={<div />}>\n            <TabWrapper tabs={tabs} activeTabDefault={device} />\n          </Suspense>\n        ) : null}\n      </ContentWrapper>\n    </Container>\n  )\n}\n\nexport default withTheme(DownloadContainer)\n\nconst Container = styled(Section)``\n","import React from 'react'\nimport styled from 'styled-components'\nimport { graphql } from 'gatsby'\nimport { ContentfulLayoutHeader as Header } from '../components/Contentful'\nimport Layout from './PageLayout'\nimport DownloadBrowser from '../components/DownloadBrowser'\nimport DownloadContainer from '../components/DownloadContainer'\nimport { contentfulModuleToComponent } from '../lib/utils/moduleToComponent'\nimport { DEFAULT_LOCALE_CODE } from '../lib/config.mjs'\nimport withProcessPreviewData from '../lib/utils/withProcessPreviewData'\n\nconst DownloadPage = props => {\n  const {\n    data: { seo, header, footer, layoutModuleContainers },\n    pageContext: {\n      pathBuild,\n      locale = DEFAULT_LOCALE_CODE,\n      translation,\n      localizedPages,\n    } = {},\n    previewMode,\n  } = props\n  const modules = layoutModuleContainers.nodes\n\n  if (!modules || !modules.length) return null\n\n  const supportBrowserModule = modules.find(\n    f => f.moduleId === 'supported-browser'\n  )\n  const installMetaMaskModule = modules.find(\n    f => f.moduleId === 'install-metamask'\n  )\n\n  return (\n    <Layout locale={locale} localizedPages={localizedPages}>\n      {seo &&\n        contentfulModuleToComponent({\n          ...seo,\n          pagePath: pathBuild,\n          translation,\n        })}\n      <Header\n        moduleConfig={{ ...header, translation, previewMode }}\n        hideDownloadBtn\n      />\n      <Container>\n        <DownloadTitle>Install MetaMask</DownloadTitle>\n        {installMetaMaskModule ? (\n          <DownloadContainer\n            data={installMetaMaskModule}\n            previewMode={previewMode}\n          />\n        ) : null}\n        {supportBrowserModule ? (\n          <DownloadBrowser\n            data={supportBrowserModule}\n            previewMode={previewMode}\n          />\n        ) : null}\n      </Container>\n      {contentfulModuleToComponent({ ...footer, previewMode })}\n    </Layout>\n  )\n}\n\nconst parsePreviewData = data => {\n  const {\n    header,\n    footer,\n    modulesCollection: { items },\n  } = data.data\n\n  const dataUpdate = {\n    previewMode: true,\n    pageContext: {\n      locale: data.locale,\n    },\n    data: {\n      header,\n      footer,\n      layoutModuleContainers: {\n        nodes: items,\n      },\n    },\n  }\n  return dataUpdate\n}\n\nexport default withProcessPreviewData(parsePreviewData)(DownloadPage)\n\nexport const DownloadPageQuery = graphql`\n  query(\n    $modules: [String]!\n    $headerId: String\n    $footerId: String\n    $seoId: String\n    $node_locale: String\n  ) {\n    header: contentfulLayoutHeader(\n      contentful_id: { eq: $headerId }\n      node_locale: { eq: $node_locale }\n    ) {\n      ...ContentfulLayoutHeaderFields\n    }\n    footer: contentfulLayoutFooter(\n      contentful_id: { eq: $footerId }\n      node_locale: { eq: $node_locale }\n    ) {\n      ...ContentfulLayoutFooterFields\n    }\n    seo: contentfulSeo(\n      contentful_id: { eq: $seoId }\n      node_locale: { eq: $node_locale }\n    ) {\n      ...ContentfulSeoFields\n    }\n    layoutModuleContainers: allContentfulLayoutModuleContainer(\n      filter: {\n        contentful_id: { in: $modules }\n        node_locale: { eq: $node_locale }\n      }\n    ) {\n      nodes {\n        ...ContentfulLayoutModuleContainerFields\n      }\n    }\n  }\n`\n\nconst Container = styled.div`\n  display: block;\n`\n\nconst DownloadTitle = styled.h1`\n  display: none;\n`\n"],"names":["withTheme","props","headline","cta","downloadBrowsers","data","previewMode","length","browsers","map","browser","JSON","parse","internal","content","React","Container","className","sectionPadding","ContentWrapper","Heading","BrowserWrapper","BrowserList","link","icon","text","BrowserItem","key","to","newTab","Image","src","BrowserName","styled","Section","withConfig","displayName","componentId","_ref","theme","device","mobileMediaMax","div","_ref2","_ref3","tabletMediaMax","_ref4","Link","_ref5","body","h2","_ref6","TabWrapper","lazy","TabContentDownload","setDevice","useState","isChromium","useIsChromium","useEffect","isMobile","isAndroid","isIOS","isSSR","window","appExtensions","get","defaultTitle","browserName","tabs","item","_item$title","label","title","id","toLowerCase","Suspense","fallback","Loading","activeTabDefault","withProcessPreviewData","header","footer","modulesCollection","items","pageContext","locale","layoutModuleContainers","nodes","seo","pathBuild","DEFAULT_LOCALE_CODE","translation","localizedPages","modules","supportBrowserModule","find","f","moduleId","installMetaMaskModule","Layout","contentfulModuleToComponent","pagePath","Header","moduleConfig","hideDownloadBtn","DownloadTitle","DownloadContainer","DownloadBrowser","h1"],"sourceRoot":""}